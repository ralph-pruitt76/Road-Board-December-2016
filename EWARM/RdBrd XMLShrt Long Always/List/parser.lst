###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       18/Dec/2017  11:40:23
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\parser.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\parser.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : parser.c
      4            * Description        : This file provides code that parses the passed string and 
      5            *                      performs the requested operation. It then returns a string
      6            *                      hardware based on the LPS22HB chip.
      7            ******************************************************************************
      8            *
      9            * COPYRIGHT(c) 2016 WeatherCloud
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of WeatherCloud nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /* Includes ------------------------------------------------------------------*/
     37          #include "parser.h"
     38          #include "ErrorCodes.h"
     39          #include <ctype.h>
     40          #include <stdlib.h>
     41          #include "wwdg.h"
     42          #include "Calibration.h"
     43          #include "s_record.h"
     44          
     45          // Enums
     46          typedef enum 
     47          {
     48            NOT_INIT = 0,
     49            AVAILABLE = 1,
     50            BUSY = 2
     51          } ParseTskFlg;
     52          

   \                                 In section .bss, align 1
     53          static bool Bypass = false;
   \                     Bypass:
   \   00000000                      DS8 1
     54          
     55          // Parser Structure for tasks.
     56          struct
     57          {
     58            char          tempBuffer[BUFFER_SIZE];
     59            ParseTskFlg   ParseFlg;

   \                                 In section .bss, align 4
     60          } static ParseString;
   \                     ParseString:
   \   00000000                      DS8 44
     61          
     62          /* Parser functions */
     63          
     64          /**
     65            * @brief  This routine initializes the Parse Task Structure.
     66            * @param  *tempBffr: String to be parsed.
     67            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     68            */

   \                                 In section .text, align 2, keep-with-next
     69          HAL_StatusTypeDef RoadBrd_ParserInit( void )
     70          {
     71            ParseString.ParseFlg = AVAILABLE;
   \                     RoadBrd_ParserInit: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable2
   \   00000004   0xF881 0x0028      STRB     R0,[R1, #+40]
     72            return HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR               ;; return
     73          }
     74          
     75          /**
     76            * @brief  This routine handles the operation of setting up a Parse Event.
     77            * @param  *tempBffr: String to be parsed.
     78            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     79            *                                HAL_ERROR:    Error found in Tasking or data passed.
     80            *                                HAL_BUSY:     UART is busy.
     81            *                                HAL_TIMEOUT:  UART timed out.
     82            */

   \                                 In section .text, align 2, keep-with-next
     83          HAL_StatusTypeDef RoadBrd_ParserTsk(char *tempBffr)
     84          {
   \                     RoadBrd_ParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     85            // Test ParseFlg.
     86            if (ParseString.ParseFlg == BUSY)
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??RoadBrd_ParserTsk_0
     87              return HAL_BUSY;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE016             B.N      ??RoadBrd_ParserTsk_1
     88            else if (ParseString.ParseFlg == NOT_INIT)
   \                     ??RoadBrd_ParserTsk_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??RoadBrd_ParserTsk_2
     89              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE00F             B.N      ??RoadBrd_ParserTsk_1
     90            // Next Lets make sure passed string is not too big.
     91          //  if (strlen((char *)tempBffr) >= BUFFER_SIZE)
     92            if (strlen(tempBffr) >= BUFFER_SIZE)
   \                     ??RoadBrd_ParserTsk_2: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x2828             CMP      R0,#+40
   \   00000028   0xD301             BCC.N    ??RoadBrd_ParserTsk_3
     93              return HAL_ERROR;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE008             B.N      ??RoadBrd_ParserTsk_1
     94            // Copy String into Structure and set as busy.
     95          //  strcpy( (char *)ParseString.tempBuffer, (char *)tempBffr);
     96            strcpy( ParseString.tempBuffer, tempBffr);
   \                     ??RoadBrd_ParserTsk_3: (+1)
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0x....             LDR.N    R0,??DataTable2
   \   00000032   0x.... 0x....      BL       strcpy
     97            ParseString.ParseFlg = BUSY;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x....             LDR.N    R1,??DataTable2
   \   0000003A   0xF881 0x0028      STRB     R0,[R1, #+40]
     98            return HAL_OK;
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ParserTsk_1: (+1)
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     99          }
    100          
    101          /**
    102            * @brief  This routine handles the operation of processing a Parse Event.
    103            * @param  *tempBffr: String to be parsed.
    104            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    105            *                                HAL_ERROR:    Error found in Tasking or data passed.
    106            *                                HAL_BUSY:     UART is busy.
    107            *                                HAL_TIMEOUT:  UART timed out.
    108            */

   \                                 In section .text, align 2, keep-with-next
    109          HAL_StatusTypeDef RoadBrd_ProcessParserTsk( void )
    110          {
   \                     RoadBrd_ProcessParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    111            HAL_StatusTypeDef Status;
    112          
    113            // Test ParseFlg and process.
    114            if (ParseString.ParseFlg == BUSY)
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD10B             BNE.N    ??RoadBrd_ProcessParserTsk_0
    115            {
    116              Status = RoadBrd_ParseString(ParseString.tempBuffer, true);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x....             LDR.N    R0,??DataTable2
   \   00000010   0x.... 0x....      BL       RoadBrd_ParseString
   \   00000014   0x0004             MOVS     R4,R0
    117              ParseString.ParseFlg = AVAILABLE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable2
   \   0000001A   0xF881 0x0028      STRB     R0,[R1, #+40]
    118              return Status;
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xE000             B.N      ??RoadBrd_ProcessParserTsk_1
    119            }
    120            else
    121              return HAL_OK;
   \                     ??RoadBrd_ProcessParserTsk_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ProcessParserTsk_1: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    122          }
    123          
    124          
    125          /**
    126            * @brief  This routine parses the passed string and performs the passed operation
    127            * @param  *tempBffr: String to be parsed.
    128            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    129            *                                HAL_ERROR:    Error found in Tasking or data passed.
    130            *                                HAL_BUSY:     UART is busy.
    131            *                                HAL_TIMEOUT:  UART timed out.
    132            */

   \                                 In section .text, align 4, keep-with-next
    133          HAL_StatusTypeDef RoadBrd_ParseString(char *tempBffr, bool BLE_Flag)
    134          {
   \                     RoadBrd_ParseString: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x6DA0      SUB      SP,SP,#+1280
   \   00000008   0xB08D             SUB      SP,SP,#+52
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x000D             MOVS     R5,R1
    135          #ifdef TEST2
    136            #define RECEIVE_SZ      5
    137            uint8_t Size;
    138            uint8_t i2cData[80];
    139            uint8_t tempBffr3[10];
    140            char tempBffr2[5];
    141            int Loop_cnt;
    142            HAL_StatusTypeDef Status, Save_Status;
    143            int Address;
    144            int num_bytes;
    145            int num_bytes_received;
    146            int Error, x;
    147            char tempstr[20];
    148            char* tempPstr;
    149            int new_value, flag;
    150            float Temp_C, Temp_F, Shunt_V, Bus_V, Crrnt, Power;
    151            uint32_t Err_code;
    152          #else
    153            #ifdef TEST
    154              #define RECEIVE_SZ      5
    155            #else
    156              #define RECEIVE_SZ      30
    157              uint16_t DriverStatus;
    158              int8_t tempBffr2[120];
    159              int8_t tempBffr3[10];
    160              int8_t s_cmd[5];
    161              int8_t s_recrd[120];
    162              int8_t* BufferPntr;
    163              HAL_StatusTypeDef Status, Save_Status;
    164              uint8_t Size;
    165              int Address;
    166              int num_bytes;
    167              int Numbr_Rcrds;
    168              int num_bytes_received;
    169              uint8_t i2cData[80];
    170              int Error, x, y;
    171              Voltage VMeasure, VMeasureScaled;
    172              Current CMeasure, CMeasureScaled;
    173              Power PMeasure, PMeasureScaled;
    174              Temperature TMeasure, TMeasureScaled;
    175              Humidity HMeasure, HMeasureScaled;
    176              RGBInitialize RGBMeasure;
    177              RGBIdent IDMeasure;
    178              RGBStatus RGBSMeasure;
    179              RGBLight RGBValues;
    180              SrecElement Srec_Elem;
    181              char uuid[10];
    182              float Scale, Offset;
    183          //    PRStatus PRMeasure;
    184              PRPressure PRPMeasure, PRPMeasureScaled;
    185              BinString RSFFTBins;
    186              GridEye     GridMeasure, GridMeasureScaled;
    187              uint32_t Err_code;
    188              uint8_t op_mode, ds_range, adc_rsl, sync, cmp_adjst, cmp_offst, int_assgn, int_persist, cnvrsn_int;
    189              int new_value, flag;
    190              char* tempPstr;
    191              char tempstr[20];
    192            #endif
    193          #endif
    194          
    195              Size = strlen((char *)tempBffr);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0xF88D 0x0028      STRB     R0,[SP, #+40]
    196              Status = HAL_OK;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0006             MOVS     R6,R0
    197              
    198              // Test Bypass. If set, then we are in streaming mode.
    199              if ( Bypass )
   \   0000001C   0xF8DF 0x0DF4      LDR.W    R0,??RoadBrd_ParseString_0
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD01E             BEQ.N    ??RoadBrd_ParseString_1
    200              {
    201                if (tempBffr[0] == 0x1B)
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x281B             CMP      R0,#+27
   \   0000002A   0xD115             BNE.N    ??RoadBrd_ParseString_2
    202                {
    203                  Bypass = false;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_0
   \   00000032   0x7008             STRB     R0,[R1, #+0]
    204                  strcpy( (char *)tempBffr2, "\r\n\r\n T........TERMINATING MONITOR MODE.........\r\n\r\n> ");
   \   00000034   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_0+0x4
   \   00000038   0xA80B             ADD      R0,SP,#+44
   \   0000003A   0x.... 0x....      BL       strcpy
    205          #ifdef NUCLEO
    206                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    207          #else
    208                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000003E   0xA90B             ADD      R1,SP,#+44
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000046   0x0006             MOVS     R6,R0
    209          #endif
    210                  if (Status != HAL_OK)
   \   00000048   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004A   0x2E00             CMP      R6,#+0
   \   0000004C   0xF004 0x8590      BEQ.W    ??RoadBrd_ParseString_3
    211                    return Status;
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0xF004 0xBD8E      B.W      ??RoadBrd_ParseString_4
    212                }
    213                else
    214                {
    215                  // Transmit Character to BGM111.
    216                  BGM111_Transmit(1, (uint8_t *)tempBffr);
   \                     ??RoadBrd_ParseString_2: (+1)
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       BGM111_Transmit
   \   00000060   0xF004 0xBD86      B.W      ??RoadBrd_ParseString_3
    217                }
    218              }// EndIf ( Bypass )
    219              else
    220              {
    221                // Normal Mode
    222              
    223                      // We have a good Tasking String. Time to determine action.
    224                      switch( tempBffr[0] )
   \                     ??RoadBrd_ParseString_1: (+1)
   \   00000064   0x7820             LDRB     R0,[R4, #+0]
   \   00000066   0x2830             CMP      R0,#+48
   \   00000068   0xD02F             BEQ.N    ??RoadBrd_ParseString_5
   \   0000006A   0x2831             CMP      R0,#+49
   \   0000006C   0xD048             BEQ.N    ??RoadBrd_ParseString_6
   \   0000006E   0x2832             CMP      R0,#+50
   \   00000070   0xD079             BEQ.N    ??RoadBrd_ParseString_7
   \   00000072   0x2833             CMP      R0,#+51
   \   00000074   0xF000 0x80AA      BEQ.W    ??RoadBrd_ParseString_8
   \   00000078   0x2834             CMP      R0,#+52
   \   0000007A   0xF000 0x80DA      BEQ.W    ??RoadBrd_ParseString_9
   \   0000007E   0x2835             CMP      R0,#+53
   \   00000080   0xF000 0x810A      BEQ.W    ??RoadBrd_ParseString_10
   \   00000084   0x2836             CMP      R0,#+54
   \   00000086   0xF000 0x817D      BEQ.W    ??RoadBrd_ParseString_11
   \   0000008A   0x2841             CMP      R0,#+65
   \   0000008C   0xF000 0x8193      BEQ.W    ??RoadBrd_ParseString_12
   \   00000090   0x2842             CMP      R0,#+66
   \   00000092   0xF000 0x82EE      BEQ.W    ??RoadBrd_ParseString_13
   \   00000096   0x2843             CMP      R0,#+67
   \   00000098   0xF000 0x85B4      BEQ.W    ??RoadBrd_ParseString_14
   \   0000009C   0x2844             CMP      R0,#+68
   \   0000009E   0xF000 0x87B5      BEQ.W    ??RoadBrd_ParseString_15
   \   000000A2   0x2845             CMP      R0,#+69
   \   000000A4   0xF001 0x8130      BEQ.W    ??RoadBrd_ParseString_16
   \   000000A8   0x2846             CMP      R0,#+70
   \   000000AA   0xF001 0x8142      BEQ.W    ??RoadBrd_ParseString_17
   \   000000AE   0x2847             CMP      R0,#+71
   \   000000B0   0xF001 0x815A      BEQ.W    ??RoadBrd_ParseString_18
   \   000000B4   0x2848             CMP      R0,#+72
   \   000000B6   0xF001 0x81D7      BEQ.W    ??RoadBrd_ParseString_19
   \   000000BA   0x2850             CMP      R0,#+80
   \   000000BC   0xF001 0x84B6      BEQ.W    ??RoadBrd_ParseString_20
   \   000000C0   0x2854             CMP      R0,#+84
   \   000000C2   0xF001 0x84E1      BEQ.W    ??RoadBrd_ParseString_21
   \   000000C6   0xF004 0xBCC5      B.W      ??RoadBrd_ParseString_22
    225                      {
    226          //**************************************************************************************************
    227                      case '0':
    228                        // Enable Road sound and fill buffer. 
    229                        Status = RoadBrdSnd_ProcessSound();
   \                     ??RoadBrd_ParseString_5: (+1)
   \   000000CA   0x.... 0x....      BL       RoadBrdSnd_ProcessSound
   \   000000CE   0x0006             MOVS     R6,R0
    230                        if (Status == HAL_OK)
   \   000000D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D2   0x2E00             CMP      R6,#+0
   \   000000D4   0xD112             BNE.N    ??RoadBrd_ParseString_23
    231                        {
    232                          // Is this a BLE Operation?
    233                          if ( BLE_Flag )
   \   000000D6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D8   0x2D00             CMP      R5,#+0
   \   000000DA   0xD00A             BEQ.N    ??RoadBrd_ParseString_24
    234                          {
    235                            // Yes...Build and Send BLE Response NOW.
    236                            strcpy( (char *)tempBffr2, "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>");
   \   000000DC   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_25
   \   000000E0   0xA80B             ADD      R0,SP,#+44
   \   000000E2   0x.... 0x....      BL       strcpy
    237                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000000E6   0xA80B             ADD      R0,SP,#+44
   \   000000E8   0x.... 0x....      BL       strlen
   \   000000EC   0xA90B             ADD      R1,SP,#+44
   \   000000EE   0x.... 0x....      BL       BGM111_Transmit
    238                          }
    239                          strcpy( (char *)tempBffr2, "Road Sound: Road Sound loaded, processed, and sent to FFT Bins.\r\n");
   \                     ??RoadBrd_ParseString_24: (+1)
   \   000000F2   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_25+0x4
   \   000000F6   0xA80B             ADD      R0,SP,#+44
   \   000000F8   0x.... 0x....      BL       strcpy
    240                        }
    241                        break;
   \                     ??RoadBrd_ParseString_23: (+1)
   \   000000FC   0xF004 0xBCBB      B.W      ??RoadBrd_ParseString_26
    242          //**************************************************************************************************
    243                      case '1':
    244                        // Rd_Sound FFT Measurements 0-15. 
    245                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \                     ??RoadBrd_ParseString_6: (+1)
   \   00000100   0xA891             ADD      R0,SP,#+580
   \   00000102   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   00000106   0x0006             MOVS     R6,R0
    246                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 0-15.\r\n");
   \   00000108   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_25+0xC
   \   0000010C   0xA80B             ADD      R0,SP,#+44
   \   0000010E   0x.... 0x....      BL       strcpy
    247          #ifdef NUCLEO
    248                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    249          #else
    250                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000112   0xA90B             ADD      R1,SP,#+44
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000011A   0x0006             MOVS     R6,R0
    251          #endif
    252                        if (Status != HAL_OK)
   \   0000011C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000011E   0x2E00             CMP      R6,#+0
   \   00000120   0xD003             BEQ.N    ??RoadBrd_ParseString_27
    253                          return Status;
   \   00000122   0x0030             MOVS     R0,R6
   \   00000124   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000126   0xF004 0xBD25      B.W      ??RoadBrd_ParseString_4
    254                        // Is this a BLE Operation?
    255                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_27: (+1)
   \   0000012A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000012C   0x2D00             CMP      R5,#+0
   \   0000012E   0xD00B             BEQ.N    ??RoadBrd_ParseString_28
    256                        {
    257                          // Yes...Build and Send BLE Response NOW.
    258                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT0-15:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000130   0xAA91             ADD      R2,SP,#+580
   \   00000132   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_25+0x10
   \   00000136   0xA80B             ADD      R0,SP,#+44
   \   00000138   0x.... 0x....      BL       sprintf
    259                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000013C   0xA80B             ADD      R0,SP,#+44
   \   0000013E   0x.... 0x....      BL       strlen
   \   00000142   0xA90B             ADD      R1,SP,#+44
   \   00000144   0x.... 0x....      BL       BGM111_Transmit
    260                        }
    261                        // NOW, Build Data String..
    262                        sprintf( (char *)tempBffr2, "     FFT Measurements 0-15: " );
   \                     ??RoadBrd_ParseString_28: (+1)
   \   00000148   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_25+0x14
   \   0000014C   0xA80B             ADD      R0,SP,#+44
   \   0000014E   0x.... 0x....      BL       sprintf
    263                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000152   0xA991             ADD      R1,SP,#+580
   \   00000154   0xA80B             ADD      R0,SP,#+44
   \   00000156   0x.... 0x....      BL       strcat
    264                        strcat( (char *)tempBffr2, "\r\n" );
   \   0000015A   0xA1DA             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000015C   0xA80B             ADD      R0,SP,#+44
   \   0000015E   0x.... 0x....      BL       strcat
    265                       break;
   \   00000162   0xF004 0xBC88      B.W      ??RoadBrd_ParseString_26
    266          //**************************************************************************************************
    267                      case '2':
    268                        // Rd_Sound FFT Measurements 16-31. 
    269                        Status = RoadBrdSnd_DumpBin16( &RSFFTBins );
   \                     ??RoadBrd_ParseString_7: (+1)
   \   00000166   0xA891             ADD      R0,SP,#+580
   \   00000168   0x.... 0x....      BL       RoadBrdSnd_DumpBin16
   \   0000016C   0x0006             MOVS     R6,R0
    270                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 16-31.\r\n");
   \   0000016E   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_25+0x18
   \   00000172   0xA80B             ADD      R0,SP,#+44
   \   00000174   0x.... 0x....      BL       strcpy
    271          #ifdef NUCLEO
    272                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    273          #else
    274                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000178   0xA90B             ADD      R1,SP,#+44
   \   0000017A   0x2000             MOVS     R0,#+0
   \   0000017C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000180   0x0006             MOVS     R6,R0
    275          #endif
    276                        if (Status != HAL_OK)
   \   00000182   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000184   0x2E00             CMP      R6,#+0
   \   00000186   0xD003             BEQ.N    ??RoadBrd_ParseString_30
    277                          return Status;
   \   00000188   0x0030             MOVS     R0,R6
   \   0000018A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000018C   0xF004 0xBCF2      B.W      ??RoadBrd_ParseString_4
    278                        // Is this a BLE Operation?
    279                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_30: (+1)
   \   00000190   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000192   0x2D00             CMP      R5,#+0
   \   00000194   0xD00B             BEQ.N    ??RoadBrd_ParseString_31
    280                        {
    281                          // Yes...Build and Send BLE Response NOW.
    282                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT16-31:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000196   0xAA91             ADD      R2,SP,#+580
   \   00000198   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_32
   \   0000019C   0xA80B             ADD      R0,SP,#+44
   \   0000019E   0x.... 0x....      BL       sprintf
    283                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000001A2   0xA80B             ADD      R0,SP,#+44
   \   000001A4   0x.... 0x....      BL       strlen
   \   000001A8   0xA90B             ADD      R1,SP,#+44
   \   000001AA   0x.... 0x....      BL       BGM111_Transmit
    284                        }
    285                        // NOW, Build Data String..
    286                        sprintf( (char *)tempBffr2, "     FFT Measurements 16-31: " );
   \                     ??RoadBrd_ParseString_31: (+1)
   \   000001AE   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_32+0x4
   \   000001B2   0xA80B             ADD      R0,SP,#+44
   \   000001B4   0x.... 0x....      BL       sprintf
    287                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   000001B8   0xA991             ADD      R1,SP,#+580
   \   000001BA   0xA80B             ADD      R0,SP,#+44
   \   000001BC   0x.... 0x....      BL       strcat
    288                        strcat( (char *)tempBffr2, "\r\n" );
   \   000001C0   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001C2   0xA80B             ADD      R0,SP,#+44
   \   000001C4   0x.... 0x....      BL       strcat
    289                        break;
   \   000001C8   0xF004 0xBC55      B.W      ??RoadBrd_ParseString_26
    290          //**************************************************************************************************
    291                      case '3':
    292                        // Rd_Sound FFT Measurements 32-47. 
    293                        Status = RoadBrdSnd_DumpBin32( &RSFFTBins );
   \                     ??RoadBrd_ParseString_8: (+1)
   \   000001CC   0xA891             ADD      R0,SP,#+580
   \   000001CE   0x.... 0x....      BL       RoadBrdSnd_DumpBin32
   \   000001D2   0x0006             MOVS     R6,R0
    294                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 32-47.\r\n");
   \   000001D4   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_32+0x8
   \   000001D8   0xA80B             ADD      R0,SP,#+44
   \   000001DA   0x.... 0x....      BL       strcpy
    295          #ifdef NUCLEO
    296                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    297          #else
    298                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000001DE   0xA90B             ADD      R1,SP,#+44
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000001E6   0x0006             MOVS     R6,R0
    299          #endif
    300                        if (Status != HAL_OK)
   \   000001E8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001EA   0x2E00             CMP      R6,#+0
   \   000001EC   0xD003             BEQ.N    ??RoadBrd_ParseString_33
    301                          return Status;
   \   000001EE   0x0030             MOVS     R0,R6
   \   000001F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001F2   0xF004 0xBCBF      B.W      ??RoadBrd_ParseString_4
    302                        // Is this a BLE Operation?
    303                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_33: (+1)
   \   000001F6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F8   0x2D00             CMP      R5,#+0
   \   000001FA   0xD00B             BEQ.N    ??RoadBrd_ParseString_34
    304                        {
    305                          // Yes...Build and Send BLE Response NOW.
    306                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT32-47:%s</STATUS>", RSFFTBins.dumpStr );
   \   000001FC   0xAA91             ADD      R2,SP,#+580
   \   000001FE   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_35
   \   00000202   0xA80B             ADD      R0,SP,#+44
   \   00000204   0x.... 0x....      BL       sprintf
    307                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000208   0xA80B             ADD      R0,SP,#+44
   \   0000020A   0x.... 0x....      BL       strlen
   \   0000020E   0xA90B             ADD      R1,SP,#+44
   \   00000210   0x.... 0x....      BL       BGM111_Transmit
    308                        }
    309                        // NOW, Build Data String..
    310                        sprintf( (char *)tempBffr2, "     FFT Measurements 32-47: " );
   \                     ??RoadBrd_ParseString_34: (+1)
   \   00000214   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_35+0x4
   \   00000218   0xA80B             ADD      R0,SP,#+44
   \   0000021A   0x.... 0x....      BL       sprintf
    311                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000021E   0xA991             ADD      R1,SP,#+580
   \   00000220   0xA80B             ADD      R0,SP,#+44
   \   00000222   0x.... 0x....      BL       strcat
    312                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000226   0xA1A7             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000228   0xA80B             ADD      R0,SP,#+44
   \   0000022A   0x.... 0x....      BL       strcat
    313                        break;
   \   0000022E   0xF004 0xBC22      B.W      ??RoadBrd_ParseString_26
    314          //**************************************************************************************************
    315                      case '4':
    316                        // Rd_Sound FFT Measurements 48-63. 
    317                        Status = RoadBrdSnd_DumpBin48( &RSFFTBins );
   \                     ??RoadBrd_ParseString_9: (+1)
   \   00000232   0xA891             ADD      R0,SP,#+580
   \   00000234   0x.... 0x....      BL       RoadBrdSnd_DumpBin48
   \   00000238   0x0006             MOVS     R6,R0
    318                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 48-63.\r\n");
   \   0000023A   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_35+0x8
   \   0000023E   0xA80B             ADD      R0,SP,#+44
   \   00000240   0x.... 0x....      BL       strcpy
    319          #ifdef NUCLEO
    320                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    321          #else
    322                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000244   0xA90B             ADD      R1,SP,#+44
   \   00000246   0x2000             MOVS     R0,#+0
   \   00000248   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000024C   0x0006             MOVS     R6,R0
    323          #endif
    324                        if (Status != HAL_OK)
   \   0000024E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000250   0x2E00             CMP      R6,#+0
   \   00000252   0xD003             BEQ.N    ??RoadBrd_ParseString_36
    325                          return Status;
   \   00000254   0x0030             MOVS     R0,R6
   \   00000256   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000258   0xF004 0xBC8C      B.W      ??RoadBrd_ParseString_4
    326                        // Is this a BLE Operation?
    327                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_36: (+1)
   \   0000025C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000025E   0x2D00             CMP      R5,#+0
   \   00000260   0xD00B             BEQ.N    ??RoadBrd_ParseString_37
    328                        {
    329                          // Yes...Build and Send BLE Response NOW.
    330                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT48-63:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000262   0xAA91             ADD      R2,SP,#+580
   \   00000264   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_35+0xC
   \   00000268   0xA80B             ADD      R0,SP,#+44
   \   0000026A   0x.... 0x....      BL       sprintf
    331                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000026E   0xA80B             ADD      R0,SP,#+44
   \   00000270   0x.... 0x....      BL       strlen
   \   00000274   0xA90B             ADD      R1,SP,#+44
   \   00000276   0x.... 0x....      BL       BGM111_Transmit
    332                        }
    333                        // NOW, Build Data String..
    334                        sprintf( (char *)tempBffr2, "     FFT Measurements 48-63: " );
   \                     ??RoadBrd_ParseString_37: (+1)
   \   0000027A   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_35+0x10
   \   0000027E   0xA80B             ADD      R0,SP,#+44
   \   00000280   0x.... 0x....      BL       sprintf
    335                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000284   0xA991             ADD      R1,SP,#+580
   \   00000286   0xA80B             ADD      R0,SP,#+44
   \   00000288   0x.... 0x....      BL       strcat
    336                        strcat( (char *)tempBffr2, "\r\n" );
   \   0000028C   0xA18D             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000028E   0xA80B             ADD      R0,SP,#+44
   \   00000290   0x.... 0x....      BL       strcat
    337                       break;
   \   00000294   0xF004 0xBBEF      B.W      ??RoadBrd_ParseString_26
    338          //**************************************************************************************************
    339                      case '5':
    340                        // dump results of save Buffer. BufferPntr
    341                        BufferPntr = RoadBrdSnd_getSaveBffr();
   \                     ??RoadBrd_ParseString_10: (+1)
   \   00000298   0x.... 0x....      BL       RoadBrdSnd_getSaveBffr
   \   0000029C   0x9048             STR      R0,[SP, #+288]
    342                        strcpy( (char *)tempBffr2, "Road Sound: Results of save Buffer.\r\n");
   \   0000029E   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_35+0x14
   \   000002A2   0xA80B             ADD      R0,SP,#+44
   \   000002A4   0x.... 0x....      BL       strcpy
    343                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \   000002A8   0xA891             ADD      R0,SP,#+580
   \   000002AA   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   000002AE   0x0006             MOVS     R6,R0
    344          #ifdef NUCLEO
    345                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    346          #else
    347                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000002B0   0xA90B             ADD      R1,SP,#+44
   \   000002B2   0x2000             MOVS     R0,#+0
   \   000002B4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000002B8   0x0006             MOVS     R6,R0
    348          #endif
    349                        if (Status != HAL_OK)
   \   000002BA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002BC   0x2E00             CMP      R6,#+0
   \   000002BE   0xD003             BEQ.N    ??RoadBrd_ParseString_38
    350                          return Status;
   \   000002C0   0x0030             MOVS     R0,R6
   \   000002C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002C4   0xF004 0xBC56      B.W      ??RoadBrd_ParseString_4
    351                        // Is this a BLE Operation?
    352                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_38: (+1)
   \   000002C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002CA   0x2D00             CMP      R5,#+0
   \   000002CC   0xD00A             BEQ.N    ??RoadBrd_ParseString_39
    353                        {
    354                          // Yes...Build and Send BLE Response NOW.
    355                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTBFFR_DUMP:");
   \   000002CE   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_40
   \   000002D2   0xA80B             ADD      R0,SP,#+44
   \   000002D4   0x.... 0x....      BL       strcpy
    356                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000002D8   0xA80B             ADD      R0,SP,#+44
   \   000002DA   0x.... 0x....      BL       strlen
   \   000002DE   0xA90B             ADD      R1,SP,#+44
   \   000002E0   0x.... 0x....      BL       BGM111_Transmit
    357                        }
    358                        // NOW, Build Data String..
    359                        y=0;
   \                     ??RoadBrd_ParseString_39: (+1)
   \   000002E4   0x2000             MOVS     R0,#+0
   \   000002E6   0x4680             MOV      R8,R0
    360                        sprintf( (char *)tempBffr2, "" );
   \   000002E8   0xA1D9             ADR.N    R1,??RoadBrd_ParseString_41  ;; ""
   \   000002EA   0xA80B             ADD      R0,SP,#+44
   \   000002EC   0x.... 0x....      BL       sprintf
    361                        for (x=0; x<FFT_BUFFER_SIZE; x++)
   \   000002F0   0x2000             MOVS     R0,#+0
   \   000002F2   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_42: (+1)
   \   000002F4   0x2F80             CMP      R7,#+128
   \   000002F6   0xDA30             BGE.N    ??RoadBrd_ParseString_43
    362                        {
    363          //                sprintf( (char *)tempBffr3, "%02x ", BufferPntr[x]);
    364                          sprintf( (char *)tempBffr3, "%04d ", BufferPntr[x]);
   \   000002F8   0x9848             LDR      R0,[SP, #+288]
   \   000002FA   0x57C2             LDRSB    R2,[R0, R7]
   \   000002FC   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_40+0x4
   \   00000300   0xA82B             ADD      R0,SP,#+172
   \   00000302   0x.... 0x....      BL       sprintf
    365                          strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000306   0xA92B             ADD      R1,SP,#+172
   \   00000308   0xA80B             ADD      R0,SP,#+44
   \   0000030A   0x.... 0x....      BL       strcat
    366                          y++;
   \   0000030E   0xF118 0x0801      ADDS     R8,R8,#+1
    367                          if (y>=16)
   \   00000312   0xF1B8 0x0F10      CMP      R8,#+16
   \   00000316   0xDB1E             BLT.N    ??RoadBrd_ParseString_44
    368                          {
    369                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000318   0xA16A             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000031A   0xA80B             ADD      R0,SP,#+44
   \   0000031C   0x.... 0x....      BL       strcat
    370                            y=0;
   \   00000320   0x2000             MOVS     R0,#+0
   \   00000322   0x4680             MOV      R8,R0
    371           #ifdef NUCLEO
    372                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    373          #else
    374                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000324   0xA90B             ADD      R1,SP,#+44
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000032C   0x0006             MOVS     R6,R0
    375          #endif
    376                            if (Status != HAL_OK)
   \   0000032E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000330   0x2E00             CMP      R6,#+0
   \   00000332   0xD003             BEQ.N    ??RoadBrd_ParseString_45
    377                              return Status;
   \   00000334   0x0030             MOVS     R0,R6
   \   00000336   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000338   0xF004 0xBC1C      B.W      ??RoadBrd_ParseString_4
    378                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_45: (+1)
   \   0000033C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000033E   0x2D00             CMP      R5,#+0
   \   00000340   0xD005             BEQ.N    ??RoadBrd_ParseString_46
    379                            {
    380                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000342   0xA80B             ADD      R0,SP,#+44
   \   00000344   0x.... 0x....      BL       strlen
   \   00000348   0xA90B             ADD      R1,SP,#+44
   \   0000034A   0x.... 0x....      BL       BGM111_Transmit
    381                            }
    382                            sprintf( (char *)tempBffr2, "" );
   \                     ??RoadBrd_ParseString_46: (+1)
   \   0000034E   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_41  ;; ""
   \   00000350   0xA80B             ADD      R0,SP,#+44
   \   00000352   0x.... 0x....      BL       sprintf
    383                          }
    384                        }
   \                     ??RoadBrd_ParseString_44: (+1)
   \   00000356   0x1C7F             ADDS     R7,R7,#+1
   \   00000358   0xE7CC             B.N      ??RoadBrd_ParseString_42
    385                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_43: (+1)
   \   0000035A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000035C   0x2D00             CMP      R5,#+0
   \   0000035E   0xD00A             BEQ.N    ??RoadBrd_ParseString_47
    386                        {
    387                          strcpy( (char *)tempBffr2, "</STATUS>");
   \   00000360   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_48
   \   00000364   0xA80B             ADD      R0,SP,#+44
   \   00000366   0x.... 0x....      BL       strcpy
    388                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000036A   0xA80B             ADD      R0,SP,#+44
   \   0000036C   0x.... 0x....      BL       strlen
   \   00000370   0xA90B             ADD      R1,SP,#+44
   \   00000372   0x.... 0x....      BL       BGM111_Transmit
    389                        }
    390                        sprintf( (char *)tempBffr2, "     ---COMPLETE---" );
   \                     ??RoadBrd_ParseString_47: (+1)
   \   00000376   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_48+0x4
   \   0000037A   0xA80B             ADD      R0,SP,#+44
   \   0000037C   0x.... 0x....      BL       sprintf
    391                        break;
   \   00000380   0xF004 0xBB79      B.W      ??RoadBrd_ParseString_26
    392          //**************************************************************************************************
    393                      case '6':
    394                        // Clear all buffers. 
    395                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_11: (+1)
   \   00000384   0x2000             MOVS     R0,#+0
   \   00000386   0x0006             MOVS     R6,R0
    396                        RoadBrdSnd_ClrBffrs();
   \   00000388   0x.... 0x....      BL       RoadBrdSnd_ClrBffrs
    397                        // Is this a BLE Operation?
    398                        if ( BLE_Flag )
   \   0000038C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000038E   0x2D00             CMP      R5,#+0
   \   00000390   0xD00A             BEQ.N    ??RoadBrd_ParseString_49
    399                        {
    400                          // Yes...Build and Send BLE Response NOW.
    401                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTCLR</STATUS>");
   \   00000392   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_50
   \   00000396   0xA80B             ADD      R0,SP,#+44
   \   00000398   0x.... 0x....      BL       strcpy
    402                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000039C   0xA80B             ADD      R0,SP,#+44
   \   0000039E   0x.... 0x....      BL       strlen
   \   000003A2   0xA90B             ADD      R1,SP,#+44
   \   000003A4   0x.... 0x....      BL       BGM111_Transmit
    403                        }
    404                        strcpy( (char *)tempBffr2, "Road Sound: All buffers cleared.\r\n");;
   \                     ??RoadBrd_ParseString_49: (+1)
   \   000003A8   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_50+0x4
   \   000003AC   0xA80B             ADD      R0,SP,#+44
   \   000003AE   0x.... 0x....      BL       strcpy
    405                        break;
   \   000003B2   0xF004 0xBB60      B.W      ??RoadBrd_ParseString_26
    406          //**************************************************************************************************
    407                      case 'A':
    408                        // Barometer. 
    409                        if (Size == 1)
   \                     ??RoadBrd_ParseString_12: (+1)
   \   000003B6   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000003BA   0x2801             CMP      R0,#+1
   \   000003BC   0xF000 0x8157      BEQ.W    ??RoadBrd_ParseString_51
    410                        {
    411          //------------------ A Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    412                        }
    413                        else
    414                        {
    415                          switch( tempBffr[1] )
   \   000003C0   0x7860             LDRB     R0,[R4, #+1]
   \   000003C2   0x2836             CMP      R0,#+54
   \   000003C4   0xD039             BEQ.N    ??RoadBrd_ParseString_52
   \   000003C6   0x2838             CMP      R0,#+56
   \   000003C8   0xF000 0x80BA      BEQ.W    ??RoadBrd_ParseString_53
   \   000003CC   0x2839             CMP      R0,#+57
   \   000003CE   0xF000 0x8124      BEQ.W    ??RoadBrd_ParseString_54
   \   000003D2   0x2849             CMP      R0,#+73
   \   000003D4   0xF040 0x8146      BNE.W    ??RoadBrd_ParseString_55
    416                          {
    417          //------------------ AI Command...Initialize Barometer Sensor     
    418                            case 'I':
    419                              // Clean out old pressure.
    420          //                    Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
    421                              // Clean out old Temp data.
    422          //                    Status = RoadBrd_Baro_ReadTemp( i2cData );
    423                              //************ Wait 50msec.
    424          //                    RoadBrd_Delay(500);  
    425                   
    426                              Status = RoadBrd_Init_Barometer();
   \                     ??RoadBrd_ParseString_56: (+1)
   \   000003D8   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   000003DC   0x0006             MOVS     R6,R0
    427                              // Is this a BLE Operation?
    428                              if ( BLE_Flag )
   \   000003DE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003E0   0x2D00             CMP      R5,#+0
   \   000003E2   0xD00A             BEQ.N    ??RoadBrd_ParseString_57
    429                              {
    430                                // Yes...Build and Send BLE Response NOW.
    431                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000003E4   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   000003E8   0xA80B             ADD      R0,SP,#+44
   \   000003EA   0x.... 0x....      BL       strcpy
    432                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000003EE   0xA80B             ADD      R0,SP,#+44
   \   000003F0   0x.... 0x....      BL       strlen
   \   000003F4   0xA90B             ADD      R1,SP,#+44
   \   000003F6   0x.... 0x....      BL       BGM111_Transmit
    433                              }
    434                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_57: (+1)
   \   000003FA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003FC   0x2E00             CMP      R6,#+0
   \   000003FE   0xD105             BNE.N    ??RoadBrd_ParseString_58
    435                              {
    436                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor Passed.\r\n");;
   \   00000400   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_50+0xC
   \   00000404   0xA80B             ADD      R0,SP,#+44
   \   00000406   0x.... 0x....      BL       strcpy
   \   0000040A   0xE015             B.N      ??RoadBrd_ParseString_59
    437                              }
    438                              else
    439                              {
    440                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor FAILED.\r\n");
   \                     ??RoadBrd_ParseString_58: (+1)
   \   0000040C   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_50+0x10
   \   00000410   0xA80B             ADD      R0,SP,#+44
   \   00000412   0x.... 0x....      BL       strcpy
    441                                  Save_Status = Status;
   \   00000416   0xF88D 0x6029      STRB     R6,[SP, #+41]
    442          #ifdef NUCLEO
    443                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    444          #else
    445                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000041A   0xA90B             ADD      R1,SP,#+44
   \   0000041C   0x2000             MOVS     R0,#+0
   \   0000041E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000422   0x0006             MOVS     R6,R0
    446          #endif
    447                                  if (Status != HAL_OK)
   \   00000424   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000426   0x2E00             CMP      R6,#+0
   \   00000428   0xD003             BEQ.N    ??RoadBrd_ParseString_60
    448                                    return Status;
   \   0000042A   0x0030             MOVS     R0,R6
   \   0000042C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000042E   0xF004 0xBBA1      B.W      ??RoadBrd_ParseString_4
    449                                  else
    450                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_60: (+1)
   \   00000432   0xF89D 0x0029      LDRB     R0,[SP, #+41]
   \   00000436   0x0006             MOVS     R6,R0
    451                              }
    452                              break;
   \                     ??RoadBrd_ParseString_59: (+1)
   \   00000438   0xE119             B.N      ??RoadBrd_ParseString_51
    453          //------------------ A0 Command...Enable Barometer     
    454          #if 0                  
    455                          case '0':
    456                              Status = RoadBrd_Enable_Barometer();
    457                              // Is this a BLE Operation?
    458                              if ( BLE_Flag )
    459                              {
    460                                // Yes...Build and Send BLE Response NOW.
    461                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    462                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    463                              }
    464                              if (Status == HAL_OK)
    465                              {
    466                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer Passed.\r\n");;
    467                              }
    468                              else
    469                              {
    470                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer FAILED.\r\n");;
    471                              }
    472                              break;
    473          //------------------ A1 Command...Disable Barometer     
    474                            case '1':
    475                              Status = RoadBrd_Disable_Barometer();
    476                              // Is this a BLE Operation?
    477                              if ( BLE_Flag )
    478                              {
    479                                // Yes...Build and Send BLE Response NOW.
    480                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    481                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    482                              }
    483                              if (Status == HAL_OK)
    484                              {
    485                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer Passed.\r\n");;
    486                              }
    487                              else
    488                              {
    489                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer FAILED.\r\n");;
    490                                  Save_Status = Status;
    491          #ifdef NUCLEO
    492                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    493          #else
    494                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    495          #endif
    496                                  if (Status != HAL_OK)
    497                                    return Status;
    498                                  else
    499                                    Status = Save_Status;
    500                              }
    501                              break;
    502          //------------------ A2 Command...Start the Barometer but do not wait.     
    503                            case '2':
    504                              Status = RoadBrd_StartSample_Barometer();
    505                              // Is this a BLE Operation?
    506                              if ( BLE_Flag )
    507                              {
    508                                // Yes...Build and Send BLE Response NOW.
    509                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    510                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    511                              }
    512                              if (Status == HAL_OK)
    513                              {
    514                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait Passed.\r\n");;
    515                              }
    516                              else
    517                              {
    518                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait FAILED.\r\n");;
    519                                  Save_Status = Status;
    520          #ifdef NUCLEO
    521                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    522          #else
    523                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    524          #endif
    525                                  if (Status != HAL_OK)
    526                                    return Status;
    527                                  else
    528                                    Status = Save_Status;
    529                              }
    530                              break;
    531          //------------------ A3 Command...Start the Barometer and wait for response.    
    532                            case '3':
    533                              Status = RoadBrd_StartSample_BarometerWait();
    534                              // Is this a BLE Operation?
    535                              if ( BLE_Flag )
    536                              {
    537                                // Yes...Build and Send BLE Response NOW.
    538                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    539                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    540                              }
    541                              if (Status == HAL_OK)
    542                              {
    543                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response Passed.\r\n");;
    544                              }
    545                              else
    546                              {
    547                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response FAILED.\r\n");;
    548                                  Save_Status = Status;
    549          #ifdef NUCLEO
    550                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    551          #else
    552                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    553          #endif
    554                                  if (Status != HAL_OK)
    555                                    return Status;
    556                                  else
    557                                    Status = Save_Status;
    558                              }
    559                              break;
    560          //------------------ A4 Command...Return Status    
    561                            case '4':
    562                              // Is this a BLE Operation?
    563                              if ( BLE_Flag )
    564                              {
    565                                // Yes...Build and Send BLE Response NOW.
    566                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    567                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    568                              }
    569                              Status = RoadBrd_Barometer_Status( &PRMeasure );
    570                              if (Status == HAL_OK)
    571                              {
    572                                sprintf( (char *)tempBffr2, "Barometer Sensor Status: %02x / ", PRMeasure.Status );
    573                                strcat( (char *)tempBffr2, (char *)PRMeasure.Raw );
    574                                strcat( (char *)tempBffr2, "\r\n" );
    575                              }
    576                              break;
    577          //------------------ A5 Command...Wait for Pressure to be complete. 
    578                            case '5':
    579                              Status = RoadBrd_WaitForPressure( (uint16_t)BARO_WAITCNT );
    580                              // Is this a BLE Operation?
    581                              if ( BLE_Flag )
    582                              {
    583                                // Yes...Build and Send BLE Response NOW.
    584                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    585                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    586                              }
    587                              if (Status == HAL_OK)
    588                              {
    589                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete Passed.\r\n");;
    590                              }
    591                              else
    592                              {
    593                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete FAILED.\r\n");;
    594                                  Save_Status = Status;
    595          #ifdef NUCLEO
    596                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    597          #else
    598                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    599          #endif
    600                                  if (Status != HAL_OK)
    601                                    return Status;
    602                                  else
    603                                    Status = Save_Status;
    604                              }
    605                              break;
    606          #endif
    607          //------------------ A6 Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    608                            case '6':
    609                              //Status = RoadBrd_Barometer_Status( &PRMeasure );
    610                              Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
   \                     ??RoadBrd_ParseString_52: (+1)
   \   0000043A   0xA8AE             ADD      R0,SP,#+696
   \   0000043C   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure
   \   00000440   0x0006             MOVS     R6,R0
    611                              if (Status == HAL_OK)
   \   00000442   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000444   0x2E00             CMP      R6,#+0
   \   00000446   0xD104             BNE.N    ??RoadBrd_ParseString_61
    612                                Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasureScaled );
   \   00000448   0xA8FF             ADD      R0,SP,#+1020
   \   0000044A   0x3038             ADDS     R0,R0,#+56
   \   0000044C   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   00000450   0x0006             MOVS     R6,R0
    613                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_61: (+1)
   \   00000452   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000454   0x2E00             CMP      R6,#+0
   \   00000456   0xD15C             BNE.N    ??RoadBrd_ParseString_62
    614                              {
    615                                strcpy( (char *)tempBffr2, "A6 Command...Read Pressure Passed.\r\n");;
   \   00000458   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_63
   \   0000045C   0xA80B             ADD      R0,SP,#+44
   \   0000045E   0x.... 0x....      BL       strcpy
    616          #ifdef NUCLEO
    617                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    618          #else
    619                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000462   0xA90B             ADD      R1,SP,#+44
   \   00000464   0x2000             MOVS     R0,#+0
   \   00000466   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000046A   0x0006             MOVS     R6,R0
    620          #endif
    621                                if (Status != HAL_OK)
   \   0000046C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000046E   0x2E00             CMP      R6,#+0
   \   00000470   0xD003             BEQ.N    ??RoadBrd_ParseString_64
    622                                  return Status;
   \   00000472   0x0030             MOVS     R0,R6
   \   00000474   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000476   0xF004 0xBB7D      B.W      ??RoadBrd_ParseString_4
    623                                // NOW, Build Data String..
    624                                sprintf( (char *)tempBffr2, " PRESSURE(PRESS_OUT_H...PRESS_OUT_L...PRESS_OUT_XL)\r\n" );
   \                     ??RoadBrd_ParseString_64: (+1)
   \   0000047A   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_63+0x4
   \   0000047E   0xA80B             ADD      R0,SP,#+44
   \   00000480   0x.... 0x....      BL       sprintf
    625          #ifdef NUCLEO
    626                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    627          #else
    628                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000484   0xA90B             ADD      R1,SP,#+44
   \   00000486   0x2000             MOVS     R0,#+0
   \   00000488   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000048C   0x0006             MOVS     R6,R0
    629          #endif
    630                                if (Status != HAL_OK)
   \   0000048E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000490   0x2E00             CMP      R6,#+0
   \   00000492   0xD003             BEQ.N    ??RoadBrd_ParseString_65
    631                                  return Status;
   \   00000494   0x0030             MOVS     R0,R6
   \   00000496   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000498   0xF004 0xBB6C      B.W      ??RoadBrd_ParseString_4
    632                               
    633                                // Now show Decimal value of items.
    634                                sprintf( (char *)tempBffr2, " PRESSURE: %s/%s\r\n", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \                     ??RoadBrd_ParseString_65: (+1)
   \   0000049C   0xABFF             ADD      R3,SP,#+1020
   \   0000049E   0x3338             ADDS     R3,R3,#+56
   \   000004A0   0xAAAE             ADD      R2,SP,#+696
   \   000004A2   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_63+0x8
   \   000004A6   0xA80B             ADD      R0,SP,#+44
   \   000004A8   0x.... 0x....      BL       sprintf
    635          #ifdef NUCLEO
    636                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    637          #else
    638                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000004AC   0xA90B             ADD      R1,SP,#+44
   \   000004AE   0x2000             MOVS     R0,#+0
   \   000004B0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004B4   0x0006             MOVS     R6,R0
    639          #endif
    640                                if (Status != HAL_OK)
   \   000004B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004B8   0x2E00             CMP      R6,#+0
   \   000004BA   0xD005             BEQ.N    ??RoadBrd_ParseString_66
    641                                  return Status;
   \   000004BC   0x0030             MOVS     R0,R6
   \   000004BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004C0   0xF004 0xBB58      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_29:
   \   000004C4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    642                                // Is this a BLE Operation?
    643                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_66: (+1)
   \   000004C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004CA   0x2D00             CMP      R5,#+0
   \   000004CC   0xD00D             BEQ.N    ??RoadBrd_ParseString_67
    644                                {
    645                                  // Yes...Build and Send BLE Response NOW.
    646                                  sprintf( (char *)tempBffr2, "<STATUS>PRESSURE: %s/%s</STATUS>", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \   000004CE   0xABFF             ADD      R3,SP,#+1020
   \   000004D0   0x3338             ADDS     R3,R3,#+56
   \   000004D2   0xAAAE             ADD      R2,SP,#+696
   \   000004D4   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_63+0x10
   \   000004D8   0xA80B             ADD      R0,SP,#+44
   \   000004DA   0x.... 0x....      BL       sprintf
    647                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000004DE   0xA80B             ADD      R0,SP,#+44
   \   000004E0   0x.... 0x....      BL       strlen
   \   000004E4   0xA90B             ADD      R1,SP,#+44
   \   000004E6   0x.... 0x....      BL       BGM111_Transmit
    648                                }
    649                                // Now show hex value of items.
    650                                sprintf( (char *)tempBffr2, " PRESSURE:  " );
   \                     ??RoadBrd_ParseString_67: (+1)
   \   000004EA   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_63+0x14
   \   000004EE   0xA80B             ADD      R0,SP,#+44
   \   000004F0   0x.... 0x....      BL       sprintf
    651                                strcat( (char *)tempBffr2, (char *)PRPMeasure.Raw );
   \   000004F4   0xA9B1             ADD      R1,SP,#+708
   \   000004F6   0xA80B             ADD      R0,SP,#+44
   \   000004F8   0x.... 0x....      BL       strcat
    652                                sprintf( (char *)tempBffr3, "  -  %08x\r\n", PRPMeasure.RawC);
   \   000004FC   0x9AB4             LDR      R2,[SP, #+720]
   \   000004FE   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_63+0x18
   \   00000502   0xA82B             ADD      R0,SP,#+172
   \   00000504   0x.... 0x....      BL       sprintf
    653                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000508   0xA92B             ADD      R1,SP,#+172
   \   0000050A   0xA80B             ADD      R0,SP,#+44
   \   0000050C   0x.... 0x....      BL       strcat
   \   00000510   0xE015             B.N      ??RoadBrd_ParseString_68
    654                              }
    655                              else
    656                              {
    657                                  strcpy( (char *)tempBffr2, "A6 Command...Read Pressure FAILED.\r\n");;
   \                     ??RoadBrd_ParseString_62: (+1)
   \   00000512   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_63+0x1C
   \   00000516   0xA80B             ADD      R0,SP,#+44
   \   00000518   0x.... 0x....      BL       strcpy
    658                                  Save_Status = Status;
   \   0000051C   0xF88D 0x6029      STRB     R6,[SP, #+41]
    659          #ifdef NUCLEO
    660                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    661          #else
    662                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000520   0xA90B             ADD      R1,SP,#+44
   \   00000522   0x2000             MOVS     R0,#+0
   \   00000524   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000528   0x0006             MOVS     R6,R0
    663          #endif
    664                                  if (Status != HAL_OK)
   \   0000052A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000052C   0x2E00             CMP      R6,#+0
   \   0000052E   0xD003             BEQ.N    ??RoadBrd_ParseString_69
    665                                    return Status;
   \   00000530   0x0030             MOVS     R0,R6
   \   00000532   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000534   0xF004 0xBB1E      B.W      ??RoadBrd_ParseString_4
    666                                  else
    667                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_69: (+1)
   \   00000538   0xF89D 0x0029      LDRB     R0,[SP, #+41]
   \   0000053C   0x0006             MOVS     R6,R0
    668                              }
    669                              break;
   \                     ??RoadBrd_ParseString_68: (+1)
   \   0000053E   0xE096             B.N      ??RoadBrd_ParseString_51
    670          
    671          //------------------ A8 Command...Read Temperature....TEMP_OUT_L...TEMP_OUT_H    
    672                            case '8':
    673                              Status = RoadBrd_Baro_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_53: (+1)
   \   00000540   0xA83C             ADD      R0,SP,#+240
   \   00000542   0x.... 0x....      BL       RoadBrd_Baro_ReadTemp
   \   00000546   0x0006             MOVS     R6,R0
    674                              if (Status == HAL_OK)
   \   00000548   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000054A   0x2E00             CMP      R6,#+0
   \   0000054C   0xD127             BNE.N    ??RoadBrd_ParseString_70
    675                              {
    676                                // Send string to UART..
    677                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");
   \   0000054E   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_71
   \   00000552   0xA80B             ADD      R0,SP,#+44
   \   00000554   0x.... 0x....      BL       strcpy
    678          #ifdef NUCLEO
    679                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    680          #else
    681                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000558   0xA90B             ADD      R1,SP,#+44
   \   0000055A   0x2000             MOVS     R0,#+0
   \   0000055C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000560   0x0006             MOVS     R6,R0
    682          #endif
    683                                if (Status != HAL_OK)
   \   00000562   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000564   0x2E00             CMP      R6,#+0
   \   00000566   0xD003             BEQ.N    ??RoadBrd_ParseString_72
    684                                  return Status;
   \   00000568   0x0030             MOVS     R0,R6
   \   0000056A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000056C   0xF004 0xBB02      B.W      ??RoadBrd_ParseString_4
    685                                // NOW, Build Data String..
    686                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_72: (+1)
   \   00000570   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_71+0x4
   \   00000574   0xA80B             ADD      R0,SP,#+44
   \   00000576   0x.... 0x....      BL       sprintf
    687                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   0000057A   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   0000057E   0xA80B             ADD      R0,SP,#+44
   \   00000580   0x.... 0x....      BL       strcat
    688                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000584   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000586   0xA80B             ADD      R0,SP,#+44
   \   00000588   0x.... 0x....      BL       strcat
    689                              }
    690                              else
    691                                break;
    692          #ifdef NUCLEO
    693                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    694          #else
    695                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000058C   0xA90B             ADD      R1,SP,#+44
   \   0000058E   0x2000             MOVS     R0,#+0
   \   00000590   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000594   0x0006             MOVS     R6,R0
    696          #endif
    697                              if (Status != HAL_OK)
   \   00000596   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000598   0x2E00             CMP      R6,#+0
   \   0000059A   0xD101             BNE.N    ??RoadBrd_ParseString_74
   \   0000059C   0xE004             B.N      ??RoadBrd_ParseString_75
   \                     ??RoadBrd_ParseString_70: (+1)
   \   0000059E   0xE066             B.N      ??RoadBrd_ParseString_51
    698                                return Status;
   \                     ??RoadBrd_ParseString_74: (+1)
   \   000005A0   0x0030             MOVS     R0,R6
   \   000005A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005A4   0xF004 0xBAE6      B.W      ??RoadBrd_ParseString_4
    699                              // NOW, Build Data String..
    700                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_75: (+1)
   \   000005A8   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000005AC   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_71+0x8
   \   000005B0   0xA80B             ADD      R0,SP,#+44
   \   000005B2   0x.... 0x....      BL       sprintf
    701          #ifdef NUCLEO
    702                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    703          #else
    704                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000005B6   0xA90B             ADD      R1,SP,#+44
   \   000005B8   0x2000             MOVS     R0,#+0
   \   000005BA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000005BE   0x0006             MOVS     R6,R0
    705          #endif
    706                              if (Status != HAL_OK)
   \   000005C0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005C2   0x2E00             CMP      R6,#+0
   \   000005C4   0xD003             BEQ.N    ??RoadBrd_ParseString_76
    707                                return Status;
   \   000005C6   0x0030             MOVS     R0,R6
   \   000005C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005CA   0xF004 0xBAD3      B.W      ??RoadBrd_ParseString_4
    708                              // Is this a BLE Operation?
    709                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_76: (+1)
   \   000005CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005D0   0x2D00             CMP      R5,#+0
   \   000005D2   0xD00A             BEQ.N    ??RoadBrd_ParseString_77
    710                              {
    711                                // Yes...Build and Send BLE Response NOW.
    712                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000005D4   0xF8DF 0x1BE4      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   000005D8   0xA80B             ADD      R0,SP,#+44
   \   000005DA   0x.... 0x....      BL       strcpy
    713                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000005DE   0xA80B             ADD      R0,SP,#+44
   \   000005E0   0x.... 0x....      BL       strlen
   \   000005E4   0xA90B             ADD      R1,SP,#+44
   \   000005E6   0x.... 0x....      BL       BGM111_Transmit
    714                              }
    715                              // Now calculate Celcius and Farenheit Temp.
    716                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_77: (+1)
   \   000005EA   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_78
   \   000005EE   0xA80B             ADD      R0,SP,#+44
   \   000005F0   0x.... 0x....      BL       sprintf
    717                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000005F4   0xA93C             ADD      R1,SP,#+240
   \   000005F6   0xA80B             ADD      R0,SP,#+44
   \   000005F8   0x.... 0x....      BL       strcat
    718                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000005FC   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_78+0x4
   \   00000600   0xA80B             ADD      R0,SP,#+44
   \   00000602   0x.... 0x....      BL       strcat
    719                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   00000606   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   0000060A   0xA80B             ADD      R0,SP,#+44
   \   0000060C   0x.... 0x....      BL       strcat
    720                              strcat( (char *)tempBffr2, "\r\n" );
   \   00000610   0xA1B8             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000612   0xA80B             ADD      R0,SP,#+44
   \   00000614   0x.... 0x....      BL       strcat
    721          /*                    if (Status == HAL_OK)
    722                              {
    723                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");;
    724          #ifdef NUCLEO
    725                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    726          #else
    727                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    728          #endif
    729                                if (Status != HAL_OK)
    730                                  return Status;
    731                                // NOW, Build Data String..
    732                                sprintf( (char *)tempBffr2, " Temperature(TEMP_OUT_L...TEMP_OUT_H)\r\n" );
    733          #ifdef NUCLEO
    734                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    735          #else
    736                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    737          #endif
    738                                if (Status != HAL_OK)
    739                                  return Status;
    740                                sprintf( (char *)tempBffr2, " Temperature:  %02x   %02x\r\n", i2cData[0], i2cData[1] );
    741                              }
    742                              else
    743                              {
    744                                  strcpy( (char *)tempBffr2, "A8 Command...Read Temperature FAILED.\r\n");;
    745                                  Save_Status = Status;
    746          #ifdef NUCLEO
    747                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    748          #else
    749                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    750          #endif
    751                                  if (Status != HAL_OK)
    752                                    return Status;
    753                                  else
    754                                    Status = Save_Status;
    755                              }*/
    756                              break;
   \   00000618   0xE029             B.N      ??RoadBrd_ParseString_51
    757          //------------------ A9 Command...Test and Verify WHO_AM_I     
    758                            case '9':
    759                              Status = RoadBrd_TestandRead_Barometer();
   \                     ??RoadBrd_ParseString_54: (+1)
   \   0000061A   0x.... 0x....      BL       RoadBrd_TestandRead_Barometer
   \   0000061E   0x0006             MOVS     R6,R0
    760                              // Is this a BLE Operation?
    761                              if ( BLE_Flag )
   \   00000620   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000622   0x2D00             CMP      R5,#+0
   \   00000624   0xD00A             BEQ.N    ??RoadBrd_ParseString_79
    762                              {
    763                                // Yes...Build and Send BLE Response NOW.
    764                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000626   0xF8DF 0x1B94      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   0000062A   0xA80B             ADD      R0,SP,#+44
   \   0000062C   0x.... 0x....      BL       strcpy
    765                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000630   0xA80B             ADD      R0,SP,#+44
   \   00000632   0x.... 0x....      BL       strlen
   \   00000636   0xA90B             ADD      R1,SP,#+44
   \   00000638   0x.... 0x....      BL       BGM111_Transmit
    766                              }
    767                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_79: (+1)
   \   0000063C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000063E   0x2E00             CMP      R6,#+0
   \   00000640   0xD108             BNE.N    ??RoadBrd_ParseString_80
    768                              {
    769                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I Passed.\r\n");
   \   00000642   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_81
   \   00000646   0xA80B             ADD      R0,SP,#+44
   \   00000648   0x.... 0x....      BL       strcpy
   \   0000064C   0xE009             B.N      ??RoadBrd_ParseString_82
   \   0000064E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_41:
   \   00000650   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
    770                              }
    771                              else
    772                              {
    773                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I FAILED.\r\n");
   \                     ??RoadBrd_ParseString_80: (+1)
   \   00000654   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_81+0x4
   \   00000658   0xA80B             ADD      R0,SP,#+44
   \   0000065A   0x.... 0x....      BL       strcpy
    774                                  Status = HAL_OK;
   \   0000065E   0x2000             MOVS     R0,#+0
   \   00000660   0x0006             MOVS     R6,R0
    775                              }
    776                              break;
   \                     ??RoadBrd_ParseString_82: (+1)
   \   00000662   0xE004             B.N      ??RoadBrd_ParseString_51
    777                            default:
    778                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_55: (+1)
   \   00000664   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_81+0x8
   \   00000668   0xA80B             ADD      R0,SP,#+44
   \   0000066A   0x.... 0x....      BL       strcpy
    779                              break;
    780                          } //EndSwitch
    781                        } //EndElse (Size == 1)
    782                        break;
   \                     ??RoadBrd_ParseString_51: (+1)
   \   0000066E   0xF004 0xBA02      B.W      ??RoadBrd_ParseString_26
    783          //**************************************************************************************************
    784                      case 'B':
    785                        // Read Cool Eye. 
    786          //++++++++++++++++++++++++++++++++++++++++++  Cool Eye/Grid Eye Monitor Commands.
    787                        if (Size == 1)
   \                     ??RoadBrd_ParseString_13: (+1)
   \   00000672   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00000676   0x2801             CMP      R0,#+1
   \   00000678   0xF040 0x8151      BNE.W    ??RoadBrd_ParseString_83
    788                        {
    789          //------------------ B Command: Read Cool Eye/Grid Eye Values      
    790                          // Read Cool Eye/Grid Eye Values.....
    791                          if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   0000067C   0x2005             MOVS     R0,#+5
   \   0000067E   0x.... 0x....      BL       Get_DriverStates
   \   00000682   0x2800             CMP      R0,#+0
   \   00000684   0xD00B             BEQ.N    ??RoadBrd_ParseString_84
    792                          {
    793                            Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000686   0xA85B             ADD      R0,SP,#+364
   \   00000688   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   0000068C   0x0006             MOVS     R6,R0
    794                            if (Status == HAL_OK)
   \   0000068E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000690   0x2E00             CMP      R6,#+0
   \   00000692   0xD117             BNE.N    ??RoadBrd_ParseString_85
    795                              Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000694   0xA8D7             ADD      R0,SP,#+860
   \   00000696   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000069A   0x0006             MOVS     R6,R0
   \   0000069C   0xE012             B.N      ??RoadBrd_ParseString_85
    796                          }
    797                          else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_84: (+1)
   \   0000069E   0x2006             MOVS     R0,#+6
   \   000006A0   0x.... 0x....      BL       Get_DriverStates
   \   000006A4   0x2800             CMP      R0,#+0
   \   000006A6   0xD00B             BEQ.N    ??RoadBrd_ParseString_86
    798                          {
    799                            Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   000006A8   0xA85B             ADD      R0,SP,#+364
   \   000006AA   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   000006AE   0x0006             MOVS     R6,R0
    800                            if (Status == HAL_OK)
   \   000006B0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006B2   0x2E00             CMP      R6,#+0
   \   000006B4   0xD106             BNE.N    ??RoadBrd_ParseString_85
    801                              Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   000006B6   0xA8D7             ADD      R0,SP,#+860
   \   000006B8   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000006BC   0x0006             MOVS     R6,R0
   \   000006BE   0xE001             B.N      ??RoadBrd_ParseString_85
    802                          }
    803                          else
    804                            Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_86: (+1)
   \   000006C0   0x2001             MOVS     R0,#+1
   \   000006C2   0x0006             MOVS     R6,R0
    805                          
    806                          // Is this a BLE Operation?
    807                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_85: (+1)
   \   000006C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006C6   0x2D00             CMP      R5,#+0
   \   000006C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_87
    808                          {
    809                            // Yes...Build and Send BLE Response NOW.
    810                            strcpy( (char *)tempBffr2, "<STATUS>ST_THERMAL_DUMP:");
   \   000006CA   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_88
   \   000006CE   0xA80B             ADD      R0,SP,#+44
   \   000006D0   0x.... 0x....      BL       strcpy
    811                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000006D4   0xA80B             ADD      R0,SP,#+44
   \   000006D6   0x.... 0x....      BL       strlen
   \   000006DA   0xA90B             ADD      R1,SP,#+44
   \   000006DC   0x.... 0x....      BL       BGM111_Transmit
    812                          }
    813                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_87: (+1)
   \   000006E0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006E2   0x2E00             CMP      R6,#+0
   \   000006E4   0xF040 0x8108      BNE.W    ??RoadBrd_ParseString_89
    814                          {
    815                            // Send string to UART..
    816                            strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000006E8   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   000006EC   0xA80B             ADD      R0,SP,#+44
   \   000006EE   0x.... 0x....      BL       strcpy
    817          #ifdef NUCLEO
    818                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    819          #else
    820                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000006F2   0xA90B             ADD      R1,SP,#+44
   \   000006F4   0x2000             MOVS     R0,#+0
   \   000006F6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000006FA   0x0006             MOVS     R6,R0
    821          #endif
    822                            if (Status != HAL_OK)
   \   000006FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006FE   0x2E00             CMP      R6,#+0
   \   00000700   0xD003             BEQ.N    ??RoadBrd_ParseString_90
    823                              return Status;
   \   00000702   0x0030             MOVS     R0,R6
   \   00000704   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000706   0xF004 0xBA35      B.W      ??RoadBrd_ParseString_4
    824                            // NOW, Build Data String..
    825                            for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_90: (+1)
   \   0000070A   0x2000             MOVS     R0,#+0
   \   0000070C   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_91: (+1)
   \   0000070E   0x2F09             CMP      R7,#+9
   \   00000710   0xF280 0x80DE      BGE.W    ??RoadBrd_ParseString_92
    826                            {
    827                              // Build String
    828                              switch(x)
   \   00000714   0x2F00             CMP      R7,#+0
   \   00000716   0xD00F             BEQ.N    ??RoadBrd_ParseString_93
   \   00000718   0x2F02             CMP      R7,#+2
   \   0000071A   0xD035             BEQ.N    ??RoadBrd_ParseString_94
   \   0000071C   0xD320             BCC.N    ??RoadBrd_ParseString_95
   \   0000071E   0x2F04             CMP      R7,#+4
   \   00000720   0xD05A             BEQ.N    ??RoadBrd_ParseString_96
   \   00000722   0xD345             BCC.N    ??RoadBrd_ParseString_97
   \   00000724   0x2F06             CMP      R7,#+6
   \   00000726   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_98
   \   0000072A   0xD369             BCC.N    ??RoadBrd_ParseString_99
   \   0000072C   0x2F08             CMP      R7,#+8
   \   0000072E   0xF000 0x80A4      BEQ.W    ??RoadBrd_ParseString_100
   \   00000732   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_101
   \   00000736   0xE0B4             B.N      ??RoadBrd_ParseString_102
    829                              {
    830                                case 0: //Thermistor Values
    831                                  sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    832                                                                                                         GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    833                                                                                                         GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    834                                                                                                         GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_93: (+1)
   \   00000738   0xF8BD 0x0182      LDRH     R0,[SP, #+386]
   \   0000073C   0x9003             STR      R0,[SP, #+12]
   \   0000073E   0xA8D8             ADD      R0,SP,#+864
   \   00000740   0x1CC0             ADDS     R0,R0,#+3
   \   00000742   0x9002             STR      R0,[SP, #+8]
   \   00000744   0xA85C             ADD      R0,SP,#+368
   \   00000746   0x1CC0             ADDS     R0,R0,#+3
   \   00000748   0x9001             STR      R0,[SP, #+4]
   \   0000074A   0xA8D7             ADD      R0,SP,#+860
   \   0000074C   0x9000             STR      R0,[SP, #+0]
   \   0000074E   0xAB5B             ADD      R3,SP,#+364
   \   00000750   0xF50D 0x72BD      ADD      R2,SP,#+378
   \   00000754   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000758   0xA80B             ADD      R0,SP,#+44
   \   0000075A   0x.... 0x....      BL       sprintf
    835          //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    836          //                                                                                               GridMeasure.Thermistor.TempC,
    837          //                                                                                               GridMeasure.Thermistor.TempF,
    838          //                                                                                               GridMeasure.Thermistor.RawC );
    839                                  break;
   \   0000075E   0xE0A0             B.N      ??RoadBrd_ParseString_102
    840                                case 1: //GridEye1 Values
    841                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
    842                                                                                                         GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
    843                                                                                                         GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
    844                                                                                                         GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_95: (+1)
   \   00000760   0xF8BD 0x019A      LDRH     R0,[SP, #+410]
   \   00000764   0x9003             STR      R0,[SP, #+12]
   \   00000766   0xA8DE             ADD      R0,SP,#+888
   \   00000768   0x1CC0             ADDS     R0,R0,#+3
   \   0000076A   0x9002             STR      R0,[SP, #+8]
   \   0000076C   0xA862             ADD      R0,SP,#+392
   \   0000076E   0x1CC0             ADDS     R0,R0,#+3
   \   00000770   0x9001             STR      R0,[SP, #+4]
   \   00000772   0xA8DD             ADD      R0,SP,#+884
   \   00000774   0x9000             STR      R0,[SP, #+0]
   \   00000776   0xAB61             ADD      R3,SP,#+388
   \   00000778   0xF50D 0x72C9      ADD      R2,SP,#+402
   \   0000077C   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000780   0xA80B             ADD      R0,SP,#+44
   \   00000782   0x.... 0x....      BL       sprintf
    845          //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
    846          //                                                                                               GridMeasure.GridEye1.TempC,
    847          //                                                                                               GridMeasure.GridEye1.TempF,
    848          //                                                                                               GridMeasure.GridEye1.RawC );
    849                                  break;
   \   00000786   0xE08C             B.N      ??RoadBrd_ParseString_102
    850                                case 2: //GridEye2 Values
    851                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
    852                                                                                                         GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
    853                                                                                                         GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
    854                                                                                                         GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_94: (+1)
   \   00000788   0xF8BD 0x01B2      LDRH     R0,[SP, #+434]
   \   0000078C   0x9003             STR      R0,[SP, #+12]
   \   0000078E   0xA8E4             ADD      R0,SP,#+912
   \   00000790   0x1CC0             ADDS     R0,R0,#+3
   \   00000792   0x9002             STR      R0,[SP, #+8]
   \   00000794   0xA868             ADD      R0,SP,#+416
   \   00000796   0x1CC0             ADDS     R0,R0,#+3
   \   00000798   0x9001             STR      R0,[SP, #+4]
   \   0000079A   0xA8E3             ADD      R0,SP,#+908
   \   0000079C   0x9000             STR      R0,[SP, #+0]
   \   0000079E   0xAB67             ADD      R3,SP,#+412
   \   000007A0   0xF50D 0x72D5      ADD      R2,SP,#+426
   \   000007A4   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007A8   0xA80B             ADD      R0,SP,#+44
   \   000007AA   0x.... 0x....      BL       sprintf
    855          //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
    856          //                                                                                               GridMeasure.GridEye2.TempC,
    857          //                                                                                               GridMeasure.GridEye2.TempF,
    858          //                                                                                               GridMeasure.GridEye2.RawC );
    859                                  break;
   \   000007AE   0xE078             B.N      ??RoadBrd_ParseString_102
    860                                case 3: //GridEye3 Values
    861                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
    862                                                                                                         GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
    863                                                                                                         GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
    864                                                                                                         GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_97: (+1)
   \   000007B0   0xF8BD 0x01CA      LDRH     R0,[SP, #+458]
   \   000007B4   0x9003             STR      R0,[SP, #+12]
   \   000007B6   0xA8EA             ADD      R0,SP,#+936
   \   000007B8   0x1CC0             ADDS     R0,R0,#+3
   \   000007BA   0x9002             STR      R0,[SP, #+8]
   \   000007BC   0xA86E             ADD      R0,SP,#+440
   \   000007BE   0x1CC0             ADDS     R0,R0,#+3
   \   000007C0   0x9001             STR      R0,[SP, #+4]
   \   000007C2   0xA8E9             ADD      R0,SP,#+932
   \   000007C4   0x9000             STR      R0,[SP, #+0]
   \   000007C6   0xAB6D             ADD      R3,SP,#+436
   \   000007C8   0xF50D 0x72E1      ADD      R2,SP,#+450
   \   000007CC   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007D0   0xA80B             ADD      R0,SP,#+44
   \   000007D2   0x.... 0x....      BL       sprintf
    865          //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
    866          //                                                                                               GridMeasure.GridEye3.TempC,
    867          //                                                                                               GridMeasure.GridEye3.TempF,
    868          //                                                                                               GridMeasure.GridEye3.RawC );
    869                                  break;
   \   000007D6   0xE064             B.N      ??RoadBrd_ParseString_102
    870                                case 4: //GridEye4 Values
    871                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
    872                                                                                                         GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
    873                                                                                                         GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
    874                                                                                                         GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_96: (+1)
   \   000007D8   0xF8BD 0x01E2      LDRH     R0,[SP, #+482]
   \   000007DC   0x9003             STR      R0,[SP, #+12]
   \   000007DE   0xA8F0             ADD      R0,SP,#+960
   \   000007E0   0x1CC0             ADDS     R0,R0,#+3
   \   000007E2   0x9002             STR      R0,[SP, #+8]
   \   000007E4   0xA874             ADD      R0,SP,#+464
   \   000007E6   0x1CC0             ADDS     R0,R0,#+3
   \   000007E8   0x9001             STR      R0,[SP, #+4]
   \   000007EA   0xA8EF             ADD      R0,SP,#+956
   \   000007EC   0x9000             STR      R0,[SP, #+0]
   \   000007EE   0xAB73             ADD      R3,SP,#+460
   \   000007F0   0xF50D 0x72ED      ADD      R2,SP,#+474
   \   000007F4   0xF8DF 0x1D70      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007F8   0xA80B             ADD      R0,SP,#+44
   \   000007FA   0x.... 0x....      BL       sprintf
    875          //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
    876          //                                                                                               GridMeasure.GridEye4.TempC,
    877          //                                                                                               GridMeasure.GridEye4.TempF,
    878          //                                                                                               GridMeasure.GridEye4.RawC );
    879                                  break;
   \   000007FE   0xE050             B.N      ??RoadBrd_ParseString_102
    880                                case 5: //GridEye5 Values
    881                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
    882                                                                                                         GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
    883                                                                                                         GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
    884                                                                                                         GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_99: (+1)
   \   00000800   0xF8BD 0x01FA      LDRH     R0,[SP, #+506]
   \   00000804   0x9003             STR      R0,[SP, #+12]
   \   00000806   0xA8F6             ADD      R0,SP,#+984
   \   00000808   0x1CC0             ADDS     R0,R0,#+3
   \   0000080A   0x9002             STR      R0,[SP, #+8]
   \   0000080C   0xA87A             ADD      R0,SP,#+488
   \   0000080E   0x1CC0             ADDS     R0,R0,#+3
   \   00000810   0x9001             STR      R0,[SP, #+4]
   \   00000812   0xA8F5             ADD      R0,SP,#+980
   \   00000814   0x9000             STR      R0,[SP, #+0]
   \   00000816   0xAB79             ADD      R3,SP,#+484
   \   00000818   0xF50D 0x72F9      ADD      R2,SP,#+498
   \   0000081C   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000820   0xA80B             ADD      R0,SP,#+44
   \   00000822   0x.... 0x....      BL       sprintf
    885          //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
    886          //                                                                                               GridMeasure.GridEye5.TempC,
    887          //                                                                                               GridMeasure.GridEye5.TempF,
    888          //                                                                                               GridMeasure.GridEye5.RawC );
    889                                  break;
   \   00000826   0xE03C             B.N      ??RoadBrd_ParseString_102
    890                                case 6: //GridEye6 Values
    891                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
    892                                                                                                         GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
    893                                                                                                         GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
    894                                                                                                         GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_98: (+1)
   \   00000828   0xF8BD 0x0212      LDRH     R0,[SP, #+530]
   \   0000082C   0x9003             STR      R0,[SP, #+12]
   \   0000082E   0xA8FC             ADD      R0,SP,#+1008
   \   00000830   0x1CC0             ADDS     R0,R0,#+3
   \   00000832   0x9002             STR      R0,[SP, #+8]
   \   00000834   0xA880             ADD      R0,SP,#+512
   \   00000836   0x1CC0             ADDS     R0,R0,#+3
   \   00000838   0x9001             STR      R0,[SP, #+4]
   \   0000083A   0xA8FB             ADD      R0,SP,#+1004
   \   0000083C   0x9000             STR      R0,[SP, #+0]
   \   0000083E   0xAB7F             ADD      R3,SP,#+508
   \   00000840   0xAA82             ADD      R2,SP,#+520
   \   00000842   0x1C92             ADDS     R2,R2,#+2
   \   00000844   0xF8DF 0x1D20      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000848   0xA80B             ADD      R0,SP,#+44
   \   0000084A   0x.... 0x....      BL       sprintf
    895          //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
    896          //                                                                                               GridMeasure.GridEye6.TempC,
    897          //                                                                                               GridMeasure.GridEye6.TempF,
    898          //                                                                                               GridMeasure.GridEye6.RawC );
    899                                  break;
   \   0000084E   0xE028             B.N      ??RoadBrd_ParseString_102
    900                                case 7: //GridEye7 Values
    901                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
    902                                                                                                         GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
    903                                                                                                         GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
    904                                                                                                         GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_101: (+1)
   \   00000850   0xF8BD 0x022A      LDRH     R0,[SP, #+554]
   \   00000854   0x9003             STR      R0,[SP, #+12]
   \   00000856   0xA8FF             ADD      R0,SP,#+1020
   \   00000858   0x300F             ADDS     R0,R0,#+15
   \   0000085A   0x9002             STR      R0,[SP, #+8]
   \   0000085C   0xA886             ADD      R0,SP,#+536
   \   0000085E   0x1CC0             ADDS     R0,R0,#+3
   \   00000860   0x9001             STR      R0,[SP, #+4]
   \   00000862   0xA8FF             ADD      R0,SP,#+1020
   \   00000864   0x3008             ADDS     R0,R0,#+8
   \   00000866   0x9000             STR      R0,[SP, #+0]
   \   00000868   0xAB85             ADD      R3,SP,#+532
   \   0000086A   0xAA88             ADD      R2,SP,#+544
   \   0000086C   0x1C92             ADDS     R2,R2,#+2
   \   0000086E   0xF8DF 0x1CF8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000872   0xA80B             ADD      R0,SP,#+44
   \   00000874   0x.... 0x....      BL       sprintf
    905          //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
    906          //                                                                                               GridMeasure.GridEye7.TempC,
    907          //                                                                                               GridMeasure.GridEye7.TempF,
    908          //                                                                                               GridMeasure.GridEye7.RawC );
    909                                  break;
   \   00000878   0xE013             B.N      ??RoadBrd_ParseString_102
    910                                case 8: //GridEye8 Values
    911                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
    912                                                                                                         GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
    913                                                                                                         GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
    914                                                                                                         GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_100: (+1)
   \   0000087A   0xF8BD 0x0242      LDRH     R0,[SP, #+578]
   \   0000087E   0x9003             STR      R0,[SP, #+12]
   \   00000880   0xA8FF             ADD      R0,SP,#+1020
   \   00000882   0x3027             ADDS     R0,R0,#+39
   \   00000884   0x9002             STR      R0,[SP, #+8]
   \   00000886   0xA88C             ADD      R0,SP,#+560
   \   00000888   0x1CC0             ADDS     R0,R0,#+3
   \   0000088A   0x9001             STR      R0,[SP, #+4]
   \   0000088C   0xA8FF             ADD      R0,SP,#+1020
   \   0000088E   0x3020             ADDS     R0,R0,#+32
   \   00000890   0x9000             STR      R0,[SP, #+0]
   \   00000892   0xAB8B             ADD      R3,SP,#+556
   \   00000894   0xAA8E             ADD      R2,SP,#+568
   \   00000896   0x1C92             ADDS     R2,R2,#+2
   \   00000898   0xF8DF 0x1CCC      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   0000089C   0xA80B             ADD      R0,SP,#+44
   \   0000089E   0x.... 0x....      BL       sprintf
    915          //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
    916          //                                                                                               GridMeasure.GridEye8.TempC,
    917          //                                                                                               GridMeasure.GridEye8.TempF,
    918          //                                                                                               GridMeasure.GridEye8.RawC );
    919                                  break;
    920                              } // EndSwitch(x)
    921                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_102: (+1)
   \   000008A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008A4   0x2D00             CMP      R5,#+0
   \   000008A6   0xD005             BEQ.N    ??RoadBrd_ParseString_104
    922                              {
    923                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000008A8   0xA80B             ADD      R0,SP,#+44
   \   000008AA   0x.... 0x....      BL       strlen
   \   000008AE   0xA90B             ADD      R1,SP,#+44
   \   000008B0   0x.... 0x....      BL       BGM111_Transmit
    924                              }
    925                              // Now Print String.
    926           #ifdef NUCLEO
    927                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    928          #else
    929                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_104: (+1)
   \   000008B4   0xA90B             ADD      R1,SP,#+44
   \   000008B6   0x2000             MOVS     R0,#+0
   \   000008B8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000008BC   0x0006             MOVS     R6,R0
    930          #endif
    931                              if (Status != HAL_OK)
   \   000008BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000008C0   0x2E00             CMP      R6,#+0
   \   000008C2   0xD003             BEQ.N    ??RoadBrd_ParseString_105
    932                                return Status;
   \   000008C4   0x0030             MOVS     R0,R6
   \   000008C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000008C8   0xF004 0xB954      B.W      ??RoadBrd_ParseString_4
    933                            } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_105: (+1)
   \   000008CC   0x1C7F             ADDS     R7,R7,#+1
   \   000008CE   0xE71E             B.N      ??RoadBrd_ParseString_91
    934                            sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_92: (+1)
   \   000008D0   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_106
   \   000008D4   0xA80B             ADD      R0,SP,#+44
   \   000008D6   0x.... 0x....      BL       sprintf
    935                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   000008DA   0xA944             ADD      R1,SP,#+272
   \   000008DC   0xA80B             ADD      R0,SP,#+44
   \   000008DE   0x.... 0x....      BL       strcat
    936                            strcat( (char *)tempBffr2, "\r\n" );
   \   000008E2   0xA104             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000008E4   0xA80B             ADD      R0,SP,#+44
   \   000008E6   0x.... 0x....      BL       strcat
    937                          } //Endif(Status == HAL_OK)
    938                          else
    939                            break;
    940                          if ( BLE_Flag )
   \   000008EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008EC   0x2D00             CMP      R5,#+0
   \   000008EE   0xD105             BNE.N    ??RoadBrd_ParseString_107
   \   000008F0   0xE00F             B.N      ??RoadBrd_ParseString_108
   \   000008F2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_73:
   \   000008F4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \                     ??RoadBrd_ParseString_89: (+1)
   \   000008F8   0xF004 0xB8BD      B.W      ??RoadBrd_ParseString_26
    941                          {
    942                            strcpy( (char *)tempBffr2, "</STATUS>");
   \                     ??RoadBrd_ParseString_107: (+1)
   \   000008FC   0xF8DF 0x1834      LDR.W    R1,??RoadBrd_ParseString_48
   \   00000900   0xA80B             ADD      R0,SP,#+44
   \   00000902   0x.... 0x....      BL       strcpy
    943                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000906   0xA80B             ADD      R0,SP,#+44
   \   00000908   0x.... 0x....      BL       strlen
   \   0000090C   0xA90B             ADD      R1,SP,#+44
   \   0000090E   0x.... 0x....      BL       BGM111_Transmit
    944                          }
    945                          sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_108: (+1)
   \   00000912   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_109
   \   00000916   0xA80B             ADD      R0,SP,#+44
   \   00000918   0x.... 0x....      BL       sprintf
   \   0000091C   0xE170             B.N      ??RoadBrd_ParseString_110
    946                        }
    947                        else
    948                        {
    949                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_83: (+1)
   \   0000091E   0x7860             LDRB     R0,[R4, #+1]
   \   00000920   0x2830             CMP      R0,#+48
   \   00000922   0xD01F             BEQ.N    ??RoadBrd_ParseString_111
   \   00000924   0x2831             CMP      R0,#+49
   \   00000926   0xF000 0x8152      BEQ.W    ??RoadBrd_ParseString_112
   \   0000092A   0x2849             CMP      R0,#+73
   \   0000092C   0xF040 0x8168      BNE.W    ??RoadBrd_ParseString_110
    950                          {
    951          //------------------ BI Command: Initialize Cool Eye/Grid Eye Sensor
    952                            case 'I':
    953                              // Initialize Cool Eye/Grid Eye Sensor.
    954                              Status = RoadBrd_GridEyeInit();
   \                     ??RoadBrd_ParseString_113: (+1)
   \   00000930   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   00000934   0x0006             MOVS     R6,R0
    955                              // Is this a BLE Operation?
    956                              if ( BLE_Flag )
   \   00000936   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000938   0x2D00             CMP      R5,#+0
   \   0000093A   0xD00A             BEQ.N    ??RoadBrd_ParseString_114
    957                              {
    958                                // Yes...Build and Send BLE Response NOW.
    959                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000093C   0xF8DF 0x187C      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   00000940   0xA80B             ADD      R0,SP,#+44
   \   00000942   0x.... 0x....      BL       strcpy
    960                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000946   0xA80B             ADD      R0,SP,#+44
   \   00000948   0x.... 0x....      BL       strlen
   \   0000094C   0xA90B             ADD      R1,SP,#+44
   \   0000094E   0x.... 0x....      BL       BGM111_Transmit
    961                              }
    962                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_114: (+1)
   \   00000952   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000954   0x2E00             CMP      R6,#+0
   \   00000956   0xD104             BNE.N    ??RoadBrd_ParseString_115
    963                              {
    964                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Initialization Complete.\r\n");;
   \   00000958   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_116
   \   0000095C   0xA80B             ADD      R0,SP,#+44
   \   0000095E   0x.... 0x....      BL       strcpy
    965                              }
    966                              break;
   \                     ??RoadBrd_ParseString_115: (+1)
   \   00000962   0xE14D             B.N      ??RoadBrd_ParseString_110
    967          //------------------ B0 Command...Read Cool Eye/Grid Eye Values.....
    968                            case '0':
    969                              // Read Cool Eye/Grid Eye Values.....
    970                              if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_111: (+1)
   \   00000964   0x2005             MOVS     R0,#+5
   \   00000966   0x.... 0x....      BL       Get_DriverStates
   \   0000096A   0x2800             CMP      R0,#+0
   \   0000096C   0xD00B             BEQ.N    ??RoadBrd_ParseString_117
    971                              {
    972                                Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   0000096E   0xA85B             ADD      R0,SP,#+364
   \   00000970   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   00000974   0x0006             MOVS     R6,R0
    973                                if (Status == HAL_OK)
   \   00000976   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000978   0x2E00             CMP      R6,#+0
   \   0000097A   0xD117             BNE.N    ??RoadBrd_ParseString_118
    974                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000097C   0xA8D7             ADD      R0,SP,#+860
   \   0000097E   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   00000982   0x0006             MOVS     R6,R0
   \   00000984   0xE012             B.N      ??RoadBrd_ParseString_118
    975                              }
    976                              else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_117: (+1)
   \   00000986   0x2006             MOVS     R0,#+6
   \   00000988   0x.... 0x....      BL       Get_DriverStates
   \   0000098C   0x2800             CMP      R0,#+0
   \   0000098E   0xD00B             BEQ.N    ??RoadBrd_ParseString_119
    977                              {
    978                                Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   00000990   0xA85B             ADD      R0,SP,#+364
   \   00000992   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   00000996   0x0006             MOVS     R6,R0
    979                                if (Status == HAL_OK)
   \   00000998   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000099A   0x2E00             CMP      R6,#+0
   \   0000099C   0xD106             BNE.N    ??RoadBrd_ParseString_118
    980                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000099E   0xA8D7             ADD      R0,SP,#+860
   \   000009A0   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000009A4   0x0006             MOVS     R6,R0
   \   000009A6   0xE001             B.N      ??RoadBrd_ParseString_118
    981                              }
    982                              else
    983                                Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_119: (+1)
   \   000009A8   0x2001             MOVS     R0,#+1
   \   000009AA   0x0006             MOVS     R6,R0
    984          
    985                              // Is this a BLE Operation?
    986                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_118: (+1)
   \   000009AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000009AE   0x2D00             CMP      R5,#+0
   \   000009B0   0xD00A             BEQ.N    ??RoadBrd_ParseString_120
    987                              {
    988                                // Yes...Build and Send BLE Response NOW.
    989                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000009B2   0xF8DF 0x1808      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   000009B6   0xA80B             ADD      R0,SP,#+44
   \   000009B8   0x.... 0x....      BL       strcpy
    990                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000009BC   0xA80B             ADD      R0,SP,#+44
   \   000009BE   0x.... 0x....      BL       strlen
   \   000009C2   0xA90B             ADD      R1,SP,#+44
   \   000009C4   0x.... 0x....      BL       BGM111_Transmit
    991                              }
    992          
    993                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_120: (+1)
   \   000009C8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009CA   0x2E00             CMP      R6,#+0
   \   000009CC   0xF040 0x80FE      BNE.W    ??RoadBrd_ParseString_121
    994                              {
    995                                // Send string to UART..
    996                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000009D0   0xF8DF 0x1B28      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   000009D4   0xA80B             ADD      R0,SP,#+44
   \   000009D6   0x.... 0x....      BL       strcpy
    997          #ifdef NUCLEO
    998                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    999          #else
   1000                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000009DA   0xA90B             ADD      R1,SP,#+44
   \   000009DC   0x2000             MOVS     R0,#+0
   \   000009DE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000009E2   0x0006             MOVS     R6,R0
   1001          #endif
   1002                                if (Status != HAL_OK)
   \   000009E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009E6   0x2E00             CMP      R6,#+0
   \   000009E8   0xD003             BEQ.N    ??RoadBrd_ParseString_122
   1003                                  return Status;
   \   000009EA   0x0030             MOVS     R0,R6
   \   000009EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000009EE   0xF004 0xB8C1      B.W      ??RoadBrd_ParseString_4
   1004                                // NOW, Build Data String..
   1005                                for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_122: (+1)
   \   000009F2   0x2000             MOVS     R0,#+0
   \   000009F4   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_123: (+1)
   \   000009F6   0x2F09             CMP      R7,#+9
   \   000009F8   0xF280 0x80D5      BGE.W    ??RoadBrd_ParseString_124
   1006                                {
   1007                                  // Build String
   1008                                  switch(x)
   \   000009FC   0x2F00             CMP      R7,#+0
   \   000009FE   0xD00F             BEQ.N    ??RoadBrd_ParseString_125
   \   00000A00   0x2F02             CMP      R7,#+2
   \   00000A02   0xD035             BEQ.N    ??RoadBrd_ParseString_126
   \   00000A04   0xD320             BCC.N    ??RoadBrd_ParseString_127
   \   00000A06   0x2F04             CMP      R7,#+4
   \   00000A08   0xD05A             BEQ.N    ??RoadBrd_ParseString_128
   \   00000A0A   0xD345             BCC.N    ??RoadBrd_ParseString_129
   \   00000A0C   0x2F06             CMP      R7,#+6
   \   00000A0E   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_130
   \   00000A12   0xD369             BCC.N    ??RoadBrd_ParseString_131
   \   00000A14   0x2F08             CMP      R7,#+8
   \   00000A16   0xF000 0x80A4      BEQ.W    ??RoadBrd_ParseString_132
   \   00000A1A   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_133
   \   00000A1E   0xE0B4             B.N      ??RoadBrd_ParseString_134
   1009                                  {
   1010                                  case 0: //Thermistor Values
   1011                                    sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
   1012                                            GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
   1013                                            GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
   1014                                            GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_125: (+1)
   \   00000A20   0xF8BD 0x0182      LDRH     R0,[SP, #+386]
   \   00000A24   0x9003             STR      R0,[SP, #+12]
   \   00000A26   0xA8D8             ADD      R0,SP,#+864
   \   00000A28   0x1CC0             ADDS     R0,R0,#+3
   \   00000A2A   0x9002             STR      R0,[SP, #+8]
   \   00000A2C   0xA85C             ADD      R0,SP,#+368
   \   00000A2E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A30   0x9001             STR      R0,[SP, #+4]
   \   00000A32   0xA8D7             ADD      R0,SP,#+860
   \   00000A34   0x9000             STR      R0,[SP, #+0]
   \   00000A36   0xAB5B             ADD      R3,SP,#+364
   \   00000A38   0xF50D 0x72BD      ADD      R2,SP,#+378
   \   00000A3C   0xF8DF 0x1B24      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000A40   0xA80B             ADD      R0,SP,#+44
   \   00000A42   0x.... 0x....      BL       sprintf
   1015                                    //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
   1016                                    //                                                                                               GridMeasure.Thermistor.TempC,
   1017                                    //                                                                                               GridMeasure.Thermistor.TempF,
   1018                                    //                                                                                               GridMeasure.Thermistor.RawC );
   1019                                    break;
   \   00000A46   0xE0A0             B.N      ??RoadBrd_ParseString_134
   1020                                  case 1: //GridEye1 Values
   1021                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
   1022                                            GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
   1023                                            GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
   1024                                            GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_127: (+1)
   \   00000A48   0xF8BD 0x019A      LDRH     R0,[SP, #+410]
   \   00000A4C   0x9003             STR      R0,[SP, #+12]
   \   00000A4E   0xA8DE             ADD      R0,SP,#+888
   \   00000A50   0x1CC0             ADDS     R0,R0,#+3
   \   00000A52   0x9002             STR      R0,[SP, #+8]
   \   00000A54   0xA862             ADD      R0,SP,#+392
   \   00000A56   0x1CC0             ADDS     R0,R0,#+3
   \   00000A58   0x9001             STR      R0,[SP, #+4]
   \   00000A5A   0xA8DD             ADD      R0,SP,#+884
   \   00000A5C   0x9000             STR      R0,[SP, #+0]
   \   00000A5E   0xAB61             ADD      R3,SP,#+388
   \   00000A60   0xF50D 0x72C9      ADD      R2,SP,#+402
   \   00000A64   0xF8DF 0x1B00      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000A68   0xA80B             ADD      R0,SP,#+44
   \   00000A6A   0x.... 0x....      BL       sprintf
   1025                                    //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
   1026                                    //                                                                                               GridMeasure.GridEye1.TempC,
   1027                                    //                                                                                               GridMeasure.GridEye1.TempF,
   1028                                    //                                                                                               GridMeasure.GridEye1.RawC );
   1029                                    break;
   \   00000A6E   0xE08C             B.N      ??RoadBrd_ParseString_134
   1030                                  case 2: //GridEye2 Values
   1031                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
   1032                                            GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
   1033                                            GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
   1034                                            GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_126: (+1)
   \   00000A70   0xF8BD 0x01B2      LDRH     R0,[SP, #+434]
   \   00000A74   0x9003             STR      R0,[SP, #+12]
   \   00000A76   0xA8E4             ADD      R0,SP,#+912
   \   00000A78   0x1CC0             ADDS     R0,R0,#+3
   \   00000A7A   0x9002             STR      R0,[SP, #+8]
   \   00000A7C   0xA868             ADD      R0,SP,#+416
   \   00000A7E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A80   0x9001             STR      R0,[SP, #+4]
   \   00000A82   0xA8E3             ADD      R0,SP,#+908
   \   00000A84   0x9000             STR      R0,[SP, #+0]
   \   00000A86   0xAB67             ADD      R3,SP,#+412
   \   00000A88   0xF50D 0x72D5      ADD      R2,SP,#+426
   \   00000A8C   0xF8DF 0x1AD8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000A90   0xA80B             ADD      R0,SP,#+44
   \   00000A92   0x.... 0x....      BL       sprintf
   1035                                    //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
   1036                                    //                                                                                               GridMeasure.GridEye2.TempC,
   1037                                    //                                                                                               GridMeasure.GridEye2.TempF,
   1038                                    //                                                                                               GridMeasure.GridEye2.RawC );
   1039                                    break;
   \   00000A96   0xE078             B.N      ??RoadBrd_ParseString_134
   1040                                  case 3: //GridEye3 Values
   1041                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
   1042                                            GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
   1043                                            GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
   1044                                            GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_129: (+1)
   \   00000A98   0xF8BD 0x01CA      LDRH     R0,[SP, #+458]
   \   00000A9C   0x9003             STR      R0,[SP, #+12]
   \   00000A9E   0xA8EA             ADD      R0,SP,#+936
   \   00000AA0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA2   0x9002             STR      R0,[SP, #+8]
   \   00000AA4   0xA86E             ADD      R0,SP,#+440
   \   00000AA6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA8   0x9001             STR      R0,[SP, #+4]
   \   00000AAA   0xA8E9             ADD      R0,SP,#+932
   \   00000AAC   0x9000             STR      R0,[SP, #+0]
   \   00000AAE   0xAB6D             ADD      R3,SP,#+436
   \   00000AB0   0xF50D 0x72E1      ADD      R2,SP,#+450
   \   00000AB4   0xF8DF 0x1AB0      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000AB8   0xA80B             ADD      R0,SP,#+44
   \   00000ABA   0x.... 0x....      BL       sprintf
   1045                                    //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
   1046                                    //                                                                                               GridMeasure.GridEye3.TempC,
   1047                                    //                                                                                               GridMeasure.GridEye3.TempF,
   1048                                    //                                                                                               GridMeasure.GridEye3.RawC );
   1049                                    break;
   \   00000ABE   0xE064             B.N      ??RoadBrd_ParseString_134
   1050                                  case 4: //GridEye4 Values
   1051                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
   1052                                            GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
   1053                                            GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
   1054                                            GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_128: (+1)
   \   00000AC0   0xF8BD 0x01E2      LDRH     R0,[SP, #+482]
   \   00000AC4   0x9003             STR      R0,[SP, #+12]
   \   00000AC6   0xA8F0             ADD      R0,SP,#+960
   \   00000AC8   0x1CC0             ADDS     R0,R0,#+3
   \   00000ACA   0x9002             STR      R0,[SP, #+8]
   \   00000ACC   0xA874             ADD      R0,SP,#+464
   \   00000ACE   0x1CC0             ADDS     R0,R0,#+3
   \   00000AD0   0x9001             STR      R0,[SP, #+4]
   \   00000AD2   0xA8EF             ADD      R0,SP,#+956
   \   00000AD4   0x9000             STR      R0,[SP, #+0]
   \   00000AD6   0xAB73             ADD      R3,SP,#+460
   \   00000AD8   0xF50D 0x72ED      ADD      R2,SP,#+474
   \   00000ADC   0xF8DF 0x1A88      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000AE0   0xA80B             ADD      R0,SP,#+44
   \   00000AE2   0x.... 0x....      BL       sprintf
   1055                                    //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
   1056                                    //                                                                                               GridMeasure.GridEye4.TempC,
   1057                                    //                                                                                               GridMeasure.GridEye4.TempF,
   1058                                    //                                                                                               GridMeasure.GridEye4.RawC );
   1059                                    break;
   \   00000AE6   0xE050             B.N      ??RoadBrd_ParseString_134
   1060                                  case 5: //GridEye5 Values
   1061                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
   1062                                            GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
   1063                                            GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
   1064                                            GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_131: (+1)
   \   00000AE8   0xF8BD 0x01FA      LDRH     R0,[SP, #+506]
   \   00000AEC   0x9003             STR      R0,[SP, #+12]
   \   00000AEE   0xA8F6             ADD      R0,SP,#+984
   \   00000AF0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF2   0x9002             STR      R0,[SP, #+8]
   \   00000AF4   0xA87A             ADD      R0,SP,#+488
   \   00000AF6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF8   0x9001             STR      R0,[SP, #+4]
   \   00000AFA   0xA8F5             ADD      R0,SP,#+980
   \   00000AFC   0x9000             STR      R0,[SP, #+0]
   \   00000AFE   0xAB79             ADD      R3,SP,#+484
   \   00000B00   0xF50D 0x72F9      ADD      R2,SP,#+498
   \   00000B04   0xF8DF 0x1A60      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B08   0xA80B             ADD      R0,SP,#+44
   \   00000B0A   0x.... 0x....      BL       sprintf
   1065                                    //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
   1066                                    //                                                                                               GridMeasure.GridEye5.TempC,
   1067                                    //                                                                                               GridMeasure.GridEye5.TempF,
   1068                                    //                                                                                               GridMeasure.GridEye5.RawC );
   1069                                    break;
   \   00000B0E   0xE03C             B.N      ??RoadBrd_ParseString_134
   1070                                  case 6: //GridEye6 Values
   1071                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
   1072                                            GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
   1073                                            GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
   1074                                            GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_130: (+1)
   \   00000B10   0xF8BD 0x0212      LDRH     R0,[SP, #+530]
   \   00000B14   0x9003             STR      R0,[SP, #+12]
   \   00000B16   0xA8FC             ADD      R0,SP,#+1008
   \   00000B18   0x1CC0             ADDS     R0,R0,#+3
   \   00000B1A   0x9002             STR      R0,[SP, #+8]
   \   00000B1C   0xA880             ADD      R0,SP,#+512
   \   00000B1E   0x1CC0             ADDS     R0,R0,#+3
   \   00000B20   0x9001             STR      R0,[SP, #+4]
   \   00000B22   0xA8FB             ADD      R0,SP,#+1004
   \   00000B24   0x9000             STR      R0,[SP, #+0]
   \   00000B26   0xAB7F             ADD      R3,SP,#+508
   \   00000B28   0xAA82             ADD      R2,SP,#+520
   \   00000B2A   0x1C92             ADDS     R2,R2,#+2
   \   00000B2C   0xF8DF 0x1A38      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B30   0xA80B             ADD      R0,SP,#+44
   \   00000B32   0x.... 0x....      BL       sprintf
   1075                                    //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
   1076                                    //                                                                                               GridMeasure.GridEye6.TempC,
   1077                                    //                                                                                               GridMeasure.GridEye6.TempF,
   1078                                    //                                                                                               GridMeasure.GridEye6.RawC );
   1079                                    break;
   \   00000B36   0xE028             B.N      ??RoadBrd_ParseString_134
   1080                                  case 7: //GridEye7 Values
   1081                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
   1082                                            GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
   1083                                            GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
   1084                                            GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_133: (+1)
   \   00000B38   0xF8BD 0x022A      LDRH     R0,[SP, #+554]
   \   00000B3C   0x9003             STR      R0,[SP, #+12]
   \   00000B3E   0xA8FF             ADD      R0,SP,#+1020
   \   00000B40   0x300F             ADDS     R0,R0,#+15
   \   00000B42   0x9002             STR      R0,[SP, #+8]
   \   00000B44   0xA886             ADD      R0,SP,#+536
   \   00000B46   0x1CC0             ADDS     R0,R0,#+3
   \   00000B48   0x9001             STR      R0,[SP, #+4]
   \   00000B4A   0xA8FF             ADD      R0,SP,#+1020
   \   00000B4C   0x3008             ADDS     R0,R0,#+8
   \   00000B4E   0x9000             STR      R0,[SP, #+0]
   \   00000B50   0xAB85             ADD      R3,SP,#+532
   \   00000B52   0xAA88             ADD      R2,SP,#+544
   \   00000B54   0x1C92             ADDS     R2,R2,#+2
   \   00000B56   0xF8DF 0x1A10      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B5A   0xA80B             ADD      R0,SP,#+44
   \   00000B5C   0x.... 0x....      BL       sprintf
   1085                                    //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
   1086                                    //                                                                                               GridMeasure.GridEye7.TempC,
   1087                                    //                                                                                               GridMeasure.GridEye7.TempF,
   1088                                    //                                                                                               GridMeasure.GridEye7.RawC );
   1089                                    break;
   \   00000B60   0xE013             B.N      ??RoadBrd_ParseString_134
   1090                                  case 8: //GridEye8 Values
   1091                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
   1092                                            GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
   1093                                            GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
   1094                                            GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_132: (+1)
   \   00000B62   0xF8BD 0x0242      LDRH     R0,[SP, #+578]
   \   00000B66   0x9003             STR      R0,[SP, #+12]
   \   00000B68   0xA8FF             ADD      R0,SP,#+1020
   \   00000B6A   0x3027             ADDS     R0,R0,#+39
   \   00000B6C   0x9002             STR      R0,[SP, #+8]
   \   00000B6E   0xA88C             ADD      R0,SP,#+560
   \   00000B70   0x1CC0             ADDS     R0,R0,#+3
   \   00000B72   0x9001             STR      R0,[SP, #+4]
   \   00000B74   0xA8FF             ADD      R0,SP,#+1020
   \   00000B76   0x3020             ADDS     R0,R0,#+32
   \   00000B78   0x9000             STR      R0,[SP, #+0]
   \   00000B7A   0xAB8B             ADD      R3,SP,#+556
   \   00000B7C   0xAA8E             ADD      R2,SP,#+568
   \   00000B7E   0x1C92             ADDS     R2,R2,#+2
   \   00000B80   0xF8DF 0x19E4      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B84   0xA80B             ADD      R0,SP,#+44
   \   00000B86   0x.... 0x....      BL       sprintf
   1095                                    //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
   1096                                    //                                                                                               GridMeasure.GridEye8.TempC,
   1097                                    //                                                                                               GridMeasure.GridEye8.TempF,
   1098                                    //                                                                                               GridMeasure.GridEye8.RawC );
   1099                                    break;
   1100                                  } // EndSwitch(x)
   1101                                  // Now Print String.
   1102           #ifdef NUCLEO
   1103                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1104          #else
   1105                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_134: (+1)
   \   00000B8A   0xA90B             ADD      R1,SP,#+44
   \   00000B8C   0x2000             MOVS     R0,#+0
   \   00000B8E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B92   0x0006             MOVS     R6,R0
   1106          #endif
   1107                                  if (Status != HAL_OK)
   \   00000B94   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000B96   0x2E00             CMP      R6,#+0
   \   00000B98   0xD003             BEQ.N    ??RoadBrd_ParseString_135
   1108                                    return Status;
   \   00000B9A   0x0030             MOVS     R0,R6
   \   00000B9C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B9E   0xF003 0xBFE9      B.W      ??RoadBrd_ParseString_4
   1109                               } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_135: (+1)
   \   00000BA2   0x1C7F             ADDS     R7,R7,#+1
   \   00000BA4   0xE727             B.N      ??RoadBrd_ParseString_123
   1110                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_124: (+1)
   \   00000BA6   0xF8DF 0x1B2C      LDR.W    R1,??RoadBrd_ParseString_106
   \   00000BAA   0xA80B             ADD      R0,SP,#+44
   \   00000BAC   0x.... 0x....      BL       sprintf
   1111                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000BB0   0xA944             ADD      R1,SP,#+272
   \   00000BB2   0xA80B             ADD      R0,SP,#+44
   \   00000BB4   0x.... 0x....      BL       strcat
   1112                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000BB8   0xA1D2             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000BBA   0xA80B             ADD      R0,SP,#+44
   \   00000BBC   0x.... 0x....      BL       strcat
   1113                              } //Endif(Status == HAL_OK)
   1114                              else
   1115                                break;
   1116                              sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   00000BC0   0xF8DF 0x1B5C      LDR.W    R1,??RoadBrd_ParseString_109
   \   00000BC4   0xA80B             ADD      R0,SP,#+44
   \   00000BC6   0x.... 0x....      BL       sprintf
   1117                              break;
   \   00000BCA   0xE019             B.N      ??RoadBrd_ParseString_110
   \                     ??RoadBrd_ParseString_121: (+1)
   \   00000BCC   0xE018             B.N      ??RoadBrd_ParseString_110
   1118          //------------------ B1 Command...Reset Cool Eye/Grid Eye Sensor..... 
   1119                            case '1':
   1120                              // Reset Cool Eye/Grid Eye Sensor.
   1121                              Status = RoadBrd_GridEyeReset();
   \                     ??RoadBrd_ParseString_112: (+1)
   \   00000BCE   0x.... 0x....      BL       RoadBrd_GridEyeReset
   \   00000BD2   0x0006             MOVS     R6,R0
   1122                              // Is this a BLE Operation?
   1123                              if ( BLE_Flag )
   \   00000BD4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000BD6   0x2D00             CMP      R5,#+0
   \   00000BD8   0xD00A             BEQ.N    ??RoadBrd_ParseString_136
   1124                              {
   1125                                // Yes...Build and Send BLE Response NOW.
   1126                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000BDA   0xF8DF 0x15E0      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   00000BDE   0xA80B             ADD      R0,SP,#+44
   \   00000BE0   0x.... 0x....      BL       strcpy
   1127                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000BE4   0xA80B             ADD      R0,SP,#+44
   \   00000BE6   0x.... 0x....      BL       strlen
   \   00000BEA   0xA90B             ADD      R1,SP,#+44
   \   00000BEC   0x.... 0x....      BL       BGM111_Transmit
   1128                              }
   1129          
   1130                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_136: (+1)
   \   00000BF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BF2   0x2E00             CMP      R6,#+0
   \   00000BF4   0xD104             BNE.N    ??RoadBrd_ParseString_137
   1131                              {
   1132                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Reset Complete.\r\n");;
   \   00000BF6   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_138
   \   00000BFA   0xA80B             ADD      R0,SP,#+44
   \   00000BFC   0x.... 0x....      BL       strcpy
   1133                              }
   1134                              break;
   1135                          } //EndSwitch
   1136                        } //EndElse (Size == 1)
   1137                        break;
   \                     ??RoadBrd_ParseString_137: (+1)
   \                     ??RoadBrd_ParseString_110: (+1)
   \   00000C00   0xF003 0xBF39      B.W      ??RoadBrd_ParseString_26
   1138          //**************************************************************************************************
   1139                      case 'C':
   1140                        // Read Voltage. 
   1141          //++++++++++++++++++++++++++++++++++++++++++  Voltage Monitor Commands.
   1142                        if (Size == 1)
   \                     ??RoadBrd_ParseString_14: (+1)
   \   00000C04   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00000C08   0x2801             CMP      R0,#+1
   \   00000C0A   0xD152             BNE.N    ??RoadBrd_ParseString_139
   1143                        {
   1144          //------------------ C Command       
   1145                          // Read Bus Voltage and return as 2 Byte Field.
   1146                          Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \   00000C0C   0xA842             ADD      R0,SP,#+264
   \   00000C0E   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000C12   0x0006             MOVS     R6,R0
   1147                          if (Status == HAL_OK)
   \   00000C14   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C16   0x2E00             CMP      R6,#+0
   \   00000C18   0xD103             BNE.N    ??RoadBrd_ParseString_140
   1148                            Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000C1A   0xA84E             ADD      R0,SP,#+312
   \   00000C1C   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000C20   0x0006             MOVS     R6,R0
   1149                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_140: (+1)
   \   00000C22   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C24   0x2E00             CMP      R6,#+0
   \   00000C26   0xD126             BNE.N    ??RoadBrd_ParseString_141
   1150                          {
   1151                            // Send string to UART..
   1152                            strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000C28   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000C2C   0xA80B             ADD      R0,SP,#+44
   \   00000C2E   0x.... 0x....      BL       strcpy
   1153          #ifdef NUCLEO
   1154                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1155          #else
   1156                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C32   0xA90B             ADD      R1,SP,#+44
   \   00000C34   0x2000             MOVS     R0,#+0
   \   00000C36   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C3A   0x0006             MOVS     R6,R0
   1157          #endif
   1158                            if (Status != HAL_OK)
   \   00000C3C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C3E   0x2E00             CMP      R6,#+0
   \   00000C40   0xD003             BEQ.N    ??RoadBrd_ParseString_143
   1159                            return Status;
   \   00000C42   0x0030             MOVS     R0,R6
   \   00000C44   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C46   0xF003 0xBF95      B.W      ??RoadBrd_ParseString_4
   1160                            // NOW, Build Data String..
   1161                            sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_143: (+1)
   \   00000C4A   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000C4E   0xA80B             ADD      R0,SP,#+44
   \   00000C50   0x.... 0x....      BL       sprintf
   1162                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000C54   0xA944             ADD      R1,SP,#+272
   \   00000C56   0xA80B             ADD      R0,SP,#+44
   \   00000C58   0x.... 0x....      BL       strcat
   1163                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000C5C   0xA1A9             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000C5E   0xA80B             ADD      R0,SP,#+44
   \   00000C60   0x.... 0x....      BL       strcat
   1164                          }
   1165                          else
   1166                            break;
   1167          #ifdef NUCLEO
   1168                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1169          #else
   1170                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C64   0xA90B             ADD      R1,SP,#+44
   \   00000C66   0x2000             MOVS     R0,#+0
   \   00000C68   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C6C   0x0006             MOVS     R6,R0
   1171          #endif
   1172                          if (Status != HAL_OK)
   \   00000C6E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C70   0x2E00             CMP      R6,#+0
   \   00000C72   0xD102             BNE.N    ??RoadBrd_ParseString_144
   \   00000C74   0xE005             B.N      ??RoadBrd_ParseString_145
   \                     ??RoadBrd_ParseString_141: (+1)
   \   00000C76   0xF003 0xBEFE      B.W      ??RoadBrd_ParseString_26
   1173                            return Status;
   \                     ??RoadBrd_ParseString_144: (+1)
   \   00000C7A   0x0030             MOVS     R0,R6
   \   00000C7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C7E   0xF003 0xBF79      B.W      ??RoadBrd_ParseString_4
   1174                          // Is this a BLE Operation?
   1175                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_145: (+1)
   \   00000C82   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C84   0x2D00             CMP      R5,#+0
   \   00000C86   0xD00C             BEQ.N    ??RoadBrd_ParseString_146
   1176                          {
   1177                            // Yes...Build and Send BLE Response NOW.
   1178                            sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000C88   0xAB4E             ADD      R3,SP,#+312
   \   00000C8A   0xAA42             ADD      R2,SP,#+264
   \   00000C8C   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000C90   0xA80B             ADD      R0,SP,#+44
   \   00000C92   0x.... 0x....      BL       sprintf
   1179                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000C96   0xA80B             ADD      R0,SP,#+44
   \   00000C98   0x.... 0x....      BL       strlen
   \   00000C9C   0xA90B             ADD      R1,SP,#+44
   \   00000C9E   0x.... 0x....      BL       BGM111_Transmit
   1180                          }
   1181                          // Now calculate Bus Voltage.
   1182                          sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_146: (+1)
   \   00000CA2   0xAB4E             ADD      R3,SP,#+312
   \   00000CA4   0xAA42             ADD      R2,SP,#+264
   \   00000CA6   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_148
   \   00000CAA   0xA80B             ADD      R0,SP,#+44
   \   00000CAC   0x.... 0x....      BL       sprintf
   \   00000CB0   0xE19D             B.N      ??RoadBrd_ParseString_149
   1183                        }
   1184                        else
   1185                        {
   1186                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_139: (+1)
   \   00000CB2   0x7860             LDRB     R0,[R4, #+1]
   \   00000CB4   0x2830             CMP      R0,#+48
   \   00000CB6   0xD024             BEQ.N    ??RoadBrd_ParseString_150
   \   00000CB8   0x2831             CMP      R0,#+49
   \   00000CBA   0xD074             BEQ.N    ??RoadBrd_ParseString_151
   \   00000CBC   0x2832             CMP      R0,#+50
   \   00000CBE   0xF000 0x80CA      BEQ.W    ??RoadBrd_ParseString_152
   \   00000CC2   0x2833             CMP      R0,#+51
   \   00000CC4   0xF000 0x8128      BEQ.W    ??RoadBrd_ParseString_153
   \   00000CC8   0x2849             CMP      R0,#+73
   \   00000CCA   0xF040 0x817D      BNE.W    ??RoadBrd_ParseString_154
   1187                          {
   1188          //------------------ CI Command       
   1189                            case 'I':
   1190                              // Initialize and load Calibration Register.
   1191                              // Read Calibration Value first.
   1192                              Status = RoadBrd_Init_VMonitor();
   \                     ??RoadBrd_ParseString_155: (+1)
   \   00000CCE   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   00000CD2   0x0006             MOVS     R6,R0
   1193                              // Is this a BLE Operation?
   1194                              if ( BLE_Flag )
   \   00000CD4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CD6   0x2D00             CMP      R5,#+0
   \   00000CD8   0xD00A             BEQ.N    ??RoadBrd_ParseString_156
   1195                              {
   1196                                // Yes...Build and Send BLE Response NOW.
   1197                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000CDA   0xF8DF 0x14E0      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   00000CDE   0xA80B             ADD      R0,SP,#+44
   \   00000CE0   0x.... 0x....      BL       strcpy
   1198                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000CE4   0xA80B             ADD      R0,SP,#+44
   \   00000CE6   0x.... 0x....      BL       strlen
   \   00000CEA   0xA90B             ADD      R1,SP,#+44
   \   00000CEC   0x.... 0x....      BL       BGM111_Transmit
   1199                              }
   1200                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_156: (+1)
   \   00000CF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CF2   0x2E00             CMP      R6,#+0
   \   00000CF4   0xD104             BNE.N    ??RoadBrd_ParseString_157
   1201                              {
   1202                                strcpy( (char *)tempBffr2, "Voltage Monitor: Initialization Complete.\r\n");;
   \   00000CF6   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_148+0x4
   \   00000CFA   0xA80B             ADD      R0,SP,#+44
   \   00000CFC   0x.... 0x....      BL       strcpy
   1203                              }
   1204                              break;
   \                     ??RoadBrd_ParseString_157: (+1)
   \   00000D00   0xE175             B.N      ??RoadBrd_ParseString_149
   1205          //------------------ C0 Command...Read Shunt Voltage and return results.....
   1206                            case '0':
   1207                              // Read Shunt Voltage and return results.....
   1208                              Status = RoadBrd_VMonitor_RdShntVltg( &VMeasure );
   \                     ??RoadBrd_ParseString_150: (+1)
   \   00000D02   0xA842             ADD      R0,SP,#+264
   \   00000D04   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg
   \   00000D08   0x0006             MOVS     R6,R0
   1209                              if (Status == HAL_OK)
   \   00000D0A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D0C   0x2E00             CMP      R6,#+0
   \   00000D0E   0xD103             BNE.N    ??RoadBrd_ParseString_158
   1210                                Status = RoadBrd_VMonitor_RdShntVltg_Scaled( &VMeasureScaled );
   \   00000D10   0xA84E             ADD      R0,SP,#+312
   \   00000D12   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg_Scaled
   \   00000D16   0x0006             MOVS     R6,R0
   1211                              // Is this a BLE Operation?
   1212                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_158: (+1)
   \   00000D18   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D1A   0x2E00             CMP      R6,#+0
   \   00000D1C   0xD126             BNE.N    ??RoadBrd_ParseString_159
   1213                              {
   1214                                // Send string to UART..
   1215                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000D1E   0xF8DF 0x17DC      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   00000D22   0xA80B             ADD      R0,SP,#+44
   \   00000D24   0x.... 0x....      BL       strcpy
   1216          #ifdef NUCLEO
   1217                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1218          #else
   1219                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D28   0xA90B             ADD      R1,SP,#+44
   \   00000D2A   0x2000             MOVS     R0,#+0
   \   00000D2C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D30   0x0006             MOVS     R6,R0
   1220          #endif
   1221                                if (Status != HAL_OK)
   \   00000D32   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D34   0x2E00             CMP      R6,#+0
   \   00000D36   0xD003             BEQ.N    ??RoadBrd_ParseString_160
   1222                                  return Status;
   \   00000D38   0x0030             MOVS     R0,R6
   \   00000D3A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D3C   0xF003 0xBF1A      B.W      ??RoadBrd_ParseString_4
   1223                                // NOW, Build Data String..
   1224                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_160: (+1)
   \   00000D40   0xF8DF 0x1990      LDR.W    R1,??RoadBrd_ParseString_106
   \   00000D44   0xA80B             ADD      R0,SP,#+44
   \   00000D46   0x.... 0x....      BL       sprintf
   1225                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000D4A   0xA944             ADD      R1,SP,#+272
   \   00000D4C   0xA80B             ADD      R0,SP,#+44
   \   00000D4E   0x.... 0x....      BL       strcat
   1226                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000D52   0xA16C             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000D54   0xA80B             ADD      R0,SP,#+44
   \   00000D56   0x.... 0x....      BL       strcat
   1227                              }
   1228                              else
   1229                                break;
   1230          #ifdef NUCLEO
   1231                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1232          #else
   1233                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D5A   0xA90B             ADD      R1,SP,#+44
   \   00000D5C   0x2000             MOVS     R0,#+0
   \   00000D5E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D62   0x0006             MOVS     R6,R0
   1234          #endif
   1235                              if (Status != HAL_OK)
   \   00000D64   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D66   0x2E00             CMP      R6,#+0
   \   00000D68   0xD101             BNE.N    ??RoadBrd_ParseString_161
   \   00000D6A   0xE004             B.N      ??RoadBrd_ParseString_162
   \                     ??RoadBrd_ParseString_159: (+1)
   \   00000D6C   0xE13F             B.N      ??RoadBrd_ParseString_149
   1236                                return Status;
   \                     ??RoadBrd_ParseString_161: (+1)
   \   00000D6E   0x0030             MOVS     R0,R6
   \   00000D70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D72   0xF003 0xBEFF      B.W      ??RoadBrd_ParseString_4
   1237                              // Now calculate Shunt Voltage.
   1238                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_162: (+1)
   \   00000D76   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D78   0x2D00             CMP      R5,#+0
   \   00000D7A   0xD00C             BEQ.N    ??RoadBrd_ParseString_163
   1239                              {
   1240                                // Yes...Build and Send BLE Response NOW.
   1241                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000D7C   0xAB4E             ADD      R3,SP,#+312
   \   00000D7E   0xAA42             ADD      R2,SP,#+264
   \   00000D80   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_164
   \   00000D84   0xA80B             ADD      R0,SP,#+44
   \   00000D86   0x.... 0x....      BL       sprintf
   1242                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000D8A   0xA80B             ADD      R0,SP,#+44
   \   00000D8C   0x.... 0x....      BL       strlen
   \   00000D90   0xA90B             ADD      R1,SP,#+44
   \   00000D92   0x.... 0x....      BL       BGM111_Transmit
   1243                              }
   1244                              sprintf( (char *)tempBffr2, "     Shunt Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_163: (+1)
   \   00000D96   0xAB4E             ADD      R3,SP,#+312
   \   00000D98   0xAA42             ADD      R2,SP,#+264
   \   00000D9A   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_164+0x4
   \   00000D9E   0xA80B             ADD      R0,SP,#+44
   \   00000DA0   0x.... 0x....      BL       sprintf
   1245                              break;
   \   00000DA4   0xE123             B.N      ??RoadBrd_ParseString_149
   1246          //------------------ C1 Command...Read Current and return results..... 
   1247                            case '1':
   1248                              // Read Current and return results.....
   1249                              Status = RoadBrd_VMonitor_RdCurrent( &CMeasure );
   \                     ??RoadBrd_ParseString_151: (+1)
   \   00000DA6   0xA8D1             ADD      R0,SP,#+836
   \   00000DA8   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent
   \   00000DAC   0x0006             MOVS     R6,R0
   1250                              if (Status == HAL_OK)
   \   00000DAE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DB0   0x2E00             CMP      R6,#+0
   \   00000DB2   0xD103             BNE.N    ??RoadBrd_ParseString_165
   1251                                Status = RoadBrd_VMonitor_RdCurrent_Scaled( &CMeasureScaled );
   \   00000DB4   0xA8CD             ADD      R0,SP,#+820
   \   00000DB6   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent_Scaled
   \   00000DBA   0x0006             MOVS     R6,R0
   1252                              // Is this a BLE Operation?
   1253                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_165: (+1)
   \   00000DBC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DBE   0x2E00             CMP      R6,#+0
   \   00000DC0   0xD12C             BNE.N    ??RoadBrd_ParseString_166
   1254                              {
   1255                                // Send string to UART..
   1256                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Current...\r\n");
   \   00000DC2   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_164+0x8
   \   00000DC6   0xA80B             ADD      R0,SP,#+44
   \   00000DC8   0x.... 0x....      BL       strcpy
   1257          #ifdef NUCLEO
   1258                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1259          #else
   1260                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000DCC   0xA90B             ADD      R1,SP,#+44
   \   00000DCE   0x2000             MOVS     R0,#+0
   \   00000DD0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DD4   0x0006             MOVS     R6,R0
   1261          #endif
   1262                                if (Status != HAL_OK)
   \   00000DD6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DD8   0x2E00             CMP      R6,#+0
   \   00000DDA   0xD003             BEQ.N    ??RoadBrd_ParseString_167
   1263                                  return Status;
   \   00000DDC   0x0030             MOVS     R0,R6
   \   00000DDE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DE0   0xF003 0xBEC8      B.W      ??RoadBrd_ParseString_4
   1264                                // NOW, Build Data String..
   1265                                sprintf( (char *)tempBffr2, "     CURRENT DATA: " );
   \                     ??RoadBrd_ParseString_167: (+1)
   \   00000DE4   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_164+0xC
   \   00000DE8   0xA80B             ADD      R0,SP,#+44
   \   00000DEA   0x.... 0x....      BL       sprintf
   1266                                strcat( (char *)tempBffr2, (char *)CMeasure.Raw );
   \   00000DEE   0xA9D3             ADD      R1,SP,#+844
   \   00000DF0   0x1C49             ADDS     R1,R1,#+1
   \   00000DF2   0xA80B             ADD      R0,SP,#+44
   \   00000DF4   0x.... 0x....      BL       strcat
   1267                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000DF8   0xA142             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000DFA   0xA80B             ADD      R0,SP,#+44
   \   00000DFC   0x.... 0x....      BL       strcat
   1268                              }
   1269                              else
   1270                                break;
   1271          #ifdef NUCLEO
   1272                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1273          #else
   1274                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E00   0xA90B             ADD      R1,SP,#+44
   \   00000E02   0x2000             MOVS     R0,#+0
   \   00000E04   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E08   0x0006             MOVS     R6,R0
   1275          #endif
   1276                              if (Status != HAL_OK)
   \   00000E0A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E0C   0x2E00             CMP      R6,#+0
   \   00000E0E   0xD106             BNE.N    ??RoadBrd_ParseString_168
   \   00000E10   0xE009             B.N      ??RoadBrd_ParseString_169
   \   00000E12   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_0:
   \   00000E14   0x........         DC32     Bypass
   \   00000E18   0x........         DC32     ?_0
   \                     ??RoadBrd_ParseString_166: (+1)
   \   00000E1C   0xE0E7             B.N      ??RoadBrd_ParseString_149
   1277                                return Status;
   \                     ??RoadBrd_ParseString_168: (+1)
   \   00000E1E   0x0030             MOVS     R0,R6
   \   00000E20   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E22   0xF003 0xBEA7      B.W      ??RoadBrd_ParseString_4
   1278                              // Now calculate Current.
   1279                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_169: (+1)
   \   00000E26   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E28   0x2D00             CMP      R5,#+0
   \   00000E2A   0xD00C             BEQ.N    ??RoadBrd_ParseString_170
   1280                              {
   1281                                // Yes...Build and Send BLE Response NOW.
   1282                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_CRNT:%s/%s</STATUS>", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \   00000E2C   0xABCD             ADD      R3,SP,#+820
   \   00000E2E   0xAAD1             ADD      R2,SP,#+836
   \   00000E30   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_171+0x4
   \   00000E34   0xA80B             ADD      R0,SP,#+44
   \   00000E36   0x.... 0x....      BL       sprintf
   1283                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000E3A   0xA80B             ADD      R0,SP,#+44
   \   00000E3C   0x.... 0x....      BL       strlen
   \   00000E40   0xA90B             ADD      R1,SP,#+44
   \   00000E42   0x.... 0x....      BL       BGM111_Transmit
   1284                              }
   1285                              sprintf( (char *)tempBffr2, "     Current: %s/%s\r\n", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \                     ??RoadBrd_ParseString_170: (+1)
   \   00000E46   0xABCD             ADD      R3,SP,#+820
   \   00000E48   0xAAD1             ADD      R2,SP,#+836
   \   00000E4A   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_171+0x8
   \   00000E4E   0xA80B             ADD      R0,SP,#+44
   \   00000E50   0x.... 0x....      BL       sprintf
   1286                              break;
   \   00000E54   0xE0CB             B.N      ??RoadBrd_ParseString_149
   1287          //------------------ C2 Command...Read Power and return results.....     
   1288                            case '2':
   1289                              // Read Power and return results.....
   1290                              Status = RoadBrd_VMonitor_RdPower( &PMeasure );
   \                     ??RoadBrd_ParseString_152: (+1)
   \   00000E56   0xA8C9             ADD      R0,SP,#+804
   \   00000E58   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower
   \   00000E5C   0x0006             MOVS     R6,R0
   1291                              if (Status == HAL_OK)
   \   00000E5E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E60   0x2E00             CMP      R6,#+0
   \   00000E62   0xD103             BNE.N    ??RoadBrd_ParseString_172
   1292                                Status = RoadBrd_VMonitor_RdPower_Scaled( &PMeasureScaled );
   \   00000E64   0xA8C5             ADD      R0,SP,#+788
   \   00000E66   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower_Scaled
   \   00000E6A   0x0006             MOVS     R6,R0
   1293                              // Is this a BLE Operation?
   1294                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_172: (+1)
   \   00000E6C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E6E   0x2E00             CMP      R6,#+0
   \   00000E70   0xD127             BNE.N    ??RoadBrd_ParseString_173
   1295                              {
   1296                                // Send string to UART..
   1297                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Power...\r\n");
   \   00000E72   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_171+0xC
   \   00000E76   0xA80B             ADD      R0,SP,#+44
   \   00000E78   0x.... 0x....      BL       strcpy
   1298          #ifdef NUCLEO
   1299                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1300          #else
   1301                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E7C   0xA90B             ADD      R1,SP,#+44
   \   00000E7E   0x2000             MOVS     R0,#+0
   \   00000E80   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E84   0x0006             MOVS     R6,R0
   1302          #endif
   1303                                if (Status != HAL_OK)
   \   00000E86   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E88   0x2E00             CMP      R6,#+0
   \   00000E8A   0xD003             BEQ.N    ??RoadBrd_ParseString_174
   1304                                  return Status;
   \   00000E8C   0x0030             MOVS     R0,R6
   \   00000E8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E90   0xF003 0xBE70      B.W      ??RoadBrd_ParseString_4
   1305                                // NOW, Build Data String..
   1306                                sprintf( (char *)tempBffr2, "     POWER DATA: " );
   \                     ??RoadBrd_ParseString_174: (+1)
   \   00000E94   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_171+0x10
   \   00000E98   0xA80B             ADD      R0,SP,#+44
   \   00000E9A   0x.... 0x....      BL       sprintf
   1307                                strcat( (char *)tempBffr2, (char *)PMeasure.Raw );
   \   00000E9E   0xA9CB             ADD      R1,SP,#+812
   \   00000EA0   0x1C49             ADDS     R1,R1,#+1
   \   00000EA2   0xA80B             ADD      R0,SP,#+44
   \   00000EA4   0x.... 0x....      BL       strcat
   1308                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000EA8   0xA116             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000EAA   0xA80B             ADD      R0,SP,#+44
   \   00000EAC   0x.... 0x....      BL       strcat
   1309                              }
   1310                              else
   1311                                break;
   1312          #ifdef NUCLEO
   1313                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1314          #else
   1315                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000EB0   0xA90B             ADD      R1,SP,#+44
   \   00000EB2   0x2000             MOVS     R0,#+0
   \   00000EB4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000EB8   0x0006             MOVS     R6,R0
   1316          #endif
   1317                              if (Status != HAL_OK)
   \   00000EBA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000EBC   0x2E00             CMP      R6,#+0
   \   00000EBE   0xD101             BNE.N    ??RoadBrd_ParseString_175
   \   00000EC0   0xE004             B.N      ??RoadBrd_ParseString_176
   \                     ??RoadBrd_ParseString_173: (+1)
   \   00000EC2   0xE094             B.N      ??RoadBrd_ParseString_149
   1318                                return Status;
   \                     ??RoadBrd_ParseString_175: (+1)
   \   00000EC4   0x0030             MOVS     R0,R6
   \   00000EC6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000EC8   0xF003 0xBE54      B.W      ??RoadBrd_ParseString_4
   1319                              // Now calculate Power.
   1320                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_176: (+1)
   \   00000ECC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000ECE   0x2D00             CMP      R5,#+0
   \   00000ED0   0xD00C             BEQ.N    ??RoadBrd_ParseString_177
   1321                              {
   1322                                // Yes...Build and Send BLE Response NOW.
   1323                                sprintf( (char *)tempBffr2, "<STATUS>POWER:%s/%s</STATUS>", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \   00000ED2   0xABC5             ADD      R3,SP,#+788
   \   00000ED4   0xAAC9             ADD      R2,SP,#+804
   \   00000ED6   0xF8DF 0x1D64      LDR.W    R1,??RoadBrd_ParseString_171+0x14
   \   00000EDA   0xA80B             ADD      R0,SP,#+44
   \   00000EDC   0x.... 0x....      BL       sprintf
   1324                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000EE0   0xA80B             ADD      R0,SP,#+44
   \   00000EE2   0x.... 0x....      BL       strlen
   \   00000EE6   0xA90B             ADD      R1,SP,#+44
   \   00000EE8   0x.... 0x....      BL       BGM111_Transmit
   1325                              }
   1326                              sprintf( (char *)tempBffr2, "     Power: %s/%s\r\n", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \                     ??RoadBrd_ParseString_177: (+1)
   \   00000EEC   0xABC5             ADD      R3,SP,#+788
   \   00000EEE   0xAAC9             ADD      R2,SP,#+804
   \   00000EF0   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_171+0x18
   \   00000EF4   0xA80B             ADD      R0,SP,#+44
   \   00000EF6   0x.... 0x....      BL       sprintf
   1327                              break;
   \   00000EFA   0xE078             B.N      ??RoadBrd_ParseString_149
   \                     ??RoadBrd_ParseString_25:
   \   00000EFC   0x........         DC32     ?_1
   \   00000F00   0x........         DC32     ?_2
   \   00000F04   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00000F08   0x........         DC32     ?_3
   \   00000F0C   0x........         DC32     ?_4
   \   00000F10   0x........         DC32     ?_5
   \   00000F14   0x........         DC32     ?_7
   1328          //------------------ C3 Command...Read Bus Voltage and return results.....
   1329                            case '3':
   1330                              // Read Bus Voltage and return results.....
   1331                              Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \                     ??RoadBrd_ParseString_153: (+1)
   \   00000F18   0xA842             ADD      R0,SP,#+264
   \   00000F1A   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000F1E   0x0006             MOVS     R6,R0
   1332                              if (Status == HAL_OK)
   \   00000F20   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F22   0x2E00             CMP      R6,#+0
   \   00000F24   0xD103             BNE.N    ??RoadBrd_ParseString_178
   1333                                Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000F26   0xA84E             ADD      R0,SP,#+312
   \   00000F28   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000F2C   0x0006             MOVS     R6,R0
   1334                                
   1335                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_178: (+1)
   \   00000F2E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F30   0x2E00             CMP      R6,#+0
   \   00000F32   0xD126             BNE.N    ??RoadBrd_ParseString_179
   1336                              {
   1337                                // Send string to UART..
   1338                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000F34   0xF8DF 0x1ADC      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000F38   0xA80B             ADD      R0,SP,#+44
   \   00000F3A   0x.... 0x....      BL       strcpy
   1339          #ifdef NUCLEO
   1340                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1341          #else
   1342                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F3E   0xA90B             ADD      R1,SP,#+44
   \   00000F40   0x2000             MOVS     R0,#+0
   \   00000F42   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F46   0x0006             MOVS     R6,R0
   1343          #endif
   1344                                if (Status != HAL_OK)
   \   00000F48   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F4A   0x2E00             CMP      R6,#+0
   \   00000F4C   0xD003             BEQ.N    ??RoadBrd_ParseString_180
   1345                                  return Status;
   \   00000F4E   0x0030             MOVS     R0,R6
   \   00000F50   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F52   0xF003 0xBE0F      B.W      ??RoadBrd_ParseString_4
   1346                                // NOW, Build Data String..
   1347                                sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_180: (+1)
   \   00000F56   0xF8DF 0x1AC0      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000F5A   0xA80B             ADD      R0,SP,#+44
   \   00000F5C   0x.... 0x....      BL       sprintf
   1348                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000F60   0xA944             ADD      R1,SP,#+272
   \   00000F62   0xA80B             ADD      R0,SP,#+44
   \   00000F64   0x.... 0x....      BL       strcat
   1349                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000F68   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000F6A   0xA80B             ADD      R0,SP,#+44
   \   00000F6C   0x.... 0x....      BL       strcat
   1350                              }
   1351                              else
   1352                                break;
   1353          #ifdef NUCLEO
   1354                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1355          #else
   1356                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F70   0xA90B             ADD      R1,SP,#+44
   \   00000F72   0x2000             MOVS     R0,#+0
   \   00000F74   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F78   0x0006             MOVS     R6,R0
   1357          #endif
   1358                              if (Status != HAL_OK)
   \   00000F7A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F7C   0x2E00             CMP      R6,#+0
   \   00000F7E   0xD101             BNE.N    ??RoadBrd_ParseString_181
   \   00000F80   0xE004             B.N      ??RoadBrd_ParseString_182
   \                     ??RoadBrd_ParseString_179: (+1)
   \   00000F82   0xE034             B.N      ??RoadBrd_ParseString_149
   1359                                return Status;
   \                     ??RoadBrd_ParseString_181: (+1)
   \   00000F84   0x0030             MOVS     R0,R6
   \   00000F86   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F88   0xF003 0xBDF4      B.W      ??RoadBrd_ParseString_4
   1360                              // Now calculate Bus Voltage.
   1361                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_182: (+1)
   \   00000F8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000F8E   0x2D00             CMP      R5,#+0
   \   00000F90   0xD00C             BEQ.N    ??RoadBrd_ParseString_183
   1362                              {
   1363                                // Yes...Build and Send BLE Response NOW.
   1364                                sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000F92   0xAB4E             ADD      R3,SP,#+312
   \   00000F94   0xAA42             ADD      R2,SP,#+264
   \   00000F96   0xF8DF 0x1AEC      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000F9A   0xA80B             ADD      R0,SP,#+44
   \   00000F9C   0x.... 0x....      BL       sprintf
   1365                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FA0   0xA80B             ADD      R0,SP,#+44
   \   00000FA2   0x.... 0x....      BL       strlen
   \   00000FA6   0xA90B             ADD      R1,SP,#+44
   \   00000FA8   0x.... 0x....      BL       BGM111_Transmit
   1366                              }
   1367                              sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_183: (+1)
   \   00000FAC   0xAB4E             ADD      R3,SP,#+312
   \   00000FAE   0xAA42             ADD      R2,SP,#+264
   \   00000FB0   0xF8DF 0x1B08      LDR.W    R1,??RoadBrd_ParseString_148
   \   00000FB4   0xA80B             ADD      R0,SP,#+44
   \   00000FB6   0x.... 0x....      BL       sprintf
   1368                              break;
   \   00000FBA   0xE018             B.N      ??RoadBrd_ParseString_149
   \                     ??RoadBrd_ParseString_32:
   \   00000FBC   0x........         DC32     ?_8
   \   00000FC0   0x........         DC32     ?_9
   \   00000FC4   0x........         DC32     ?_10
   1369                            default:
   1370                              // Is this a BLE Operation?
   1371                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_154: (+1)
   \   00000FC8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000FCA   0x2D00             CMP      R5,#+0
   \   00000FCC   0xD00A             BEQ.N    ??RoadBrd_ParseString_184
   1372                              {
   1373                                // Yes...Build and Send BLE Response NOW.
   1374                                strcpy( (char *)tempBffr2, "<STATUS>CMD_C_SYNTAX</STATUS>");
   \   00000FCE   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_185
   \   00000FD2   0xA80B             ADD      R0,SP,#+44
   \   00000FD4   0x.... 0x....      BL       strcpy
   1375                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FD8   0xA80B             ADD      R0,SP,#+44
   \   00000FDA   0x.... 0x....      BL       strlen
   \   00000FDE   0xA90B             ADD      R1,SP,#+44
   \   00000FE0   0x.... 0x....      BL       BGM111_Transmit
   1376                              }
   1377                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_184: (+1)
   \   00000FE4   0xF8DF 0x147C      LDR.W    R1,??RoadBrd_ParseString_81+0x8
   \   00000FE8   0xA80B             ADD      R0,SP,#+44
   \   00000FEA   0x.... 0x....      BL       strcpy
   1378                              break;
   1379                          } //EndSwitch
   1380                        } //EndElse (Size == 1)
   1381                        break;
   \                     ??RoadBrd_ParseString_149: (+1)
   \   00000FEE   0xF003 0xBD42      B.W      ??RoadBrd_ParseString_26
   \   00000FF2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_35:
   \   00000FF4   0x........         DC32     ?_11
   \   00000FF8   0x........         DC32     ?_12
   \   00000FFC   0x........         DC32     ?_13
   \   00001000   0x........         DC32     ?_14
   \   00001004   0x........         DC32     ?_15
   \   00001008   0x........         DC32     ?_16
   1382          //**************************************************************************************************
   1383                      case 'D':
   1384                        // Read Humidity. 
   1385                        if (Size == 1)
   \                     ??RoadBrd_ParseString_15: (+1)
   \   0000100C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001010   0x2801             CMP      R0,#+1
   \   00001012   0xD16D             BNE.N    ??RoadBrd_ParseString_186
   1386                        {
   1387          //------------------ D Command: Read Humidity Values      
   1388                          // Read Humidity Sensor sensor and return Humidity results....
   1389                          Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \   00001014   0xA849             ADD      R0,SP,#+292
   \   00001016   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   0000101A   0x0006             MOVS     R6,R0
   1390                          if (Status == HAL_OK)
   \   0000101C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000101E   0x2E00             CMP      R6,#+0
   \   00001020   0xD104             BNE.N    ??RoadBrd_ParseString_187
   1391                            Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasureScaled );
   \   00001022   0xF50D 0x608A      ADD      R0,SP,#+1104
   \   00001026   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   0000102A   0x0006             MOVS     R6,R0
   1392                          // Is this a BLE Operation?
   1393                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_187: (+1)
   \   0000102C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000102E   0x2E00             CMP      R6,#+0
   \   00001030   0xD126             BNE.N    ??RoadBrd_ParseString_188
   1394                          {
   1395                            // Send string to UART..
   1396                            strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001032   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001036   0xA80B             ADD      R0,SP,#+44
   \   00001038   0x.... 0x....      BL       strcpy
   1397          #ifdef NUCLEO
   1398                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1399          #else
   1400                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000103C   0xA90B             ADD      R1,SP,#+44
   \   0000103E   0x2000             MOVS     R0,#+0
   \   00001040   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001044   0x0006             MOVS     R6,R0
   1401          #endif
   1402                            if (Status != HAL_OK)
   \   00001046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001048   0x2E00             CMP      R6,#+0
   \   0000104A   0xD003             BEQ.N    ??RoadBrd_ParseString_189
   1403                              return Status;
   \   0000104C   0x0030             MOVS     R0,R6
   \   0000104E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001050   0xF003 0xBD90      B.W      ??RoadBrd_ParseString_4
   1404                            // NOW, Build Data String..
   1405                            sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_189: (+1)
   \   00001054   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_190
   \   00001058   0xA80B             ADD      R0,SP,#+44
   \   0000105A   0x.... 0x....      BL       sprintf
   1406                            strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   0000105E   0xA94B             ADD      R1,SP,#+300
   \   00001060   0xA80B             ADD      R0,SP,#+44
   \   00001062   0x.... 0x....      BL       strcat
   1407                            strcat( (char *)tempBffr2, "\r\n" );
   \   00001066   0xA181             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001068   0xA80B             ADD      R0,SP,#+44
   \   0000106A   0x.... 0x....      BL       strcat
   1408                          }
   1409                          else
   1410                            break;
   1411          #ifdef NUCLEO
   1412                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1413          #else
   1414                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000106E   0xA90B             ADD      R1,SP,#+44
   \   00001070   0x2000             MOVS     R0,#+0
   \   00001072   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001076   0x0006             MOVS     R6,R0
   1415          #endif
   1416                          if (Status != HAL_OK)
   \   00001078   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000107A   0x2E00             CMP      R6,#+0
   \   0000107C   0xD102             BNE.N    ??RoadBrd_ParseString_191
   \   0000107E   0xE005             B.N      ??RoadBrd_ParseString_192
   \                     ??RoadBrd_ParseString_188: (+1)
   \   00001080   0xF003 0xBCF9      B.W      ??RoadBrd_ParseString_26
   1417                            return Status;
   \                     ??RoadBrd_ParseString_191: (+1)
   \   00001084   0x0030             MOVS     R0,R6
   \   00001086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001088   0xF003 0xBD74      B.W      ??RoadBrd_ParseString_4
   1418                          // NOW, Build Data String..
   1419                          sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_192: (+1)
   \   0000108C   0xF8BD 0x2134      LDRH     R2,[SP, #+308]
   \   00001090   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   00001094   0xA80B             ADD      R0,SP,#+44
   \   00001096   0x.... 0x....      BL       sprintf
   1420          #ifdef NUCLEO
   1421                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1422          #else
   1423                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000109A   0xA90B             ADD      R1,SP,#+44
   \   0000109C   0x2000             MOVS     R0,#+0
   \   0000109E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000010A2   0x0006             MOVS     R6,R0
   1424          #endif
   1425                          if (Status != HAL_OK)
   \   000010A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010A6   0x2E00             CMP      R6,#+0
   \   000010A8   0xD003             BEQ.N    ??RoadBrd_ParseString_193
   1426                            return Status;
   \   000010AA   0x0030             MOVS     R0,R6
   \   000010AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000010AE   0xF003 0xBD61      B.W      ??RoadBrd_ParseString_4
   1427                          // Now calculate Celcius and Farenheit Temp.
   1428                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_193: (+1)
   \   000010B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000010B4   0x2D00             CMP      R5,#+0
   \   000010B6   0xD00D             BEQ.N    ??RoadBrd_ParseString_194
   1429                          {
   1430                            // Yes...Build and Send BLE Response NOW.
   1431                            sprintf( (char *)tempBffr2, "<STATUS>HUMIDITY:%s/%s</STATUS>", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \   000010B8   0xF50D 0x638A      ADD      R3,SP,#+1104
   \   000010BC   0xAA49             ADD      R2,SP,#+292
   \   000010BE   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_190+0x8
   \   000010C2   0xA80B             ADD      R0,SP,#+44
   \   000010C4   0x.... 0x....      BL       sprintf
   1432                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000010C8   0xA80B             ADD      R0,SP,#+44
   \   000010CA   0x.... 0x....      BL       strlen
   \   000010CE   0xA90B             ADD      R1,SP,#+44
   \   000010D0   0x.... 0x....      BL       BGM111_Transmit
   1433                          }
   1434                          sprintf( (char *)tempBffr2, "     Humidity: %s/%s\r\n", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \                     ??RoadBrd_ParseString_194: (+1)
   \   000010D4   0xF50D 0x638A      ADD      R3,SP,#+1104
   \   000010D8   0xAA49             ADD      R2,SP,#+292
   \   000010DA   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_190+0xC
   \   000010DE   0xA80B             ADD      R0,SP,#+44
   \   000010E0   0x.... 0x....      BL       sprintf
   \   000010E4   0xE10E             B.N      ??RoadBrd_ParseString_195
   \   000010E6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_40:
   \   000010E8   0x........         DC32     ?_17
   \   000010EC   0x........         DC32     ?_19
   1435                        }
   1436                        else
   1437                        {
   1438                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_186: (+1)
   \   000010F0   0x7860             LDRB     R0,[R4, #+1]
   \   000010F2   0x2830             CMP      R0,#+48
   \   000010F4   0xD022             BEQ.N    ??RoadBrd_ParseString_196
   \   000010F6   0x2831             CMP      R0,#+49
   \   000010F8   0xF000 0x808C      BEQ.W    ??RoadBrd_ParseString_197
   \   000010FC   0x2849             CMP      R0,#+73
   \   000010FE   0xF040 0x8101      BNE.W    ??RoadBrd_ParseString_195
   1439                          {
   1440          //------------------ DI Command: Initialize Humidity Sensor
   1441                            case 'I':
   1442                              // Initialize Humidity Sensor.
   1443                              Status = RoadBrd_HumidityInit();
   \                     ??RoadBrd_ParseString_198: (+1)
   \   00001102   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   00001106   0x0006             MOVS     R6,R0
   1444                              // Is this a BLE Operation?
   1445                              if ( BLE_Flag )
   \   00001108   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000110A   0x2D00             CMP      R5,#+0
   \   0000110C   0xD009             BEQ.N    ??RoadBrd_ParseString_199
   1446                              {
   1447                                // Yes...Build and Send BLE Response NOW.
   1448                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000110E   0x492B             LDR.N    R1,??RoadBrd_ParseString_50+0x8
   \   00001110   0xA80B             ADD      R0,SP,#+44
   \   00001112   0x.... 0x....      BL       strcpy
   1449                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001116   0xA80B             ADD      R0,SP,#+44
   \   00001118   0x.... 0x....      BL       strlen
   \   0000111C   0xA90B             ADD      R1,SP,#+44
   \   0000111E   0x.... 0x....      BL       BGM111_Transmit
   1450                              }
   1451          
   1452                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_199: (+1)
   \   00001122   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001124   0x2E00             CMP      R6,#+0
   \   00001126   0xD104             BNE.N    ??RoadBrd_ParseString_200
   1453                              {
   1454                                strcpy( (char *)tempBffr2, "Humidity Sensor: Initialization Complete.\r\n");;
   \   00001128   0xF8DF 0x1D34      LDR.W    R1,??RoadBrd_ParseString_190+0x10
   \   0000112C   0xA80B             ADD      R0,SP,#+44
   \   0000112E   0x.... 0x....      BL       strcpy
   1455                              }
   1456                              break;
   \                     ??RoadBrd_ParseString_200: (+1)
   \   00001132   0xE0E7             B.N      ??RoadBrd_ParseString_195
   \                     ??RoadBrd_ParseString_48:
   \   00001134   0x........         DC32     ?_20
   \   00001138   0x........         DC32     ?_21
   1457          //------------------ D0 Command...Read Humidity Values.....
   1458                            case '0':
   1459                              // Read Humidity Sensor sensor and return Humidity results....
   1460                              Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \                     ??RoadBrd_ParseString_196: (+1)
   \   0000113C   0xA849             ADD      R0,SP,#+292
   \   0000113E   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00001142   0x0006             MOVS     R6,R0
   1461                              // Is this a BLE Operation?
   1462                              if ( BLE_Flag )
   \   00001144   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001146   0x2D00             CMP      R5,#+0
   \   00001148   0xD009             BEQ.N    ??RoadBrd_ParseString_201
   1463                              {
   1464                                // Yes...Build and Send BLE Response NOW.
   1465                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000114A   0x491C             LDR.N    R1,??RoadBrd_ParseString_50+0x8
   \   0000114C   0xA80B             ADD      R0,SP,#+44
   \   0000114E   0x.... 0x....      BL       strcpy
   1466                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001152   0xA80B             ADD      R0,SP,#+44
   \   00001154   0x.... 0x....      BL       strlen
   \   00001158   0xA90B             ADD      R1,SP,#+44
   \   0000115A   0x.... 0x....      BL       BGM111_Transmit
   1467                              }
   1468          
   1469                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_201: (+1)
   \   0000115E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001160   0x2E00             CMP      R6,#+0
   \   00001162   0xD131             BNE.N    ??RoadBrd_ParseString_202
   1470                              {
   1471                                // Send string to UART..
   1472                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001164   0xF8DF 0x1C78      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001168   0xA80B             ADD      R0,SP,#+44
   \   0000116A   0x.... 0x....      BL       strcpy
   1473          #ifdef NUCLEO
   1474                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1475          #else
   1476                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000116E   0xA90B             ADD      R1,SP,#+44
   \   00001170   0x2000             MOVS     R0,#+0
   \   00001172   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001176   0x0006             MOVS     R6,R0
   1477          #endif
   1478                                if (Status != HAL_OK)
   \   00001178   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000117A   0x2E00             CMP      R6,#+0
   \   0000117C   0xD003             BEQ.N    ??RoadBrd_ParseString_203
   1479                                  return Status;
   \   0000117E   0x0030             MOVS     R0,R6
   \   00001180   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001182   0xF003 0xBCF7      B.W      ??RoadBrd_ParseString_4
   1480                                // NOW, Build Data String..
   1481                                sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_203: (+1)
   \   00001186   0xF8DF 0x1CC8      LDR.W    R1,??RoadBrd_ParseString_190
   \   0000118A   0xA80B             ADD      R0,SP,#+44
   \   0000118C   0x.... 0x....      BL       sprintf
   1482                                strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001190   0xA94B             ADD      R1,SP,#+300
   \   00001192   0xA80B             ADD      R0,SP,#+44
   \   00001194   0x.... 0x....      BL       strcat
   1483                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001198   0xA134             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000119A   0xA80B             ADD      R0,SP,#+44
   \   0000119C   0x.... 0x....      BL       strcat
   1484                              }
   1485                              else
   1486                                break;
   1487          #ifdef NUCLEO
   1488                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1489          #else
   1490                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011A0   0xA90B             ADD      R1,SP,#+44
   \   000011A2   0x2000             MOVS     R0,#+0
   \   000011A4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011A8   0x0006             MOVS     R6,R0
   1491          #endif
   1492                              if (Status != HAL_OK)
   \   000011AA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011AC   0x2E00             CMP      R6,#+0
   \   000011AE   0xD10C             BNE.N    ??RoadBrd_ParseString_204
   \   000011B0   0xE00F             B.N      ??RoadBrd_ParseString_205
   \   000011B2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_50:
   \   000011B4   0x........         DC32     ?_22
   \   000011B8   0x........         DC32     ?_23
   \   000011BC   0x........         DC32     ?_24
   \   000011C0   0x........         DC32     ?_25
   \   000011C4   0x........         DC32     ?_26
   \                     ??RoadBrd_ParseString_202: (+1)
   \   000011C8   0xE09C             B.N      ??RoadBrd_ParseString_195
   1493                                return Status;
   \                     ??RoadBrd_ParseString_204: (+1)
   \   000011CA   0x0030             MOVS     R0,R6
   \   000011CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011CE   0xF003 0xBCD1      B.W      ??RoadBrd_ParseString_4
   1494                              // NOW, Build Data String..
   1495                              sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_205: (+1)
   \   000011D2   0xF8BD 0x2134      LDRH     R2,[SP, #+308]
   \   000011D6   0xF8DF 0x1C7C      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   000011DA   0xA80B             ADD      R0,SP,#+44
   \   000011DC   0x.... 0x....      BL       sprintf
   1496          #ifdef NUCLEO
   1497                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1498          #else
   1499                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011E0   0xA90B             ADD      R1,SP,#+44
   \   000011E2   0x2000             MOVS     R0,#+0
   \   000011E4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011E8   0x0006             MOVS     R6,R0
   1500          #endif
   1501                              if (Status != HAL_OK)
   \   000011EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011EC   0x2E00             CMP      R6,#+0
   \   000011EE   0xD003             BEQ.N    ??RoadBrd_ParseString_206
   1502                                return Status;
   \   000011F0   0x0030             MOVS     R0,R6
   \   000011F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011F4   0xF003 0xBCBE      B.W      ??RoadBrd_ParseString_4
   1503                              // Now calculate Humidity.
   1504                              sprintf( (char *)tempBffr2, "     Humidity: " );
   \                     ??RoadBrd_ParseString_206: (+1)
   \   000011F8   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_207
   \   000011FC   0xA80B             ADD      R0,SP,#+44
   \   000011FE   0x.... 0x....      BL       sprintf
   1505                              strcat( (char *)tempBffr2, (char *)HMeasure.Humidity );
   \   00001202   0xA949             ADD      R1,SP,#+292
   \   00001204   0xA80B             ADD      R0,SP,#+44
   \   00001206   0x.... 0x....      BL       strcat
   1506                              strcat( (char *)tempBffr2, "\r\n" );
   \   0000120A   0xA118             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000120C   0xA80B             ADD      R0,SP,#+44
   \   0000120E   0x.... 0x....      BL       strcat
   1507                              break;
   \   00001212   0xE077             B.N      ??RoadBrd_ParseString_195
   1508          //------------------ D1 Command...Read Temperature Values..... 
   1509                            case '1':
   1510                              // Read Humidity Sensor sensor and return Temperature results....
   1511                              Status = RoadBrd_Humidity_ReadTemperature( &TMeasure );
   \                     ??RoadBrd_ParseString_197: (+1)
   \   00001214   0xA83C             ADD      R0,SP,#+240
   \   00001216   0x.... 0x....      BL       RoadBrd_Humidity_ReadTemperature
   \   0000121A   0x0006             MOVS     R6,R0
   1512                              // Is this a BLE Operation?
   1513                              if ( BLE_Flag )
   \   0000121C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000121E   0x2D00             CMP      R5,#+0
   \   00001220   0xD00A             BEQ.N    ??RoadBrd_ParseString_208
   1514                              {
   1515                                // Yes...Build and Send BLE Response NOW.
   1516                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001222   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001226   0xA80B             ADD      R0,SP,#+44
   \   00001228   0x.... 0x....      BL       strcpy
   1517                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000122C   0xA80B             ADD      R0,SP,#+44
   \   0000122E   0x.... 0x....      BL       strlen
   \   00001232   0xA90B             ADD      R1,SP,#+44
   \   00001234   0x.... 0x....      BL       BGM111_Transmit
   1518                              }
   1519          
   1520                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_208: (+1)
   \   00001238   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000123A   0x2E00             CMP      R6,#+0
   \   0000123C   0xD136             BNE.N    ??RoadBrd_ParseString_209
   1521                              {
   1522                                // Send string to UART..
   1523                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   0000123E   0xF8DF 0x1BA0      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001242   0xA80B             ADD      R0,SP,#+44
   \   00001244   0x.... 0x....      BL       strcpy
   1524          #ifdef NUCLEO
   1525                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1526          #else
   1527                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001248   0xA90B             ADD      R1,SP,#+44
   \   0000124A   0x2000             MOVS     R0,#+0
   \   0000124C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001250   0x0006             MOVS     R6,R0
   1528          #endif
   1529                                if (Status != HAL_OK)
   \   00001252   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001254   0x2E00             CMP      R6,#+0
   \   00001256   0xD013             BEQ.N    ??RoadBrd_ParseString_210
   1530                                  return Status;
   \   00001258   0x0030             MOVS     R0,R6
   \   0000125A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000125C   0xF003 0xBC8A      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_63:
   \   00001260   0x........         DC32     ?_27
   \   00001264   0x........         DC32     ?_28
   \   00001268   0x........         DC32     ?_29
   \   0000126C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001270   0x........         DC32     ?_30
   \   00001274   0x........         DC32     ?_31
   \   00001278   0x........         DC32     ?_32
   \   0000127C   0x........         DC32     ?_33
   1531                                // NOW, Build Data String..
   1532                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_210: (+1)
   \   00001280   0x4937             LDR.N    R1,??RoadBrd_ParseString_71+0x4
   \   00001282   0xA80B             ADD      R0,SP,#+44
   \   00001284   0x.... 0x....      BL       sprintf
   1533                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00001288   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   0000128C   0xA80B             ADD      R0,SP,#+44
   \   0000128E   0x.... 0x....      BL       strcat
   1534                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001292   0xA1B6             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001294   0xA80B             ADD      R0,SP,#+44
   \   00001296   0x.... 0x....      BL       strcat
   1535                              }
   1536                              else
   1537                                break;
   1538          #ifdef NUCLEO
   1539                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1540          #else
   1541                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000129A   0xA90B             ADD      R1,SP,#+44
   \   0000129C   0x2000             MOVS     R0,#+0
   \   0000129E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012A2   0x0006             MOVS     R6,R0
   1542          #endif
   1543                              if (Status != HAL_OK)
   \   000012A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012A6   0x2E00             CMP      R6,#+0
   \   000012A8   0xD101             BNE.N    ??RoadBrd_ParseString_211
   \   000012AA   0xE004             B.N      ??RoadBrd_ParseString_212
   \                     ??RoadBrd_ParseString_209: (+1)
   \   000012AC   0xE02A             B.N      ??RoadBrd_ParseString_195
   1544                                return Status;
   \                     ??RoadBrd_ParseString_211: (+1)
   \   000012AE   0x0030             MOVS     R0,R6
   \   000012B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012B2   0xF003 0xBC5F      B.W      ??RoadBrd_ParseString_4
   1545                              // NOW, Build Data String..
   1546                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_212: (+1)
   \   000012B6   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000012BA   0x492A             LDR.N    R1,??RoadBrd_ParseString_71+0x8
   \   000012BC   0xA80B             ADD      R0,SP,#+44
   \   000012BE   0x.... 0x....      BL       sprintf
   1547          #ifdef NUCLEO
   1548                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1549          #else
   1550                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000012C2   0xA90B             ADD      R1,SP,#+44
   \   000012C4   0x2000             MOVS     R0,#+0
   \   000012C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012CA   0x0006             MOVS     R6,R0
   1551          #endif
   1552                              if (Status != HAL_OK)
   \   000012CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012CE   0x2E00             CMP      R6,#+0
   \   000012D0   0xD003             BEQ.N    ??RoadBrd_ParseString_213
   1553                                return Status;
   \   000012D2   0x0030             MOVS     R0,R6
   \   000012D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012D6   0xF003 0xBC4D      B.W      ??RoadBrd_ParseString_4
   1554                              // Now calculate Celcius and Farenheit Temp.
   1555                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_213: (+1)
   \   000012DA   0x494B             LDR.N    R1,??RoadBrd_ParseString_78
   \   000012DC   0xA80B             ADD      R0,SP,#+44
   \   000012DE   0x.... 0x....      BL       sprintf
   1556                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000012E2   0xA93C             ADD      R1,SP,#+240
   \   000012E4   0xA80B             ADD      R0,SP,#+44
   \   000012E6   0x.... 0x....      BL       strcat
   1557                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000012EA   0x4948             LDR.N    R1,??RoadBrd_ParseString_78+0x4
   \   000012EC   0xA80B             ADD      R0,SP,#+44
   \   000012EE   0x.... 0x....      BL       strcat
   1558                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   000012F2   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   000012F6   0xA80B             ADD      R0,SP,#+44
   \   000012F8   0x.... 0x....      BL       strcat
   1559                              strcat( (char *)tempBffr2, "\r\n" );
   \   000012FC   0xA19B             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000012FE   0xA80B             ADD      R0,SP,#+44
   \   00001300   0x.... 0x....      BL       strcat
   1560                              break;
   1561                          } //EndSwitch
   1562                        } //EndElse (Size == 1)
   1563                        break;
   \                     ??RoadBrd_ParseString_195: (+1)
   \   00001304   0xF003 0xBBB7      B.W      ??RoadBrd_ParseString_26
   1564          //**************************************************************************************************
   1565                      case 'E':
   1566                        // Read Temp and Pressure. 
   1567                        // Is this a BLE Operation?
   1568                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_16: (+1)
   \   00001308   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000130A   0x2D00             CMP      R5,#+0
   \   0000130C   0xD00A             BEQ.N    ??RoadBrd_ParseString_214
   1569                        {
   1570                          // Yes...Build and Send BLE Response NOW.
   1571                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000130E   0xF8DF 0x1CE8      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001312   0xA80B             ADD      R0,SP,#+44
   \   00001314   0x.... 0x....      BL       strcpy
   1572                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001318   0xA80B             ADD      R0,SP,#+44
   \   0000131A   0x.... 0x....      BL       strlen
   \   0000131E   0xA90B             ADD      R1,SP,#+44
   \   00001320   0x.... 0x....      BL       BGM111_Transmit
   1573                        }
   1574                        
   1575                        strcpy( (char *)tempBffr2, "TBD: Read Temp and Pressure NOT IMPLEMENTED\r\n");
   \                     ??RoadBrd_ParseString_214: (+1)
   \   00001324   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_215
   \   00001328   0xA80B             ADD      R0,SP,#+44
   \   0000132A   0x.... 0x....      BL       strcpy
   1576                        break;
   \   0000132E   0xF003 0xBBA2      B.W      ??RoadBrd_ParseString_26
   1577          //**************************************************************************************************
   1578                      case 'F':
   1579                        // NO ACTION. 
   1580                        // Is this a BLE Operation?
   1581                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_17: (+1)
   \   00001332   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001334   0x2D00             CMP      R5,#+0
   \   00001336   0xD00A             BEQ.N    ??RoadBrd_ParseString_216
   1582                        {
   1583                          // Yes...Build and Send BLE Response NOW.
   1584                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001338   0xF8DF 0x1CBC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000133C   0xA80B             ADD      R0,SP,#+44
   \   0000133E   0x.... 0x....      BL       strcpy
   1585                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001342   0xA80B             ADD      R0,SP,#+44
   \   00001344   0x.... 0x....      BL       strlen
   \   00001348   0xA90B             ADD      R1,SP,#+44
   \   0000134A   0x.... 0x....      BL       BGM111_Transmit
   1586                        }
   1587                        
   1588                        strcpy( (char *)tempBffr2, "NO Action...(0x00).\r\n");
   \                     ??RoadBrd_ParseString_216: (+1)
   \   0000134E   0xF8DF 0x1D58      LDR.W    R1,??RoadBrd_ParseString_215+0x4
   \   00001352   0xA80B             ADD      R0,SP,#+44
   \   00001354   0x.... 0x....      BL       strcpy
   1589                        break;
   \   00001358   0xF003 0xBB8D      B.W      ??RoadBrd_ParseString_26
   \                     ??RoadBrd_ParseString_71:
   \   0000135C   0x........         DC32     ?_34
   \   00001360   0x........         DC32     ?_35
   \   00001364   0x........         DC32     ?_36
   1590          //**************************************************************************************************
   1591                      case 'G':
   1592                        // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   1593                        Status = RoadBrd_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_18: (+1)
   \   00001368   0xA83C             ADD      R0,SP,#+240
   \   0000136A   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   0000136E   0x0006             MOVS     R6,R0
   1594                        if (Status == HAL_OK)
   \   00001370   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001372   0x2E00             CMP      R6,#+0
   \   00001374   0xD103             BNE.N    ??RoadBrd_ParseString_217
   1595                          Status = RoadBrd_ReadTemp_Scaled( &TMeasureScaled );
   \   00001376   0xA8BF             ADD      R0,SP,#+764
   \   00001378   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   0000137C   0x0006             MOVS     R6,R0
   1596                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_217: (+1)
   \   0000137E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001380   0x2E00             CMP      R6,#+0
   \   00001382   0xD127             BNE.N    ??RoadBrd_ParseString_218
   1597                        {
   1598                          // Send string to UART..
   1599                          strcpy( (char *)tempBffr2, "TEMP SENSOR...\r\n");
   \   00001384   0xF8DF 0x1D24      LDR.W    R1,??RoadBrd_ParseString_215+0x8
   \   00001388   0xA80B             ADD      R0,SP,#+44
   \   0000138A   0x.... 0x....      BL       strcpy
   1600          #ifdef NUCLEO
   1601                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1602          #else
   1603                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000138E   0xA90B             ADD      R1,SP,#+44
   \   00001390   0x2000             MOVS     R0,#+0
   \   00001392   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001396   0x0006             MOVS     R6,R0
   1604          #endif
   1605                          if (Status != HAL_OK)
   \   00001398   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000139A   0x2E00             CMP      R6,#+0
   \   0000139C   0xD003             BEQ.N    ??RoadBrd_ParseString_219
   1606                            return Status;
   \   0000139E   0x0030             MOVS     R0,R6
   \   000013A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013A2   0xF003 0xBBE7      B.W      ??RoadBrd_ParseString_4
   1607                          // NOW, Build Data String..
   1608                          sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_219: (+1)
   \   000013A6   0xF8DF 0x1D08      LDR.W    R1,??RoadBrd_ParseString_215+0xC
   \   000013AA   0xA80B             ADD      R0,SP,#+44
   \   000013AC   0x.... 0x....      BL       sprintf
   1609                          strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   000013B0   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   000013B4   0xA80B             ADD      R0,SP,#+44
   \   000013B6   0x.... 0x....      BL       strcat
   1610                          strcat( (char *)tempBffr2, "\r\n" );
   \   000013BA   0xA16C             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000013BC   0xA80B             ADD      R0,SP,#+44
   \   000013BE   0x.... 0x....      BL       strcat
   1611                        }
   1612                        else
   1613                          break;
   1614          #ifdef NUCLEO
   1615                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1616          #else
   1617                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013C2   0xA90B             ADD      R1,SP,#+44
   \   000013C4   0x2000             MOVS     R0,#+0
   \   000013C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013CA   0x0006             MOVS     R6,R0
   1618          #endif
   1619                        if (Status != HAL_OK)
   \   000013CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013CE   0x2E00             CMP      R6,#+0
   \   000013D0   0xD102             BNE.N    ??RoadBrd_ParseString_220
   \   000013D2   0xE005             B.N      ??RoadBrd_ParseString_221
   \                     ??RoadBrd_ParseString_218: (+1)
   \   000013D4   0xF003 0xBB4F      B.W      ??RoadBrd_ParseString_26
   1620                          return Status;
   \                     ??RoadBrd_ParseString_220: (+1)
   \   000013D8   0x0030             MOVS     R0,R6
   \   000013DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013DC   0xF003 0xBBCA      B.W      ??RoadBrd_ParseString_4
   1621                        // NOW, Build Data String..
   1622                        sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_221: (+1)
   \   000013E0   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000013E4   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_222
   \   000013E8   0xA80B             ADD      R0,SP,#+44
   \   000013EA   0x.... 0x....      BL       sprintf
   1623          #ifdef NUCLEO
   1624                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1625          #else
   1626                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013EE   0xA90B             ADD      R1,SP,#+44
   \   000013F0   0x2000             MOVS     R0,#+0
   \   000013F2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013F6   0x0006             MOVS     R6,R0
   1627          #endif
   1628                        if (Status != HAL_OK)
   \   000013F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013FA   0x2E00             CMP      R6,#+0
   \   000013FC   0xD008             BEQ.N    ??RoadBrd_ParseString_223
   1629                          return Status;
   \   000013FE   0x0030             MOVS     R0,R6
   \   00001400   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001402   0xF003 0xBBB7      B.W      ??RoadBrd_ParseString_4
   \   00001406   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_78:
   \   00001408   0x........         DC32     ?_37
   \   0000140C   0x........         DC32     ?_38
   1630                        // Is this a BLE Operation?
   1631                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_223: (+1)
   \   00001410   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001412   0x2D00             CMP      R5,#+0
   \   00001414   0xD012             BEQ.N    ??RoadBrd_ParseString_224
   1632                        {
   1633                          // Yes...Build and Send BLE Response NOW.
   1634                          sprintf( (char *)tempBffr2, "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>", 
   1635                                  (char *)TMeasure.TempC, 
   1636                                  (char *)TMeasureScaled.TempC,
   1637                                  (char *)TMeasure.TempF, 
   1638                                  (char *)TMeasureScaled.TempF);
   \   00001416   0xA8C0             ADD      R0,SP,#+768
   \   00001418   0x1CC0             ADDS     R0,R0,#+3
   \   0000141A   0x9001             STR      R0,[SP, #+4]
   \   0000141C   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001420   0x9000             STR      R0,[SP, #+0]
   \   00001422   0xABBF             ADD      R3,SP,#+764
   \   00001424   0xAA3C             ADD      R2,SP,#+240
   \   00001426   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_225
   \   0000142A   0xA80B             ADD      R0,SP,#+44
   \   0000142C   0x.... 0x....      BL       sprintf
   1639                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001430   0xA80B             ADD      R0,SP,#+44
   \   00001432   0x.... 0x....      BL       strlen
   \   00001436   0xA90B             ADD      R1,SP,#+44
   \   00001438   0x.... 0x....      BL       BGM111_Transmit
   1640                        }
   1641                        
   1642                        // Now calculate Celcius and Farenheit Temp.
   1643                        sprintf( (char *)tempBffr2, "     TempC: %s/%s     TempF: %s/%s\r\n", 
   1644                                (char *)TMeasure.TempC, 
   1645                                (char *)TMeasureScaled.TempC,
   1646                                (char *)TMeasure.TempF, 
   1647                                (char *)TMeasureScaled.TempF);
   \                     ??RoadBrd_ParseString_224: (+1)
   \   0000143C   0xA8C0             ADD      R0,SP,#+768
   \   0000143E   0x1CC0             ADDS     R0,R0,#+3
   \   00001440   0x9001             STR      R0,[SP, #+4]
   \   00001442   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001446   0x9000             STR      R0,[SP, #+0]
   \   00001448   0xABBF             ADD      R3,SP,#+764
   \   0000144A   0xAA3C             ADD      R2,SP,#+240
   \   0000144C   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_225+0x4
   \   00001450   0xA80B             ADD      R0,SP,#+44
   \   00001452   0x.... 0x....      BL       sprintf
   1648                        break;
   \   00001456   0xF003 0xBB0E      B.W      ??RoadBrd_ParseString_26
   \   0000145A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_81:
   \   0000145C   0x........         DC32     ?_39
   \   00001460   0x........         DC32     ?_40
   \   00001464   0x........         DC32     ?_41
   1649          //**************************************************************************************************
   1650                      case 'H':
   1651                        // RGB Color Light Sensor U15(ISL91250).  Addr: 0x88
   1652                        if (Size == 1)
   \                     ??RoadBrd_ParseString_19: (+1)
   \   00001468   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000146C   0x2801             CMP      R0,#+1
   \   0000146E   0xF040 0x8081      BNE.W    ??RoadBrd_ParseString_226
   1653                        {
   1654          //------------------ H Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1655                          // 1. Time to send Command and collect status.
   1656                          Status = RoadBrd_RGBReadValues( &RGBValues );
   \   00001472   0xA8B5             ADD      R0,SP,#+724
   \   00001474   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   00001478   0x0006             MOVS     R6,R0
   1657                          if (Status == HAL_OK)
   \   0000147A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000147C   0x2E00             CMP      R6,#+0
   \   0000147E   0xD177             BNE.N    ??RoadBrd_ParseString_227
   1658                          {
   1659                            // Send string to UART..
   1660                            strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001480   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_228
   \   00001484   0xA80B             ADD      R0,SP,#+44
   \   00001486   0x.... 0x....      BL       strcpy
   1661          #ifdef NUCLEO
   1662                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1663          #else
   1664                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000148A   0xA90B             ADD      R1,SP,#+44
   \   0000148C   0x2000             MOVS     R0,#+0
   \   0000148E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001492   0x0006             MOVS     R6,R0
   1665          #endif
   1666                            if (Status != HAL_OK)
   \   00001494   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001496   0x2E00             CMP      R6,#+0
   \   00001498   0xD003             BEQ.N    ??RoadBrd_ParseString_229
   1667                              return Status;
   \   0000149A   0x0030             MOVS     R0,R6
   \   0000149C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000149E   0xF003 0xBB69      B.W      ??RoadBrd_ParseString_4
   1668                            // NOW, Build Data String..
   1669                            sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_229: (+1)
   \   000014A2   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_230
   \   000014A6   0xA80B             ADD      R0,SP,#+44
   \   000014A8   0x.... 0x....      BL       sprintf
   1670          #ifdef NUCLEO
   1671                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1672          #else
   1673                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014AC   0xA90B             ADD      R1,SP,#+44
   \   000014AE   0x2000             MOVS     R0,#+0
   \   000014B0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014B4   0x0006             MOVS     R6,R0
   1674          #endif
   1675                            if (Status != HAL_OK)
   \   000014B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014B8   0x2E00             CMP      R6,#+0
   \   000014BA   0xD003             BEQ.N    ??RoadBrd_ParseString_231
   1676                              return Status;
   \   000014BC   0x0030             MOVS     R0,R6
   \   000014BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014C0   0xF003 0xBB58      B.W      ??RoadBrd_ParseString_4
   1677                            strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_231: (+1)
   \   000014C4   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_230+0x4
   \   000014C8   0xA80B             ADD      R0,SP,#+44
   \   000014CA   0x.... 0x....      BL       strcpy
   1678                            strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000014CE   0xA9BB             ADD      R1,SP,#+748
   \   000014D0   0xA80B             ADD      R0,SP,#+44
   \   000014D2   0x.... 0x....      BL       strcat
   1679                            strcat( (char *)tempBffr2, "\r\n" );
   \   000014D6   0xA125             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000014D8   0xA80B             ADD      R0,SP,#+44
   \   000014DA   0x.... 0x....      BL       strcat
   1680          #ifdef NUCLEO
   1681                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1682          #else
   1683                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014DE   0xA90B             ADD      R1,SP,#+44
   \   000014E0   0x2000             MOVS     R0,#+0
   \   000014E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014E6   0x0006             MOVS     R6,R0
   1684          #endif
   1685                            if (Status != HAL_OK)
   \   000014E8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014EA   0x2E00             CMP      R6,#+0
   \   000014EC   0xD008             BEQ.N    ??RoadBrd_ParseString_232
   1686                              return Status;
   \   000014EE   0x0030             MOVS     R0,R6
   \   000014F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014F2   0xF003 0xBB3F      B.W      ??RoadBrd_ParseString_4
   \   000014F6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_88:
   \   000014F8   0x........         DC32     ?_42
   \   000014FC   0x........         DC32     ?_43
   1687                            // Is this a BLE Operation?
   1688                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_232: (+1)
   \   00001500   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001502   0x2D00             CMP      R5,#+0
   \   00001504   0xD00E             BEQ.N    ??RoadBrd_ParseString_233
   1689                            {
   1690                              // Yes...Build and Send BLE Response NOW.
   1691                              sprintf( (char *)tempBffr2, "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>", 
   1692                                      (char *)RGBValues.Red, 
   1693                                      (char *)RGBValues.Green,
   1694                                      (char *)RGBValues.Blue);
   \   00001506   0xA8B9             ADD      R0,SP,#+740
   \   00001508   0x9000             STR      R0,[SP, #+0]
   \   0000150A   0xABB7             ADD      R3,SP,#+732
   \   0000150C   0xAAB5             ADD      R2,SP,#+724
   \   0000150E   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_234
   \   00001512   0xA80B             ADD      R0,SP,#+44
   \   00001514   0x.... 0x....      BL       sprintf
   1695                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001518   0xA80B             ADD      R0,SP,#+44
   \   0000151A   0x.... 0x....      BL       strlen
   \   0000151E   0xA90B             ADD      R1,SP,#+44
   \   00001520   0x.... 0x....      BL       BGM111_Transmit
   1696                            }
   1697                            
   1698                            // Now DisplayEach Value Calculated.
   1699                            strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_233: (+1)
   \   00001524   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_234+0x4
   \   00001528   0xA80B             ADD      R0,SP,#+44
   \   0000152A   0x.... 0x....      BL       strcpy
   1700                            strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   0000152E   0xA9B5             ADD      R1,SP,#+724
   \   00001530   0xA80B             ADD      R0,SP,#+44
   \   00001532   0x.... 0x....      BL       strcat
   1701                            strcat( (char *)tempBffr2, "    Green: ");
   \   00001536   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_235
   \   0000153A   0xA80B             ADD      R0,SP,#+44
   \   0000153C   0x.... 0x....      BL       strcat
   1702                            strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   00001540   0xA9B7             ADD      R1,SP,#+732
   \   00001542   0xA80B             ADD      R0,SP,#+44
   \   00001544   0x.... 0x....      BL       strcat
   1703                            strcat( (char *)tempBffr2, "    Blue: ");
   \   00001548   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   0000154C   0xA80B             ADD      R0,SP,#+44
   \   0000154E   0x.... 0x....      BL       strcat
   1704                            strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001552   0xA9B9             ADD      R1,SP,#+740
   \   00001554   0xA80B             ADD      R0,SP,#+44
   \   00001556   0x.... 0x....      BL       strcat
   1705                            strcat( (char *)tempBffr2, "\r\n" );
   \   0000155A   0xA104             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000155C   0xA80B             ADD      R0,SP,#+44
   \   0000155E   0x.... 0x....      BL       strcat
   \   00001562   0xE261             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_103:
   \   00001564   0x........         DC32     ?_44
   \   00001568   0x........         DC32     ?_45
   \   0000156C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1706                          }
   1707                          else
   1708                            break;
   \                     ??RoadBrd_ParseString_227: (+1)
   \   00001570   0xF003 0xBA81      B.W      ??RoadBrd_ParseString_26
   1709                        }
   1710                        else
   1711                        {
   1712                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_226: (+1)
   \   00001574   0x7860             LDRB     R0,[R4, #+1]
   \   00001576   0x2830             CMP      R0,#+48
   \   00001578   0xF000 0x815F      BEQ.W    ??RoadBrd_ParseString_237
   \   0000157C   0x2831             CMP      R0,#+49
   \   0000157E   0xF000 0x81CD      BEQ.W    ??RoadBrd_ParseString_238
   \   00001582   0x2832             CMP      R0,#+50
   \   00001584   0xF000 0x81FA      BEQ.W    ??RoadBrd_ParseString_239
   \   00001588   0x2833             CMP      R0,#+51
   \   0000158A   0xF000 0x8214      BEQ.W    ??RoadBrd_ParseString_240
   \   0000158E   0x2849             CMP      R0,#+73
   \   00001590   0xF040 0x8245      BNE.W    ??RoadBrd_ParseString_241
   1713                          {
   1714          //------------------ HI Command...Initialize RGB Color Light Sensor.....     
   1715                            case 'I':
   1716                              if (Size == 2)
   \                     ??RoadBrd_ParseString_242: (+1)
   \   00001594   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001598   0x2802             CMP      R0,#+2
   \   0000159A   0xD11A             BNE.N    ??RoadBrd_ParseString_243
   1717                              {
   1718                                // This is the default init. Assume Default Parms and write them.
   1719                                Status = RoadBrd_RGBInit();
   \   0000159C   0x.... 0x....      BL       RoadBrd_RGBInit
   \   000015A0   0x0006             MOVS     R6,R0
   1720          
   1721                                // Is this a BLE Operation?
   1722                                if ( BLE_Flag )
   \   000015A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015A4   0x2D00             CMP      R5,#+0
   \   000015A6   0xD00A             BEQ.N    ??RoadBrd_ParseString_244
   1723                                {
   1724                                  // Yes...Build and Send BLE Response NOW.
   1725                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015A8   0xF8DF 0x1A4C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015AC   0xA80B             ADD      R0,SP,#+44
   \   000015AE   0x.... 0x....      BL       strcpy
   1726                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015B2   0xA80B             ADD      R0,SP,#+44
   \   000015B4   0x.... 0x....      BL       strlen
   \   000015B8   0xA90B             ADD      R1,SP,#+44
   \   000015BA   0x.... 0x....      BL       BGM111_Transmit
   1727                                }
   1728                                
   1729                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_244: (+1)
   \   000015BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000015C0   0x2E00             CMP      R6,#+0
   \   000015C2   0xF040 0x8139      BNE.W    ??RoadBrd_ParseString_245
   1730                                {
   1731                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with DEFAULT Values.\r\n");;
   \   000015C6   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_246
   \   000015CA   0xA80B             ADD      R0,SP,#+44
   \   000015CC   0x.... 0x....      BL       strcpy
   \   000015D0   0xE132             B.N      ??RoadBrd_ParseString_245
   1732                                }
   1733                                
   1734                              }
   1735                              else
   1736                              {
   1737                                // Is this a BLE Operation?
   1738                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_243: (+1)
   \   000015D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015D4   0x2D00             CMP      R5,#+0
   \   000015D6   0xD00A             BEQ.N    ??RoadBrd_ParseString_247
   1739                                {
   1740                                  // Yes...Build and Send BLE Response NOW.
   1741                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015D8   0xF8DF 0x1A1C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015DC   0xA80B             ADD      R0,SP,#+44
   \   000015DE   0x.... 0x....      BL       strcpy
   1742                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015E2   0xA80B             ADD      R0,SP,#+44
   \   000015E4   0x.... 0x....      BL       strlen
   \   000015E8   0xA90B             ADD      R1,SP,#+44
   \   000015EA   0x.... 0x....      BL       BGM111_Transmit
   1743                                }
   1744                                
   1745                                // This is the Parameter init. Will have to verify all parameters first.
   1746                                if ( Size != 29 )
   \                     ??RoadBrd_ParseString_247: (+1)
   \   000015EE   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000015F2   0x281D             CMP      R0,#+29
   \   000015F4   0xD005             BEQ.N    ??RoadBrd_ParseString_248
   1747                                {
   1748                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: SYNTAX Error. Parameters are not correct.\r\n");;
   \   000015F6   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_246+0x4
   \   000015FA   0xA80B             ADD      R0,SP,#+44
   \   000015FC   0x.... 0x....      BL       strcpy
   \   00001600   0xE11A             B.N      ??RoadBrd_ParseString_245
   1749                                }
   1750                                else
   1751                                {
   1752                                  // Step 1. Validate format.
   1753                                  if( (tempBffr[2]!=':') ||
   1754                                      (tempBffr[5]!='.') || 
   1755                                      (tempBffr[8]!='.') || 
   1756                                      (tempBffr[11]!='.') || 
   1757                                      (tempBffr[14]!='.') || 
   1758                                      (tempBffr[17]!='.') || 
   1759                                      (tempBffr[20]!='.') || 
   1760                                      (tempBffr[23]!='.') || 
   1761                                      (tempBffr[26]!='.') )
   \                     ??RoadBrd_ParseString_248: (+1)
   \   00001602   0x78A0             LDRB     R0,[R4, #+2]
   \   00001604   0x283A             CMP      R0,#+58
   \   00001606   0xD117             BNE.N    ??RoadBrd_ParseString_249
   \   00001608   0x7960             LDRB     R0,[R4, #+5]
   \   0000160A   0x282E             CMP      R0,#+46
   \   0000160C   0xD114             BNE.N    ??RoadBrd_ParseString_249
   \   0000160E   0x7A20             LDRB     R0,[R4, #+8]
   \   00001610   0x282E             CMP      R0,#+46
   \   00001612   0xD111             BNE.N    ??RoadBrd_ParseString_249
   \   00001614   0x7AE0             LDRB     R0,[R4, #+11]
   \   00001616   0x282E             CMP      R0,#+46
   \   00001618   0xD10E             BNE.N    ??RoadBrd_ParseString_249
   \   0000161A   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000161C   0x282E             CMP      R0,#+46
   \   0000161E   0xD10B             BNE.N    ??RoadBrd_ParseString_249
   \   00001620   0x7C60             LDRB     R0,[R4, #+17]
   \   00001622   0x282E             CMP      R0,#+46
   \   00001624   0xD108             BNE.N    ??RoadBrd_ParseString_249
   \   00001626   0x7D20             LDRB     R0,[R4, #+20]
   \   00001628   0x282E             CMP      R0,#+46
   \   0000162A   0xD105             BNE.N    ??RoadBrd_ParseString_249
   \   0000162C   0x7DE0             LDRB     R0,[R4, #+23]
   \   0000162E   0x282E             CMP      R0,#+46
   \   00001630   0xD102             BNE.N    ??RoadBrd_ParseString_249
   \   00001632   0x7EA0             LDRB     R0,[R4, #+26]
   \   00001634   0x282E             CMP      R0,#+46
   \   00001636   0xD005             BEQ.N    ??RoadBrd_ParseString_250
   1762                                  {
   1763                                    strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: Not correct format. Punctuation!\r\n");
   \                     ??RoadBrd_ParseString_249: (+1)
   \   00001638   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_251
   \   0000163C   0xA80B             ADD      R0,SP,#+44
   \   0000163E   0x.... 0x....      BL       strcpy
   \   00001642   0xE0F9             B.N      ??RoadBrd_ParseString_245
   1764                                  }
   1765                                  else
   1766                                  {
   1767                                    // Syntax correct. Time to grab parameters.
   1768                                    Error = 0;
   \                     ??RoadBrd_ParseString_250: (+1)
   \   00001644   0x2000             MOVS     R0,#+0
   \   00001646   0x9035             STR      R0,[SP, #+212]
   1769                                    for (x=0; x<9; x++)
   \   00001648   0x2000             MOVS     R0,#+0
   \   0000164A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_252: (+1)
   \   0000164C   0x2F09             CMP      R7,#+9
   \   0000164E   0xDA26             BGE.N    ??RoadBrd_ParseString_253
   1770                                    {
   1771                                      tempBffr3[0] = tempBffr[3+x*3];
   \   00001650   0x2003             MOVS     R0,#+3
   \   00001652   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001656   0x4420             ADD      R0,R4,R0
   \   00001658   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \   0000165C   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   1772                                      tempBffr3[1] = tempBffr[4+x*3];
   \   00001660   0x2003             MOVS     R0,#+3
   \   00001662   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001666   0x4420             ADD      R0,R4,R0
   \   00001668   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   0000166C   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   1773                                      tempBffr3[2] = 0x00;
   \   00001670   0x2000             MOVS     R0,#+0
   \   00001672   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   1774                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001676   0xA82B             ADD      R0,SP,#+172
   \   00001678   0x.... 0x....      BL       isHexNum
   \   0000167C   0x2800             CMP      R0,#+0
   \   0000167E   0xD107             BNE.N    ??RoadBrd_ParseString_254
   1775                                      {
   1776                                        strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR:Parameters not HEX Value.\r\n");
   \   00001680   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_251+0x4
   \   00001684   0xA80B             ADD      R0,SP,#+44
   \   00001686   0x.... 0x....      BL       strcpy
   1777                                        Error = 1;
   \   0000168A   0x2001             MOVS     R0,#+1
   \   0000168C   0x9035             STR      R0,[SP, #+212]
   1778                                        break;
   \   0000168E   0xE006             B.N      ??RoadBrd_ParseString_253
   1779                                      }
   1780                                      else
   1781                                      {
   1782                                        i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_254: (+1)
   \   00001690   0xA82B             ADD      R0,SP,#+172
   \   00001692   0x.... 0x....      BL       hatoi
   \   00001696   0xA99A             ADD      R1,SP,#+616
   \   00001698   0x55C8             STRB     R0,[R1, R7]
   1783                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1784                                    } //EndFor (x=0; x<num_bytes; x++)
   \   0000169A   0x1C7F             ADDS     R7,R7,#+1
   \   0000169C   0xE7D6             B.N      ??RoadBrd_ParseString_252
   1785                                    // Format and parameters now in i2cData array. Pull them out and validate them.
   1786                                    // OP_MODE Verify.
   1787                                    if(i2cData[0]>7)
   \                     ??RoadBrd_ParseString_253: (+1)
   \   0000169E   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016A2   0x2808             CMP      R0,#+8
   \   000016A4   0xDB05             BLT.N    ??RoadBrd_ParseString_255
   1788                                    {
   1789                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: OP_MODE.\r\n");
   \   000016A6   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_251+0x8
   \   000016AA   0xA80B             ADD      R0,SP,#+44
   \   000016AC   0x.... 0x....      BL       strcpy
   1790                                      break;
   \   000016B0   0xE1BA             B.N      ??RoadBrd_ParseString_236
   1791                                    }
   1792                                    else
   1793                                      op_mode = (i2cData[0] & 0x07) * 1;
   \                     ??RoadBrd_ParseString_255: (+1)
   \   000016B2   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016B6   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   000016BA   0xF88D 0x00CE      STRB     R0,[SP, #+206]
   1794                                    // DS_RANGE Verify.
   1795                                    if(i2cData[1]>1)
   \   000016BE   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016C2   0x2802             CMP      R0,#+2
   \   000016C4   0xDB08             BLT.N    ??RoadBrd_ParseString_256
   1796                                    {
   1797                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: DS_RANGE.\r\n");
   \   000016C6   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_257
   \   000016CA   0xA80B             ADD      R0,SP,#+44
   \   000016CC   0x.... 0x....      BL       strcpy
   1798                                      break;
   \   000016D0   0xE1AA             B.N      ??RoadBrd_ParseString_236
   \   000016D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_106:
   \   000016D4   0x........         DC32     ?_46
   1799                                    }
   1800                                    else
   1801                                      ds_range = (i2cData[1] & 0x01) * 8;
   \                     ??RoadBrd_ParseString_256: (+1)
   \   000016D8   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016DC   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000016E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000016E2   0x00C0             LSLS     R0,R0,#+3
   \   000016E4   0xF88D 0x00CD      STRB     R0,[SP, #+205]
   1802                                    // ADC_RSL Verify.
   1803                                    if(i2cData[2]>1)
   \   000016E8   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   000016EC   0x2802             CMP      R0,#+2
   \   000016EE   0xDB05             BLT.N    ??RoadBrd_ParseString_258
   1804                                    {
   1805                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: ADC_RSL.\r\n");
   \   000016F0   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_257+0x4
   \   000016F4   0xA80B             ADD      R0,SP,#+44
   \   000016F6   0x.... 0x....      BL       strcpy
   1806                                      break;
   \   000016FA   0xE195             B.N      ??RoadBrd_ParseString_236
   1807                                    }
   1808                                    else
   1809                                      adc_rsl = (i2cData[2] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_258: (+1)
   \   000016FC   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   00001700   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001704   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001706   0x0100             LSLS     R0,R0,#+4
   \   00001708   0xF88D 0x00CC      STRB     R0,[SP, #+204]
   1810                                    // SYNC Verify.
   1811                                    if(i2cData[3]>1)
   \   0000170C   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001710   0x2802             CMP      R0,#+2
   \   00001712   0xDB07             BLT.N    ??RoadBrd_ParseString_259
   1812                                    {
   1813                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: SYNC.\r\n");
   \   00001714   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_257+0x8
   \   00001718   0xA80B             ADD      R0,SP,#+44
   \   0000171A   0x.... 0x....      BL       strcpy
   1814                                      break;
   \   0000171E   0xE183             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_109:
   \   00001720   0x........         DC32     ?_47
   1815                                    }
   1816                                    else
   1817                                      sync = (i2cData[3] & 0x01) * 32;
   \                     ??RoadBrd_ParseString_259: (+1)
   \   00001724   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001728   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000172C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000172E   0x0140             LSLS     R0,R0,#+5
   \   00001730   0xF88D 0x00CB      STRB     R0,[SP, #+203]
   1818                                    // CMP_ADJST Verify.
   1819                                    if(i2cData[4]>63)
   \   00001734   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001738   0x2840             CMP      R0,#+64
   \   0000173A   0xDB05             BLT.N    ??RoadBrd_ParseString_260
   1820                                    {
   1821                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_ADJST.\r\n");
   \   0000173C   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_261
   \   00001740   0xA80B             ADD      R0,SP,#+44
   \   00001742   0x.... 0x....      BL       strcpy
   1822                                      break;
   \   00001746   0xE16F             B.N      ??RoadBrd_ParseString_236
   1823                                    }
   1824                                    else
   1825                                      cmp_adjst = (i2cData[4] & 0x3f) * 1;
   \                     ??RoadBrd_ParseString_260: (+1)
   \   00001748   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   0000174C   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00001750   0xF88D 0x00CA      STRB     R0,[SP, #+202]
   1826                                    // CMP_OFFST Verify.
   1827                                    if(i2cData[5]>1)
   \   00001754   0xF89D 0x026D      LDRB     R0,[SP, #+621]
   \   00001758   0x2802             CMP      R0,#+2
   \   0000175A   0xDB07             BLT.N    ??RoadBrd_ParseString_262
   1828                                    {
   1829                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_OFFST.\r\n");
   \   0000175C   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_261+0x4
   \   00001760   0xA80B             ADD      R0,SP,#+44
   \   00001762   0x.... 0x....      BL       strcpy
   1830                                      break;
   \   00001766   0xE15F             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_116:
   \   00001768   0x........         DC32     ?_48
   1831                                    }
   1832                                    else
   1833                                      cmp_offst = (i2cData[5] & 0x01) * 128;
   \                     ??RoadBrd_ParseString_262: (+1)
   \   0000176C   0xF89D 0x026D      LDRB     R0,[SP, #+621]
   \   00001770   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001774   0x2180             MOVS     R1,#+128
   \   00001776   0x4348             MULS     R0,R1,R0
   \   00001778   0xF88D 0x00C9      STRB     R0,[SP, #+201]
   1834                                    // INT_ASSGN Verify.
   1835                                    if(i2cData[6]>3)
   \   0000177C   0xF89D 0x026E      LDRB     R0,[SP, #+622]
   \   00001780   0x2804             CMP      R0,#+4
   \   00001782   0xDB05             BLT.N    ??RoadBrd_ParseString_263
   1836                                    {
   1837                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_ASSGN.\r\n");
   \   00001784   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_261+0x8
   \   00001788   0xA80B             ADD      R0,SP,#+44
   \   0000178A   0x.... 0x....      BL       strcpy
   1838                                      break;
   \   0000178E   0xE14B             B.N      ??RoadBrd_ParseString_236
   1839                                    }
   1840                                    else
   1841                                      int_assgn = (i2cData[6] & 0x03) * 1;
   \                     ??RoadBrd_ParseString_263: (+1)
   \   00001790   0xF89D 0x026E      LDRB     R0,[SP, #+622]
   \   00001794   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00001798   0xF88D 0x00C8      STRB     R0,[SP, #+200]
   1842                                    // INT_PERSIST Verify.
   1843                                    if(i2cData[7]>3)
   \   0000179C   0xF89D 0x026F      LDRB     R0,[SP, #+623]
   \   000017A0   0x2804             CMP      R0,#+4
   \   000017A2   0xDB05             BLT.N    ??RoadBrd_ParseString_264
   1844                                    {
   1845                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_PERSIST.\r\n");
   \   000017A4   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_265
   \   000017A8   0xA80B             ADD      R0,SP,#+44
   \   000017AA   0x.... 0x....      BL       strcpy
   1846                                      break;
   \   000017AE   0xE13B             B.N      ??RoadBrd_ParseString_236
   1847                                    }
   1848                                    else
   1849                                      int_persist = (i2cData[7] & 0x03) * 4;
   \                     ??RoadBrd_ParseString_264: (+1)
   \   000017B0   0xF89D 0x026F      LDRB     R0,[SP, #+623]
   \   000017B4   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   000017B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017BA   0x0080             LSLS     R0,R0,#+2
   \   000017BC   0xF88D 0x002B      STRB     R0,[SP, #+43]
   1850                                    // CNVRSN_INT Verify.
   1851                                    if(i2cData[8]>1)
   \   000017C0   0xF89D 0x0270      LDRB     R0,[SP, #+624]
   \   000017C4   0x2802             CMP      R0,#+2
   \   000017C6   0xDB05             BLT.N    ??RoadBrd_ParseString_266
   1852                                    {
   1853                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CNVRSN_INT.\r\n");
   \   000017C8   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_265+0x4
   \   000017CC   0xA80B             ADD      R0,SP,#+44
   \   000017CE   0x.... 0x....      BL       strcpy
   1854                                      break;
   \   000017D2   0xE129             B.N      ??RoadBrd_ParseString_236
   1855                                    }
   1856                                    else
   1857                                      cnvrsn_int = (i2cData[8] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_266: (+1)
   \   000017D4   0xF89D 0x0270      LDRB     R0,[SP, #+624]
   \   000017D8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000017DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017DE   0x0100             LSLS     R0,R0,#+4
   \   000017E0   0xF88D 0x002A      STRB     R0,[SP, #+42]
   1858                                    // OK, all parameters have been verified. Time to build final params.
   1859                                    RGBMeasure.config1 = op_mode + ds_range + adc_rsl + sync;
   \   000017E4   0xF89D 0x00CE      LDRB     R0,[SP, #+206]
   \   000017E8   0xF89D 0x10CD      LDRB     R1,[SP, #+205]
   \   000017EC   0x1808             ADDS     R0,R1,R0
   \   000017EE   0xF89D 0x10CC      LDRB     R1,[SP, #+204]
   \   000017F2   0x1808             ADDS     R0,R1,R0
   \   000017F4   0xF89D 0x10CB      LDRB     R1,[SP, #+203]
   \   000017F8   0x1808             ADDS     R0,R1,R0
   \   000017FA   0xF88D 0x00EC      STRB     R0,[SP, #+236]
   1860                                    RGBMeasure.config2 = cmp_adjst + cmp_offst;
   \   000017FE   0xF89D 0x00CA      LDRB     R0,[SP, #+202]
   \   00001802   0xF89D 0x10C9      LDRB     R1,[SP, #+201]
   \   00001806   0x1808             ADDS     R0,R1,R0
   \   00001808   0xF88D 0x00ED      STRB     R0,[SP, #+237]
   1861                                    RGBMeasure.config3 = int_assgn + int_persist + cnvrsn_int;
   \   0000180C   0xF89D 0x00C8      LDRB     R0,[SP, #+200]
   \   00001810   0xF89D 0x102B      LDRB     R1,[SP, #+43]
   \   00001814   0x1808             ADDS     R0,R1,R0
   \   00001816   0xF89D 0x102A      LDRB     R1,[SP, #+42]
   \   0000181A   0x1808             ADDS     R0,R1,R0
   \   0000181C   0xF88D 0x00EE      STRB     R0,[SP, #+238]
   1862                                    // Load Config Register with Config Settings
   1863                                    Status = RoadBrd_RGBFullInit( &RGBMeasure );
   \   00001820   0xA83B             ADD      R0,SP,#+236
   \   00001822   0x.... 0x....      BL       RoadBrd_RGBFullInit
   \   00001826   0x0006             MOVS     R6,R0
   1864          
   1865                                    if (Status == HAL_OK)
   \   00001828   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000182A   0x2E00             CMP      R6,#+0
   \   0000182C   0xD104             BNE.N    ??RoadBrd_ParseString_245
   1866                                    {
   1867                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with USER Values.\r\n");;
   \   0000182E   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_265+0x8
   \   00001832   0xA80B             ADD      R0,SP,#+44
   \   00001834   0x.... 0x....      BL       strcpy
   1868                                    }
   1869                                  } //ElseIf Validate format.
   1870                                } //ElseIf ( Size != 29 )
   1871                              } //ElseIf (Size == 2)
   1872                              break;
   \                     ??RoadBrd_ParseString_245: (+1)
   \   00001838   0xE0F6             B.N      ??RoadBrd_ParseString_236
   1873          //------------------ H0 Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1874                            case '0':
   1875                              // 1. Time to send Command and collect status.
   1876                              Status = RoadBrd_RGBReadValues( &RGBValues );
   \                     ??RoadBrd_ParseString_237: (+1)
   \   0000183A   0xA8B5             ADD      R0,SP,#+724
   \   0000183C   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   00001840   0x0006             MOVS     R6,R0
   1877                              // Is this a BLE Operation?
   1878                              if ( BLE_Flag )
   \   00001842   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001844   0x2D00             CMP      R5,#+0
   \   00001846   0xD00A             BEQ.N    ??RoadBrd_ParseString_267
   1879                              {
   1880                                // Yes...Build and Send BLE Response NOW.
   1881                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001848   0xF8DF 0x17AC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000184C   0xA80B             ADD      R0,SP,#+44
   \   0000184E   0x.... 0x....      BL       strcpy
   1882                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001852   0xA80B             ADD      R0,SP,#+44
   \   00001854   0x.... 0x....      BL       strlen
   \   00001858   0xA90B             ADD      R1,SP,#+44
   \   0000185A   0x.... 0x....      BL       BGM111_Transmit
   1883                              }
   1884                              
   1885                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_267: (+1)
   \   0000185E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001860   0x2E00             CMP      R6,#+0
   \   00001862   0xD15A             BNE.N    ??RoadBrd_ParseString_268
   1886                              {
   1887                                // Send string to UART..
   1888                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001864   0xF8DF 0x19F4      LDR.W    R1,??RoadBrd_ParseString_228
   \   00001868   0xA80B             ADD      R0,SP,#+44
   \   0000186A   0x.... 0x....      BL       strcpy
   1889          #ifdef NUCLEO
   1890                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1891          #else
   1892                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000186E   0xA90B             ADD      R1,SP,#+44
   \   00001870   0x2000             MOVS     R0,#+0
   \   00001872   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001876   0x0006             MOVS     R6,R0
   1893          #endif
   1894                                if (Status != HAL_OK)
   \   00001878   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000187A   0x2E00             CMP      R6,#+0
   \   0000187C   0xD003             BEQ.N    ??RoadBrd_ParseString_269
   1895                                  return Status;
   \   0000187E   0x0030             MOVS     R0,R6
   \   00001880   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001882   0xF003 0xB977      B.W      ??RoadBrd_ParseString_4
   1896                                // NOW, Build Data String..
   1897                                sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_269: (+1)
   \   00001886   0xF8DF 0x1A04      LDR.W    R1,??RoadBrd_ParseString_230
   \   0000188A   0xA80B             ADD      R0,SP,#+44
   \   0000188C   0x.... 0x....      BL       sprintf
   1898          #ifdef NUCLEO
   1899                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1900          #else
   1901                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001890   0xA90B             ADD      R1,SP,#+44
   \   00001892   0x2000             MOVS     R0,#+0
   \   00001894   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001898   0x0006             MOVS     R6,R0
   1902          #endif
   1903                                if (Status != HAL_OK)
   \   0000189A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000189C   0x2E00             CMP      R6,#+0
   \   0000189E   0xD003             BEQ.N    ??RoadBrd_ParseString_270
   1904                                  return Status;
   \   000018A0   0x0030             MOVS     R0,R6
   \   000018A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018A4   0xF003 0xB966      B.W      ??RoadBrd_ParseString_4
   1905                                strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_270: (+1)
   \   000018A8   0xF8DF 0x19E4      LDR.W    R1,??RoadBrd_ParseString_230+0x4
   \   000018AC   0xA80B             ADD      R0,SP,#+44
   \   000018AE   0x.... 0x....      BL       strcpy
   1906                                strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000018B2   0xA9BB             ADD      R1,SP,#+748
   \   000018B4   0xA80B             ADD      R0,SP,#+44
   \   000018B6   0x.... 0x....      BL       strcat
   1907                                strcat( (char *)tempBffr2, "\r\n" );
   \   000018BA   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000018BC   0xA80B             ADD      R0,SP,#+44
   \   000018BE   0x.... 0x....      BL       strcat
   1908          #ifdef NUCLEO
   1909                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1910          #else
   1911                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000018C2   0xA90B             ADD      R1,SP,#+44
   \   000018C4   0x2000             MOVS     R0,#+0
   \   000018C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000018CA   0x0006             MOVS     R6,R0
   1912          #endif
   1913                                if (Status != HAL_OK)
   \   000018CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018CE   0x2E00             CMP      R6,#+0
   \   000018D0   0xD003             BEQ.N    ??RoadBrd_ParseString_271
   1914                                  return Status;
   \   000018D2   0x0030             MOVS     R0,R6
   \   000018D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018D6   0xF003 0xB94D      B.W      ??RoadBrd_ParseString_4
   1915                                // Now DisplayEach Value Calculated.
   1916                                strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_271: (+1)
   \   000018DA   0xF8DF 0x1A08      LDR.W    R1,??RoadBrd_ParseString_234+0x4
   \   000018DE   0xA80B             ADD      R0,SP,#+44
   \   000018E0   0x.... 0x....      BL       strcpy
   1917                                strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   000018E4   0xA9B5             ADD      R1,SP,#+724
   \   000018E6   0xA80B             ADD      R0,SP,#+44
   \   000018E8   0x.... 0x....      BL       strcat
   1918                                strcat( (char *)tempBffr2, "    Green: ");
   \   000018EC   0xF8DF 0x1A2C      LDR.W    R1,??RoadBrd_ParseString_235
   \   000018F0   0xA80B             ADD      R0,SP,#+44
   \   000018F2   0x.... 0x....      BL       strcat
   1919                                strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   000018F6   0xA9B7             ADD      R1,SP,#+732
   \   000018F8   0xA80B             ADD      R0,SP,#+44
   \   000018FA   0x.... 0x....      BL       strcat
   1920                                strcat( (char *)tempBffr2, "    Blue: ");
   \   000018FE   0xF8DF 0x1A20      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   00001902   0xA80B             ADD      R0,SP,#+44
   \   00001904   0x.... 0x....      BL       strcat
   1921                                strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001908   0xA9B9             ADD      R1,SP,#+740
   \   0000190A   0xA80B             ADD      R0,SP,#+44
   \   0000190C   0x.... 0x....      BL       strcat
   1922                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001910   0xA1C5             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001912   0xA80B             ADD      R0,SP,#+44
   \   00001914   0x.... 0x....      BL       strcat
   1923                              }
   1924                              else
   1925                                break;
   1926                              break;
   \   00001918   0xE086             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_268: (+1)
   \   0000191A   0xE085             B.N      ??RoadBrd_ParseString_236
   1927          //------------------ H1 Command...Read Status.....     
   1928                            case '1':
   1929                              // 1. Time to send Command and collect status.  RGBSMeasure
   1930                              Status = RoadBrd_RGBReadStatus( &RGBSMeasure );
   \                     ??RoadBrd_ParseString_238: (+1)
   \   0000191C   0xA857             ADD      R0,SP,#+348
   \   0000191E   0x.... 0x....      BL       RoadBrd_RGBReadStatus
   \   00001922   0x0006             MOVS     R6,R0
   1931          
   1932                              // Is this a BLE Operation?
   1933                              if ( BLE_Flag )
   \   00001924   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001926   0x2D00             CMP      R5,#+0
   \   00001928   0xD00A             BEQ.N    ??RoadBrd_ParseString_272
   1934                              {
   1935                                // Yes...Build and Send BLE Response NOW.
   1936                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000192A   0xF8DF 0x16CC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000192E   0xA80B             ADD      R0,SP,#+44
   \   00001930   0x.... 0x....      BL       strcpy
   1937                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001934   0xA80B             ADD      R0,SP,#+44
   \   00001936   0x.... 0x....      BL       strlen
   \   0000193A   0xA90B             ADD      R1,SP,#+44
   \   0000193C   0x.... 0x....      BL       BGM111_Transmit
   1938                              }
   1939                              
   1940                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_272: (+1)
   \   00001940   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001942   0x2E00             CMP      R6,#+0
   \   00001944   0xD119             BNE.N    ??RoadBrd_ParseString_273
   1941                              {
   1942                                // Build Status
   1943                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor Status: ");
   \   00001946   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_274
   \   0000194A   0xA80B             ADD      R0,SP,#+44
   \   0000194C   0x.... 0x....      BL       strcpy
   1944                                sprintf( (char *)tempBffr3, "%02x / ", RGBSMeasure.status);
   \   00001950   0xF89D 0x215C      LDRB     R2,[SP, #+348]
   \   00001954   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_274+0x4
   \   00001958   0xA82B             ADD      R0,SP,#+172
   \   0000195A   0x.... 0x....      BL       sprintf
   1945                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   0000195E   0xA92B             ADD      R1,SP,#+172
   \   00001960   0xA80B             ADD      R0,SP,#+44
   \   00001962   0x.... 0x....      BL       strcat
   1946                                strcat( (char *)tempBffr2, (char *)RGBSMeasure.Raw );
   \   00001966   0xA957             ADD      R1,SP,#+348
   \   00001968   0x1C49             ADDS     R1,R1,#+1
   \   0000196A   0xA80B             ADD      R0,SP,#+44
   \   0000196C   0x.... 0x....      BL       strcat
   1947                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001970   0xA1AD             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001972   0xA80B             ADD      R0,SP,#+44
   \   00001974   0x.... 0x....      BL       strcat
   1948                              }
   1949                              else
   1950                                break;
   1951                              break;
   \   00001978   0xE056             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_273: (+1)
   \   0000197A   0xE055             B.N      ??RoadBrd_ParseString_236
   1952          //------------------ H2 Command...Reset Hardware......     
   1953                            case '2':
   1954                              Status = RoadBrd_RGBReset();
   \                     ??RoadBrd_ParseString_239: (+1)
   \   0000197C   0x.... 0x....      BL       RoadBrd_RGBReset
   \   00001980   0x0006             MOVS     R6,R0
   1955                              // Is this a BLE Operation?
   1956                              if ( BLE_Flag )
   \   00001982   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001984   0x2D00             CMP      R5,#+0
   \   00001986   0xD00A             BEQ.N    ??RoadBrd_ParseString_275
   1957                              {
   1958                                // Yes...Build and Send BLE Response NOW.
   1959                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001988   0xF8DF 0x166C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000198C   0xA80B             ADD      R0,SP,#+44
   \   0000198E   0x.... 0x....      BL       strcpy
   1960                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001992   0xA80B             ADD      R0,SP,#+44
   \   00001994   0x.... 0x....      BL       strlen
   \   00001998   0xA90B             ADD      R1,SP,#+44
   \   0000199A   0x.... 0x....      BL       BGM111_Transmit
   1961                              }
   1962                              
   1963                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_275: (+1)
   \   0000199E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019A0   0x2E00             CMP      R6,#+0
   \   000019A2   0xD107             BNE.N    ??RoadBrd_ParseString_276
   1964                              {
   1965                                // Build Status
   1966                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor: RESET CMD Sent Succesful.\r\n" );
   \   000019A4   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_277
   \   000019A8   0xA80B             ADD      R0,SP,#+44
   \   000019AA   0x.... 0x....      BL       strcpy
   1967                              }
   1968                              else
   1969                                break;
   1970                              break;
   \   000019AE   0xE03B             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_138:
   \   000019B0   0x........         DC32     ?_49
   \                     ??RoadBrd_ParseString_276: (+1)
   \   000019B4   0xE038             B.N      ??RoadBrd_ParseString_236
   1971          //------------------ H3 Command...Read ID.....     
   1972                            case '3':
   1973                              // 1. Time to send Command and collect status.  IDMeasure
   1974                              Status = RoadBrd_RGBReadID( &IDMeasure );
   \                     ??RoadBrd_ParseString_240: (+1)
   \   000019B6   0xA859             ADD      R0,SP,#+356
   \   000019B8   0x.... 0x....      BL       RoadBrd_RGBReadID
   \   000019BC   0x0006             MOVS     R6,R0
   1975                              // Is this a BLE Operation?
   1976                              if ( BLE_Flag )
   \   000019BE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000019C0   0x2D00             CMP      R5,#+0
   \   000019C2   0xD00A             BEQ.N    ??RoadBrd_ParseString_278
   1977                              {
   1978                                // Yes...Build and Send BLE Response NOW.
   1979                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000019C4   0xF8DF 0x1630      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000019C8   0xA80B             ADD      R0,SP,#+44
   \   000019CA   0x.... 0x....      BL       strcpy
   1980                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000019CE   0xA80B             ADD      R0,SP,#+44
   \   000019D0   0x.... 0x....      BL       strlen
   \   000019D4   0xA90B             ADD      R1,SP,#+44
   \   000019D6   0x.... 0x....      BL       BGM111_Transmit
   1981                              }
   1982                              
   1983                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_278: (+1)
   \   000019DA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019DC   0x2E00             CMP      R6,#+0
   \   000019DE   0xD11D             BNE.N    ??RoadBrd_ParseString_279
   1984                              {
   1985                                // Build Status
   1986                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor ID Code: ");
   \   000019E0   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_277+0x4
   \   000019E4   0xA80B             ADD      R0,SP,#+44
   \   000019E6   0x.... 0x....      BL       strcpy
   1987                                sprintf( (char *)tempBffr3, "%02x / ", IDMeasure.id);
   \   000019EA   0xF89D 0x2164      LDRB     R2,[SP, #+356]
   \   000019EE   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_274+0x4
   \   000019F2   0xA82B             ADD      R0,SP,#+172
   \   000019F4   0x.... 0x....      BL       sprintf
   1988                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000019F8   0xA92B             ADD      R1,SP,#+172
   \   000019FA   0xA80B             ADD      R0,SP,#+44
   \   000019FC   0x.... 0x....      BL       strcat
   1989                                strcat( (char *)tempBffr2, (char *)IDMeasure.Raw );
   \   00001A00   0xA959             ADD      R1,SP,#+356
   \   00001A02   0x1C49             ADDS     R1,R1,#+1
   \   00001A04   0xA80B             ADD      R0,SP,#+44
   \   00001A06   0x.... 0x....      BL       strcat
   1990                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001A0A   0xA187             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001A0C   0xA80B             ADD      R0,SP,#+44
   \   00001A0E   0x.... 0x....      BL       strcat
   1991                             }
   1992                              else
   1993                                break;
   1994                              break;
   \   00001A12   0xE009             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_142:
   \   00001A14   0x........         DC32     ?_50
   \   00001A18   0x........         DC32     ?_51
   \                     ??RoadBrd_ParseString_279: (+1)
   \   00001A1C   0xE004             B.N      ??RoadBrd_ParseString_236
   1995                            default:
   1996                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_241: (+1)
   \   00001A1E   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_280
   \   00001A22   0xA80B             ADD      R0,SP,#+44
   \   00001A24   0x.... 0x....      BL       strcpy
   1997                              break;
   1998                          } //EndSwitch
   1999                        } //EndElse (Size == 1)
   2000                        break;    
   \                     ??RoadBrd_ParseString_236: (+1)
   \   00001A28   0xF003 0xB825      B.W      ??RoadBrd_ParseString_26
   2001          //**************************************************************************************************
   2002                      case 'P':
   2003                        // POWER SYSTEM. 
   2004                        switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_20: (+1)
   \   00001A2C   0x7860             LDRB     R0,[R4, #+1]
   \   00001A2E   0x2844             CMP      R0,#+68
   \   00001A30   0xD018             BEQ.N    ??RoadBrd_ParseString_281
   \   00001A32   0x2855             CMP      R0,#+85
   \   00001A34   0xD11F             BNE.N    ??RoadBrd_ParseString_282
   2005                        {
   2006          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   2007                          case 'U':
   2008                            // Turn on 5V Power Supply.
   2009                            RoadBrd_gpio_On( gTAM_PWR );
   \                     ??RoadBrd_ParseString_283: (+1)
   \   00001A36   0x2004             MOVS     R0,#+4
   \   00001A38   0x.... 0x....      BL       RoadBrd_gpio_On
   2010                            // Is this a BLE Operation?
   2011                            if ( BLE_Flag )
   \   00001A3C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A3E   0x2D00             CMP      R5,#+0
   \   00001A40   0xD00A             BEQ.N    ??RoadBrd_ParseString_284
   2012                            {
   2013                              // Yes...Build and Send BLE Response NOW.
   2014                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A42   0xF8DF 0x15B4      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001A46   0xA80B             ADD      R0,SP,#+44
   \   00001A48   0x.... 0x....      BL       strcpy
   2015                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001A4C   0xA80B             ADD      R0,SP,#+44
   \   00001A4E   0x.... 0x....      BL       strlen
   \   00001A52   0xA90B             ADD      R1,SP,#+44
   \   00001A54   0x.... 0x....      BL       BGM111_Transmit
   2016                            }
   2017                            
   2018                            strcpy( (char *)tempBffr2, "5V Power Plane Powered UP.\r\n");
   \                     ??RoadBrd_ParseString_284: (+1)
   \   00001A58   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_280+0x4
   \   00001A5C   0xA80B             ADD      R0,SP,#+44
   \   00001A5E   0x.... 0x....      BL       strcpy
   2019                            break;
   \   00001A62   0xE00D             B.N      ??RoadBrd_ParseString_285
   2020                          case 'D':
   2021                            // Turn off 5V Power Supply.
   2022                            RoadBrd_gpio_Off( gTAM_PWR );
   \                     ??RoadBrd_ParseString_281: (+1)
   \   00001A64   0x2004             MOVS     R0,#+4
   \   00001A66   0x.... 0x....      BL       RoadBrd_gpio_Off
   2023                            strcpy( (char *)tempBffr2, "5V Power Plane Powered DOWN.\r\n");
   \   00001A6A   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_280+0x8
   \   00001A6E   0xA80B             ADD      R0,SP,#+44
   \   00001A70   0x.... 0x....      BL       strcpy
   2024                            break;
   \   00001A74   0xE004             B.N      ??RoadBrd_ParseString_285
   2025                          default:
   2026                            strcpy( (char *)tempBffr2, "ERROR: Illegal 5V Power Plane Command.\r\n");
   \                     ??RoadBrd_ParseString_282: (+1)
   \   00001A76   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_280+0xC
   \   00001A7A   0xA80B             ADD      R0,SP,#+44
   \   00001A7C   0x.... 0x....      BL       strcpy
   2027                            break;
   2028                        }
   2029                        break;
   \                     ??RoadBrd_ParseString_285: (+1)
   \   00001A80   0xF002 0xBFF9      B.W      ??RoadBrd_ParseString_26
   \                     ??RoadBrd_ParseString_147:
   \   00001A84   0x........         DC32     ?_52
   2030          //**************************************************************************************************
   2031                      case 'T':
   2032                        // TEST CMDS. 
   2033                        // Test Size to make sure we have enough Characters for this operation
   2034                        if (Size <= 1)
   \                     ??RoadBrd_ParseString_21: (+1)
   \   00001A88   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001A8C   0x2802             CMP      R0,#+2
   \   00001A8E   0xDA19             BGE.N    ??RoadBrd_ParseString_286
   2035                        {
   2036                          // Is this a BLE Operation?
   2037                          if ( BLE_Flag )
   \   00001A90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A92   0x2D00             CMP      R5,#+0
   \   00001A94   0xD00A             BEQ.N    ??RoadBrd_ParseString_287
   2038                          {
   2039                            // Yes...Build and Send BLE Response NOW.
   2040                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A96   0xF8DF 0x1560      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001A9A   0xA80B             ADD      R0,SP,#+44
   \   00001A9C   0x.... 0x....      BL       strcpy
   2041                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001AA0   0xA80B             ADD      R0,SP,#+44
   \   00001AA2   0x.... 0x....      BL       strlen
   \   00001AA6   0xA90B             ADD      R1,SP,#+44
   \   00001AA8   0x.... 0x....      BL       BGM111_Transmit
   2042                          }
   2043                          
   2044                          strcpy( (char *)tempBffr2, "T ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_287: (+1)
   \   00001AAC   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_288
   \   00001AB0   0xA80B             ADD      R0,SP,#+44
   \   00001AB2   0x.... 0x....      BL       strcpy
   \   00001AB6   0xF002 0xBFCC      B.W      ??RoadBrd_ParseString_289
   \   00001ABA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_148:
   \   00001ABC   0x........         DC32     ?_53
   \   00001AC0   0x........         DC32     ?_54
   2045                        }
   2046                        else
   2047                        {
   2048                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_286: (+1)
   \   00001AC4   0x7860             LDRB     R0,[R4, #+1]
   \   00001AC6   0x2843             CMP      R0,#+67
   \   00001AC8   0xF000 0x82F4      BEQ.W    ??RoadBrd_ParseString_290
   \   00001ACC   0x2844             CMP      R0,#+68
   \   00001ACE   0xF002 0x821E      BEQ.W    ??RoadBrd_ParseString_291
   \   00001AD2   0x2846             CMP      R0,#+70
   \   00001AD4   0xF002 0x8612      BEQ.W    ??RoadBrd_ParseString_292
   \   00001AD8   0x2849             CMP      R0,#+73
   \   00001ADA   0xD013             BEQ.N    ??RoadBrd_ParseString_293
   \   00001ADC   0x284B             CMP      R0,#+75
   \   00001ADE   0xF002 0x8251      BEQ.W    ??RoadBrd_ParseString_294
   \   00001AE2   0x284C             CMP      R0,#+76
   \   00001AE4   0xF002 0x8622      BEQ.W    ??RoadBrd_ParseString_295
   \   00001AE8   0x284D             CMP      R0,#+77
   \   00001AEA   0xF002 0x85DD      BEQ.W    ??RoadBrd_ParseString_296
   \   00001AEE   0x2852             CMP      R0,#+82
   \   00001AF0   0xF002 0x822C      BEQ.W    ??RoadBrd_ParseString_297
   \   00001AF4   0x2853             CMP      R0,#+83
   \   00001AF6   0xF002 0x864E      BEQ.W    ??RoadBrd_ParseString_298
   \   00001AFA   0x2855             CMP      R0,#+85
   \   00001AFC   0xF002 0x856A      BEQ.W    ??RoadBrd_ParseString_299
   \   00001B00   0xF002 0xBF96      B.W      ??RoadBrd_ParseString_300
   2049                          {
   2050          //++++++++++++++++++++++++++++++++++++++++++  I2C Commands.
   2051                            case 'I':
   2052                              // I2C Commands.
   2053                              // Test Size to make sure we have enough Characters for this operation
   2054                              if (Size < 9)
   \                     ??RoadBrd_ParseString_293: (+1)
   \   00001B04   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001B08   0x2809             CMP      R0,#+9
   \   00001B0A   0xDA13             BGE.N    ??RoadBrd_ParseString_301
   2055                              {
   2056                                // Is this a BLE Operation?
   2057                                if ( BLE_Flag )
   \   00001B0C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B0E   0x2D00             CMP      R5,#+0
   \   00001B10   0xD00A             BEQ.N    ??RoadBrd_ParseString_302
   2058                                {
   2059                                  // Yes...Build and Send BLE Response NOW.
   2060                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B12   0xF8DF 0x14E4      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B16   0xA80B             ADD      R0,SP,#+44
   \   00001B18   0x.... 0x....      BL       strcpy
   2061                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B1C   0xA80B             ADD      R0,SP,#+44
   \   00001B1E   0x.... 0x....      BL       strlen
   \   00001B22   0xA90B             ADD      R1,SP,#+44
   \   00001B24   0x.... 0x....      BL       BGM111_Transmit
   2062                                }
   2063                                
   2064                                strcpy( (char *)tempBffr2, "TI SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_302: (+1)
   \   00001B28   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_303
   \   00001B2C   0xA80B             ADD      R0,SP,#+44
   \   00001B2E   0x.... 0x....      BL       strcpy
   \   00001B32   0xE2B4             B.N      ??RoadBrd_ParseString_304
   2065                              }
   2066                              else
   2067                              {
   2068                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_301: (+1)
   \   00001B34   0x78A0             LDRB     R0,[R4, #+2]
   \   00001B36   0x2851             CMP      R0,#+81
   \   00001B38   0xF000 0x8205      BEQ.W    ??RoadBrd_ParseString_305
   \   00001B3C   0xF0C0 0x82AA      BCC.W    ??RoadBrd_ParseString_306
   \   00001B40   0x2853             CMP      R0,#+83
   \   00001B42   0xD002             BEQ.N    ??RoadBrd_ParseString_307
   \   00001B44   0xF0C0 0x80D6      BCC.W    ??RoadBrd_ParseString_308
   \   00001B48   0xE2A4             B.N      ??RoadBrd_ParseString_306
   2069                                {
   2070          //------------------
   2071                                  case 'S':
   2072                                    //I2C Send Command.
   2073                                    // Step 1. Validate format.
   2074                                    if( (tempBffr[3]!=':') ||
   2075                                        (tempBffr[6]!='.') )
   \                     ??RoadBrd_ParseString_307: (+1)
   \   00001B4A   0x78E0             LDRB     R0,[R4, #+3]
   \   00001B4C   0x283A             CMP      R0,#+58
   \   00001B4E   0xD102             BNE.N    ??RoadBrd_ParseString_309
   \   00001B50   0x79A0             LDRB     R0,[R4, #+6]
   \   00001B52   0x282E             CMP      R0,#+46
   \   00001B54   0xD01C             BEQ.N    ??RoadBrd_ParseString_310
   2076                                    {
   2077                                      // Is this a BLE Operation?
   2078                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_309: (+1)
   \   00001B56   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B58   0x2D00             CMP      R5,#+0
   \   00001B5A   0xD00A             BEQ.N    ??RoadBrd_ParseString_311
   2079                                      {
   2080                                        // Yes...Build and Send BLE Response NOW.
   2081                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B5C   0xF8DF 0x1498      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B60   0xA80B             ADD      R0,SP,#+44
   \   00001B62   0x.... 0x....      BL       strcpy
   2082                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B66   0xA80B             ADD      R0,SP,#+44
   \   00001B68   0x.... 0x....      BL       strlen
   \   00001B6C   0xA90B             ADD      R1,SP,#+44
   \   00001B6E   0x.... 0x....      BL       BGM111_Transmit
   2083                                      }
   2084                                     
   2085                                      strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_311: (+1)
   \   00001B72   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_312
   \   00001B76   0xA80B             ADD      R0,SP,#+44
   \   00001B78   0x.... 0x....      BL       strcpy
   \   00001B7C   0xE0B9             B.N      ??RoadBrd_ParseString_313
   \   00001B7E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_164:
   \   00001B80   0x........         DC32     ?_55
   \   00001B84   0x........         DC32     ?_56
   \   00001B88   0x........         DC32     ?_57
   \   00001B8C   0x........         DC32     ?_58
   2086                                    }
   2087                                    else
   2088                                    {
   2089                                      // Is this a BLE Operation?
   2090                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_310: (+1)
   \   00001B90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B92   0x2D00             CMP      R5,#+0
   \   00001B94   0xD00A             BEQ.N    ??RoadBrd_ParseString_314
   2091                                      {
   2092                                        // Yes...Build and Send BLE Response NOW.
   2093                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B96   0xF8DF 0x1460      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B9A   0xA80B             ADD      R0,SP,#+44
   \   00001B9C   0x.... 0x....      BL       strcpy
   2094                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001BA0   0xA80B             ADD      R0,SP,#+44
   \   00001BA2   0x.... 0x....      BL       strlen
   \   00001BA6   0xA90B             ADD      R1,SP,#+44
   \   00001BA8   0x.... 0x....      BL       BGM111_Transmit
   2095                                      }
   2096                                      
   2097                                      // 2. Grab Address and validate a legal number
   2098                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_314: (+1)
   \   00001BAC   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001BB0   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2099                                      tempBffr3[1] = tempBffr[5];
   \   00001BB4   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001BB8   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2100                                      tempBffr3[2] = 0x00;
   \   00001BBC   0x2000             MOVS     R0,#+0
   \   00001BBE   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2101                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BC2   0xA82B             ADD      R0,SP,#+172
   \   00001BC4   0x.... 0x....      BL       isHexNum
   \   00001BC8   0x2800             CMP      R0,#+0
   \   00001BCA   0xD105             BNE.N    ??RoadBrd_ParseString_315
   2102                                        strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001BCC   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_312+0x4
   \   00001BD0   0xA80B             ADD      R0,SP,#+44
   \   00001BD2   0x.... 0x....      BL       strcpy
   \   00001BD6   0xE08C             B.N      ??RoadBrd_ParseString_313
   2103                                      else
   2104                                      {
   2105                                        // Legal Address. Save it as value
   2106                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_315: (+1)
   \   00001BD8   0xA82B             ADD      R0,SP,#+172
   \   00001BDA   0x.... 0x....      BL       hatoi
   \   00001BDE   0x9031             STR      R0,[SP, #+196]
   2107                                        // 3. Now get the number of bytes of data from field.
   2108          //                              sprintf( (char *)tempBffr2, "TIS: Good Address: %x.\r\n", Address);
   2109                                        tempBffr3[0] = tempBffr[7];
   \   00001BE0   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001BE4   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2110                                        tempBffr3[1] = tempBffr[8];
   \   00001BE8   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001BEC   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2111                                        tempBffr3[2] = 0x00;
   \   00001BF0   0x2000             MOVS     R0,#+0
   \   00001BF2   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2112                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BF6   0xA82B             ADD      R0,SP,#+172
   \   00001BF8   0x.... 0x....      BL       isHexNum
   \   00001BFC   0x2800             CMP      R0,#+0
   \   00001BFE   0xD105             BNE.N    ??RoadBrd_ParseString_316
   2113                                          strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001C00   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_312+0x8
   \   00001C04   0xA80B             ADD      R0,SP,#+44
   \   00001C06   0x.... 0x....      BL       strcpy
   \   00001C0A   0xE072             B.N      ??RoadBrd_ParseString_313
   2114                                        else
   2115                                        {
   2116                                          // Legal NUMBER BYTES. Save it as value
   2117                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_316: (+1)
   \   00001C0C   0xA82B             ADD      R0,SP,#+172
   \   00001C0E   0x.... 0x....      BL       hatoi
   \   00001C12   0x9034             STR      R0,[SP, #+208]
   2118                                          // 4. Test num_bytes. If Zero, We are done
   2119                                          if (num_bytes == 0)
   \   00001C14   0x9834             LDR      R0,[SP, #+208]
   \   00001C16   0x2800             CMP      R0,#+0
   \   00001C18   0xD114             BNE.N    ??RoadBrd_ParseString_317
   2120                                          {
   2121                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.\r\n", Address);
   \   00001C1A   0x9A31             LDR      R2,[SP, #+196]
   \   00001C1C   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_312+0xC
   \   00001C20   0xA80B             ADD      R0,SP,#+44
   \   00001C22   0x.... 0x....      BL       sprintf
   \   00001C26   0xE03B             B.N      ??RoadBrd_ParseString_318
   \                     ??RoadBrd_ParseString_171:
   \   00001C28   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001C2C   0x........         DC32     ?_59
   \   00001C30   0x........         DC32     ?_60
   \   00001C34   0x........         DC32     ?_61
   \   00001C38   0x........         DC32     ?_62
   \   00001C3C   0x........         DC32     ?_63
   \   00001C40   0x........         DC32     ?_64
   2122                                          }
   2123                                          else
   2124                                          {
   2125                                            // 5. Time to get all the data.
   2126                                            Error = 0;
   \                     ??RoadBrd_ParseString_317: (+1)
   \   00001C44   0x2000             MOVS     R0,#+0
   \   00001C46   0x9035             STR      R0,[SP, #+212]
   2127                                            for (x=0; x<num_bytes; x++)
   \   00001C48   0x2000             MOVS     R0,#+0
   \   00001C4A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_319: (+1)
   \   00001C4C   0x9834             LDR      R0,[SP, #+208]
   \   00001C4E   0x4287             CMP      R7,R0
   \   00001C50   0xDA26             BGE.N    ??RoadBrd_ParseString_318
   2128                                            {
   2129                                              tempBffr3[0] = tempBffr[10+x*3];
   \   00001C52   0x2003             MOVS     R0,#+3
   \   00001C54   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C58   0x4420             ADD      R0,R4,R0
   \   00001C5A   0xF990 0x000A      LDRSB    R0,[R0, #+10]
   \   00001C5E   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2130                                              tempBffr3[1] = tempBffr[11+x*3];
   \   00001C62   0x2003             MOVS     R0,#+3
   \   00001C64   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C68   0x4420             ADD      R0,R4,R0
   \   00001C6A   0xF990 0x000B      LDRSB    R0,[R0, #+11]
   \   00001C6E   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2131                                              tempBffr3[2] = 0x00;
   \   00001C72   0x2000             MOVS     R0,#+0
   \   00001C74   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2132                                              if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001C78   0xA82B             ADD      R0,SP,#+172
   \   00001C7A   0x.... 0x....      BL       isHexNum
   \   00001C7E   0x2800             CMP      R0,#+0
   \   00001C80   0xD107             BNE.N    ??RoadBrd_ParseString_320
   2133                                              {
   2134                                                strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001C82   0xF8DF 0x1D24      LDR.W    R1,??RoadBrd_ParseString_312+0x4
   \   00001C86   0xA80B             ADD      R0,SP,#+44
   \   00001C88   0x.... 0x....      BL       strcpy
   2135                                                Error = 1;
   \   00001C8C   0x2001             MOVS     R0,#+1
   \   00001C8E   0x9035             STR      R0,[SP, #+212]
   2136                                                break;
   \   00001C90   0xE006             B.N      ??RoadBrd_ParseString_318
   2137                                              }
   2138                                              else
   2139                                              {
   2140                                                i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_320: (+1)
   \   00001C92   0xA82B             ADD      R0,SP,#+172
   \   00001C94   0x.... 0x....      BL       hatoi
   \   00001C98   0xA99A             ADD      R1,SP,#+616
   \   00001C9A   0x55C8             STRB     R0,[R1, R7]
   2141                                              } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2142                                            } //EndFor (x=0; x<num_bytes; x++)
   \   00001C9C   0x1C7F             ADDS     R7,R7,#+1
   \   00001C9E   0xE7D5             B.N      ??RoadBrd_ParseString_319
   2143                                          } //EndElse (num_bytes == 0)
   2144                                          if (Error==0)
   \                     ??RoadBrd_ParseString_318: (+1)
   \   00001CA0   0x9835             LDR      R0,[SP, #+212]
   \   00001CA2   0x2800             CMP      R0,#+0
   \   00001CA4   0xD105             BNE.N    ??RoadBrd_ParseString_321
   2145                                          {
   2146                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.", Address);
   \   00001CA6   0x9A31             LDR      R2,[SP, #+196]
   \   00001CA8   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_322
   \   00001CAC   0xA80B             ADD      R0,SP,#+44
   \   00001CAE   0x.... 0x....      BL       sprintf
   2147                                          }
   2148                                          for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_321: (+1)
   \   00001CB2   0x2000             MOVS     R0,#+0
   \   00001CB4   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_323: (+1)
   \   00001CB6   0x9834             LDR      R0,[SP, #+208]
   \   00001CB8   0x4287             CMP      R7,R0
   \   00001CBA   0xDA0B             BGE.N    ??RoadBrd_ParseString_324
   2149                                          {
   2150                                            sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001CBC   0xA89A             ADD      R0,SP,#+616
   \   00001CBE   0x5DC2             LDRB     R2,[R0, R7]
   \   00001CC0   0xA1CE             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001CC2   0xA82B             ADD      R0,SP,#+172
   \   00001CC4   0x.... 0x....      BL       sprintf
   2151                                            strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001CC8   0xA92B             ADD      R1,SP,#+172
   \   00001CCA   0xA80B             ADD      R0,SP,#+44
   \   00001CCC   0x.... 0x....      BL       strcat
   2152                                          }
   \   00001CD0   0x1C7F             ADDS     R7,R7,#+1
   \   00001CD2   0xE7F0             B.N      ??RoadBrd_ParseString_323
   2153                                          strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_324: (+1)
   \   00001CD4   0xA1CA             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001CD6   0xA80B             ADD      R0,SP,#+44
   \   00001CD8   0x.... 0x....      BL       strcat
   2154                                          // 6. Time to send Command and collect status.
   2155                                          Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001CDC   0xF44F 0x73FA      MOV      R3,#+500
   \   00001CE0   0x9834             LDR      R0,[SP, #+208]
   \   00001CE2   0x0002             MOVS     R2,R0
   \   00001CE4   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001CE6   0xA99A             ADD      R1,SP,#+616
   \   00001CE8   0x9831             LDR      R0,[SP, #+196]
   \   00001CEA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001CEC   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001CF0   0x0006             MOVS     R6,R0
   2156                                          
   2157                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2158                                        
   2159                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2160                                      
   2161                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2162                                
   2163                                    break;
   \                     ??RoadBrd_ParseString_313: (+1)
   \   00001CF2   0xE1D4             B.N      ??RoadBrd_ParseString_304
   2164          //------------------
   2165                                  case 'R':
   2166                                    //I2C Receive Command
   2167                                    // Step 1. Validate format.
   2168                                    if( (tempBffr[3]!=':') ||
   2169                                        (tempBffr[6]!='.') ||
   2170                                        (tempBffr[9]!='.')  )
   \                     ??RoadBrd_ParseString_308: (+1)
   \   00001CF4   0x78E0             LDRB     R0,[R4, #+3]
   \   00001CF6   0x283A             CMP      R0,#+58
   \   00001CF8   0xD105             BNE.N    ??RoadBrd_ParseString_325
   \   00001CFA   0x79A0             LDRB     R0,[R4, #+6]
   \   00001CFC   0x282E             CMP      R0,#+46
   \   00001CFE   0xD102             BNE.N    ??RoadBrd_ParseString_325
   \   00001D00   0x7A60             LDRB     R0,[R4, #+9]
   \   00001D02   0x282E             CMP      R0,#+46
   \   00001D04   0xD012             BEQ.N    ??RoadBrd_ParseString_326
   2171                                    {
   2172                                      // Is this a BLE Operation?
   2173                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_325: (+1)
   \   00001D06   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D08   0x2D00             CMP      R5,#+0
   \   00001D0A   0xD009             BEQ.N    ??RoadBrd_ParseString_327
   2174                                      {
   2175                                        // Yes...Build and Send BLE Response NOW.
   2176                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D0C   0x49BA             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D0E   0xA80B             ADD      R0,SP,#+44
   \   00001D10   0x.... 0x....      BL       strcpy
   2177                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D14   0xA80B             ADD      R0,SP,#+44
   \   00001D16   0x.... 0x....      BL       strlen
   \   00001D1A   0xA90B             ADD      R1,SP,#+44
   \   00001D1C   0x.... 0x....      BL       BGM111_Transmit
   2178                                      }
   2179                                      
   2180                                      strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_327: (+1)
   \   00001D20   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_328
   \   00001D24   0xA80B             ADD      R0,SP,#+44
   \   00001D26   0x.... 0x....      BL       strcpy
   \   00001D2A   0xE10B             B.N      ??RoadBrd_ParseString_329
   2181                                    }
   2182                                    else
   2183                                    {
   2184                                      // Is this a BLE Operation?
   2185                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_326: (+1)
   \   00001D2C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D2E   0x2D00             CMP      R5,#+0
   \   00001D30   0xD009             BEQ.N    ??RoadBrd_ParseString_330
   2186                                      {
   2187                                        // Yes...Build and Send BLE Response NOW.
   2188                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D32   0x49B1             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D34   0xA80B             ADD      R0,SP,#+44
   \   00001D36   0x.... 0x....      BL       strcpy
   2189                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D3A   0xA80B             ADD      R0,SP,#+44
   \   00001D3C   0x.... 0x....      BL       strlen
   \   00001D40   0xA90B             ADD      R1,SP,#+44
   \   00001D42   0x.... 0x....      BL       BGM111_Transmit
   2190                                      }
   2191                                      
   2192                                      // 2. Grab Address and validate a legal number
   2193                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_330: (+1)
   \   00001D46   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001D4A   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2194                                      tempBffr3[1] = tempBffr[5];
   \   00001D4E   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001D52   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2195                                      tempBffr3[2] = 0x00;
   \   00001D56   0x2000             MOVS     R0,#+0
   \   00001D58   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2196                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D5C   0xA82B             ADD      R0,SP,#+172
   \   00001D5E   0x.... 0x....      BL       isHexNum
   \   00001D62   0x2800             CMP      R0,#+0
   \   00001D64   0xD105             BNE.N    ??RoadBrd_ParseString_331
   2197                                        strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001D66   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_332
   \   00001D6A   0xA80B             ADD      R0,SP,#+44
   \   00001D6C   0x.... 0x....      BL       strcpy
   \   00001D70   0xE0E8             B.N      ??RoadBrd_ParseString_329
   2198                                      else
   2199                                      {
   2200                                        // Legal Address. Save it as value
   2201                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_331: (+1)
   \   00001D72   0xA82B             ADD      R0,SP,#+172
   \   00001D74   0x.... 0x....      BL       hatoi
   \   00001D78   0x9031             STR      R0,[SP, #+196]
   2202                                        // 3. Now get the number of bytes of data from field.
   2203                                        tempBffr3[0] = tempBffr[7];
   \   00001D7A   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001D7E   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2204                                        tempBffr3[1] = tempBffr[8];
   \   00001D82   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001D86   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2205                                        tempBffr3[2] = 0x00;
   \   00001D8A   0x2000             MOVS     R0,#+0
   \   00001D8C   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2206                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D90   0xA82B             ADD      R0,SP,#+172
   \   00001D92   0x.... 0x....      BL       isHexNum
   \   00001D96   0x2800             CMP      R0,#+0
   \   00001D98   0xD105             BNE.N    ??RoadBrd_ParseString_333
   2207                                          strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001D9A   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_332+0x4
   \   00001D9E   0xA80B             ADD      R0,SP,#+44
   \   00001DA0   0x.... 0x....      BL       strcpy
   \   00001DA4   0xE0CE             B.N      ??RoadBrd_ParseString_329
   2208                                        else
   2209                                        {
   2210                                          // Legal NUMBER BYTES. Save it as value
   2211                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_333: (+1)
   \   00001DA6   0xA82B             ADD      R0,SP,#+172
   \   00001DA8   0x.... 0x....      BL       hatoi
   \   00001DAC   0x9034             STR      R0,[SP, #+208]
   2212                                          
   2213                                          // 3a. Now get the number of bytes Received of data from field.
   2214                                          tempBffr3[0] = tempBffr[10];
   \   00001DAE   0xF994 0x000A      LDRSB    R0,[R4, #+10]
   \   00001DB2   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2215                                          tempBffr3[1] = tempBffr[11];
   \   00001DB6   0xF994 0x000B      LDRSB    R0,[R4, #+11]
   \   00001DBA   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2216                                          tempBffr3[2] = 0x00;
   \   00001DBE   0x2000             MOVS     R0,#+0
   \   00001DC0   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2217                                          if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001DC4   0xA82B             ADD      R0,SP,#+172
   \   00001DC6   0x.... 0x....      BL       isHexNum
   \   00001DCA   0x2800             CMP      R0,#+0
   \   00001DCC   0xD10A             BNE.N    ??RoadBrd_ParseString_334
   2218                                            strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes RECEIVED not HEX Value.\r\n");
   \   00001DCE   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_335
   \   00001DD2   0xA80B             ADD      R0,SP,#+44
   \   00001DD4   0x.... 0x....      BL       strcpy
   \   00001DD8   0xE0B4             B.N      ??RoadBrd_ParseString_329
   \   00001DDA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_185:
   \   00001DDC   0x........         DC32     ?_65
   \   00001DE0   0x........         DC32     ?_66
   2219                                          else
   2220                                          {
   2221                                            // Legal NUMBER BYTES. Save it as value
   2222                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_334: (+1)
   \   00001DE4   0xA82B             ADD      R0,SP,#+172
   \   00001DE6   0x.... 0x....      BL       hatoi
   \   00001DEA   0x903A             STR      R0,[SP, #+232]
   2223                                            // 4. Test num_bytes. If Zero, We are done
   2224                                            if (num_bytes == 0)
   \   00001DEC   0x9834             LDR      R0,[SP, #+208]
   \   00001DEE   0x2800             CMP      R0,#+0
   \   00001DF0   0xD106             BNE.N    ??RoadBrd_ParseString_336
   2225                                            {
   2226                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00001DF2   0x9A31             LDR      R2,[SP, #+196]
   \   00001DF4   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_335+0x4
   \   00001DF8   0xA80B             ADD      R0,SP,#+44
   \   00001DFA   0x.... 0x....      BL       sprintf
   \   00001DFE   0xE038             B.N      ??RoadBrd_ParseString_337
   2227                                            }
   2228                                            else
   2229                                            {
   2230                                              // 5. Time to get all the data.
   2231                                              Error = 0;
   \                     ??RoadBrd_ParseString_336: (+1)
   \   00001E00   0x2000             MOVS     R0,#+0
   \   00001E02   0x9035             STR      R0,[SP, #+212]
   2232                                              for (x=0; x<num_bytes; x++)
   \   00001E04   0x2000             MOVS     R0,#+0
   \   00001E06   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_338: (+1)
   \   00001E08   0x9834             LDR      R0,[SP, #+208]
   \   00001E0A   0x4287             CMP      R7,R0
   \   00001E0C   0xDA31             BGE.N    ??RoadBrd_ParseString_337
   2233                                              {
   2234                                                tempBffr3[0] = tempBffr[13+x*3];
   \   00001E0E   0x2003             MOVS     R0,#+3
   \   00001E10   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E14   0x4420             ADD      R0,R4,R0
   \   00001E16   0xF990 0x000D      LDRSB    R0,[R0, #+13]
   \   00001E1A   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2235                                                tempBffr3[1] = tempBffr[14+x*3];
   \   00001E1E   0x2003             MOVS     R0,#+3
   \   00001E20   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E24   0x4420             ADD      R0,R4,R0
   \   00001E26   0xF990 0x000E      LDRSB    R0,[R0, #+14]
   \   00001E2A   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2236                                                tempBffr3[2] = 0x00;
   \   00001E2E   0x2000             MOVS     R0,#+0
   \   00001E30   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2237                                                if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001E34   0xA82B             ADD      R0,SP,#+172
   \   00001E36   0x.... 0x....      BL       isHexNum
   \   00001E3A   0x2800             CMP      R0,#+0
   \   00001E3C   0xD112             BNE.N    ??RoadBrd_ParseString_339
   2238                                                {
   2239                                                  strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Data not HEX Value.\r\n");
   \   00001E3E   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_340
   \   00001E42   0xA80B             ADD      R0,SP,#+44
   \   00001E44   0x.... 0x....      BL       strcpy
   2240                                                  Error = 1;
   \   00001E48   0x2001             MOVS     R0,#+1
   \   00001E4A   0x9035             STR      R0,[SP, #+212]
   2241                                                  break;
   \   00001E4C   0xE011             B.N      ??RoadBrd_ParseString_337
   \   00001E4E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_190:
   \   00001E50   0x........         DC32     ?_67
   \   00001E54   0x........         DC32     ?_68
   \   00001E58   0x........         DC32     ?_69
   \   00001E5C   0x........         DC32     ?_70
   \   00001E60   0x........         DC32     ?_71
   2242                                                }
   2243                                                else
   2244                                                {
   2245                                                  i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_339: (+1)
   \   00001E64   0xA82B             ADD      R0,SP,#+172
   \   00001E66   0x.... 0x....      BL       hatoi
   \   00001E6A   0xA99A             ADD      R1,SP,#+616
   \   00001E6C   0x55C8             STRB     R0,[R1, R7]
   2246                                                } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2247                                              } //EndFor (x=0; x<num_bytes; x++)
   \   00001E6E   0x1C7F             ADDS     R7,R7,#+1
   \   00001E70   0xE7CA             B.N      ??RoadBrd_ParseString_338
   2248                                            } //EndElse (num_bytes == 0)
   2249                                            if (Error==0)
   \                     ??RoadBrd_ParseString_337: (+1)
   \   00001E72   0x9835             LDR      R0,[SP, #+212]
   \   00001E74   0x2800             CMP      R0,#+0
   \   00001E76   0xD105             BNE.N    ??RoadBrd_ParseString_341
   2250                                            {
   2251                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.", Address);
   \   00001E78   0x9A31             LDR      R2,[SP, #+196]
   \   00001E7A   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_340+0x4
   \   00001E7E   0xA80B             ADD      R0,SP,#+44
   \   00001E80   0x.... 0x....      BL       sprintf
   2252                                            }
   2253                                            for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_341: (+1)
   \   00001E84   0x2000             MOVS     R0,#+0
   \   00001E86   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_342: (+1)
   \   00001E88   0x9834             LDR      R0,[SP, #+208]
   \   00001E8A   0x4287             CMP      R7,R0
   \   00001E8C   0xDA0B             BGE.N    ??RoadBrd_ParseString_343
   2254                                            {
   2255                                              sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001E8E   0xA89A             ADD      R0,SP,#+616
   \   00001E90   0x5DC2             LDRB     R2,[R0, R7]
   \   00001E92   0xA15A             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001E94   0xA82B             ADD      R0,SP,#+172
   \   00001E96   0x.... 0x....      BL       sprintf
   2256                                              strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001E9A   0xA92B             ADD      R1,SP,#+172
   \   00001E9C   0xA80B             ADD      R0,SP,#+44
   \   00001E9E   0x.... 0x....      BL       strcat
   2257                                            }
   \   00001EA2   0x1C7F             ADDS     R7,R7,#+1
   \   00001EA4   0xE7F0             B.N      ??RoadBrd_ParseString_342
   2258                                            strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_343: (+1)
   \   00001EA6   0xA156             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001EA8   0xA80B             ADD      R0,SP,#+44
   \   00001EAA   0x.... 0x....      BL       strcat
   2259                                            // 6. Time to send Command and collect status.
   2260                                            Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001EAE   0xF44F 0x73FA      MOV      R3,#+500
   \   00001EB2   0x9834             LDR      R0,[SP, #+208]
   \   00001EB4   0x0002             MOVS     R2,R0
   \   00001EB6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001EB8   0xA99A             ADD      R1,SP,#+616
   \   00001EBA   0x9831             LDR      R0,[SP, #+196]
   \   00001EBC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EBE   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001EC2   0x0006             MOVS     R6,R0
   2261                                            // 6a. Wait for Command to complete(100ms).
   2262           
   2263                                            // 7. If Status was good, Time to get response.
   2264                                            if (Status == HAL_OK)
   \   00001EC4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EC6   0x2E00             CMP      R6,#+0
   \   00001EC8   0xD10E             BNE.N    ??RoadBrd_ParseString_344
   2265                                            {
   2266                                              Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001ECA   0xF44F 0x73FA      MOV      R3,#+500
   \   00001ECE   0x983A             LDR      R0,[SP, #+232]
   \   00001ED0   0x0002             MOVS     R2,R0
   \   00001ED2   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001ED4   0xA99A             ADD      R1,SP,#+616
   \   00001ED6   0x9831             LDR      R0,[SP, #+196]
   \   00001ED8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EDA   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001EDE   0x0006             MOVS     R6,R0
   2267                                            }
   2268                                            else
   2269                                              break;
   2270                                            // 7a. Wait for Command to complete(100ms).
   2271                                            if (Status == HAL_OK)
   \   00001EE0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EE2   0x2E00             CMP      R6,#+0
   \   00001EE4   0xD105             BNE.N    ??RoadBrd_ParseString_345
   \   00001EE6   0xE000             B.N      ??RoadBrd_ParseString_346
   \                     ??RoadBrd_ParseString_344: (+1)
   \   00001EE8   0xE0D9             B.N      ??RoadBrd_ParseString_304
   2272                                            {
   2273                                              Status = RoadBrd_WaitForState( 20 );
   \                     ??RoadBrd_ParseString_346: (+1)
   \   00001EEA   0x2014             MOVS     R0,#+20
   \   00001EEC   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001EF0   0x0006             MOVS     R6,R0
   2274                                            }
   2275          
   2276                                            // 8. IfGood report, Need to Output Data.
   2277                                            if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_345: (+1)
   \   00001EF2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EF4   0x2E00             CMP      R6,#+0
   \   00001EF6   0xD125             BNE.N    ??RoadBrd_ParseString_329
   2278                                            {
   2279                                              // Send string to UART..
   2280          #ifdef NUCLEO
   2281                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2282          #else
   2283                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001EF8   0xA90B             ADD      R1,SP,#+44
   \   00001EFA   0x2000             MOVS     R0,#+0
   \   00001EFC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001F00   0x0006             MOVS     R6,R0
   2284          #endif
   2285                                              if (Status != HAL_OK)
   \   00001F02   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F04   0x2E00             CMP      R6,#+0
   \   00001F06   0xD003             BEQ.N    ??RoadBrd_ParseString_347
   2286                                                return Status;
   \   00001F08   0x0030             MOVS     R0,R6
   \   00001F0A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001F0C   0xF002 0xBE32      B.W      ??RoadBrd_ParseString_4
   2287                                              // NOW, Build Data String..
   2288                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_347: (+1)
   \   00001F10   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_348
   \   00001F14   0xA80B             ADD      R0,SP,#+44
   \   00001F16   0x.... 0x....      BL       sprintf
   2289                                              for(x=0; x<num_bytes_received; x++)
   \   00001F1A   0x2000             MOVS     R0,#+0
   \   00001F1C   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_349: (+1)
   \   00001F1E   0x983A             LDR      R0,[SP, #+232]
   \   00001F20   0x4287             CMP      R7,R0
   \   00001F22   0xDA0B             BGE.N    ??RoadBrd_ParseString_350
   2290                                              {
   2291                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001F24   0xA89A             ADD      R0,SP,#+616
   \   00001F26   0x5DC2             LDRB     R2,[R0, R7]
   \   00001F28   0xA134             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001F2A   0xA82B             ADD      R0,SP,#+172
   \   00001F2C   0x.... 0x....      BL       sprintf
   2292                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001F30   0xA92B             ADD      R1,SP,#+172
   \   00001F32   0xA80B             ADD      R0,SP,#+44
   \   00001F34   0x.... 0x....      BL       strcat
   2293                                              }
   \   00001F38   0x1C7F             ADDS     R7,R7,#+1
   \   00001F3A   0xE7F0             B.N      ??RoadBrd_ParseString_349
   2294                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_350: (+1)
   \   00001F3C   0xA130             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001F3E   0xA80B             ADD      R0,SP,#+44
   \   00001F40   0x.... 0x....      BL       strcat
   2295                                            }
   2296                                          }
   2297                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2298                                        
   2299                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2300                                      
   2301                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2302                                
   2303                                    break;
   \                     ??RoadBrd_ParseString_329: (+1)
   \   00001F44   0xE0AB             B.N      ??RoadBrd_ParseString_304
   2304          //------------------
   2305                                  case 'Q':
   2306                                    //I2C Receive Command
   2307                                    // Step 1. Validate format.
   2308                                    if( (tempBffr[3]!=':') ||
   2309                                        (tempBffr[6]!='.')  )
   \                     ??RoadBrd_ParseString_305: (+1)
   \   00001F46   0x78E0             LDRB     R0,[R4, #+3]
   \   00001F48   0x283A             CMP      R0,#+58
   \   00001F4A   0xD102             BNE.N    ??RoadBrd_ParseString_351
   \   00001F4C   0x79A0             LDRB     R0,[R4, #+6]
   \   00001F4E   0x282E             CMP      R0,#+46
   \   00001F50   0xD012             BEQ.N    ??RoadBrd_ParseString_352
   2310                                    {
   2311                                      // Is this a BLE Operation?
   2312                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_351: (+1)
   \   00001F52   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F54   0x2D00             CMP      R5,#+0
   \   00001F56   0xD009             BEQ.N    ??RoadBrd_ParseString_353
   2313                                      {
   2314                                        // Yes...Build and Send BLE Response NOW.
   2315                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F58   0x4927             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F5A   0xA80B             ADD      R0,SP,#+44
   \   00001F5C   0x.... 0x....      BL       strcpy
   2316                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F60   0xA80B             ADD      R0,SP,#+44
   \   00001F62   0x.... 0x....      BL       strlen
   \   00001F66   0xA90B             ADD      R1,SP,#+44
   \   00001F68   0x.... 0x....      BL       BGM111_Transmit
   2317                                      }
   2318                                      
   2319                                      strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_353: (+1)
   \   00001F6C   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_354
   \   00001F70   0xA80B             ADD      R0,SP,#+44
   \   00001F72   0x.... 0x....      BL       strcpy
   \   00001F76   0xE08C             B.N      ??RoadBrd_ParseString_355
   2320                                    }
   2321                                    else
   2322                                    {
   2323                                      // Is this a BLE Operation?
   2324                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_352: (+1)
   \   00001F78   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F7A   0x2D00             CMP      R5,#+0
   \   00001F7C   0xD009             BEQ.N    ??RoadBrd_ParseString_356
   2325                                      {
   2326                                        // Yes...Build and Send BLE Response NOW.
   2327                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F7E   0x491E             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F80   0xA80B             ADD      R0,SP,#+44
   \   00001F82   0x.... 0x....      BL       strcpy
   2328                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F86   0xA80B             ADD      R0,SP,#+44
   \   00001F88   0x.... 0x....      BL       strlen
   \   00001F8C   0xA90B             ADD      R1,SP,#+44
   \   00001F8E   0x.... 0x....      BL       BGM111_Transmit
   2329                                      }
   2330                                      
   2331                                      // 2. Grab Address and validate a legal number
   2332                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_356: (+1)
   \   00001F92   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001F96   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2333                                      tempBffr3[1] = tempBffr[5];
   \   00001F9A   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001F9E   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2334                                      tempBffr3[2] = 0x00;
   \   00001FA2   0x2000             MOVS     R0,#+0
   \   00001FA4   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2335                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FA8   0xA82B             ADD      R0,SP,#+172
   \   00001FAA   0x.... 0x....      BL       isHexNum
   \   00001FAE   0x2800             CMP      R0,#+0
   \   00001FB0   0xD105             BNE.N    ??RoadBrd_ParseString_357
   2336                                        strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001FB2   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_354+0x4
   \   00001FB6   0xA80B             ADD      R0,SP,#+44
   \   00001FB8   0x.... 0x....      BL       strcpy
   \   00001FBC   0xE069             B.N      ??RoadBrd_ParseString_355
   2337                                      else
   2338                                      {
   2339                                        // Legal Address. Save it as value
   2340                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_357: (+1)
   \   00001FBE   0xA82B             ADD      R0,SP,#+172
   \   00001FC0   0x.... 0x....      BL       hatoi
   \   00001FC4   0x9031             STR      R0,[SP, #+196]
   2341                                        // 3. Now get the number of bytes Received of data from field.
   2342                                        tempBffr3[0] = tempBffr[7];
   \   00001FC6   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001FCA   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2343                                        tempBffr3[1] = tempBffr[8];
   \   00001FCE   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001FD2   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2344                                        tempBffr3[2] = 0x00;
   \   00001FD6   0x2000             MOVS     R0,#+0
   \   00001FD8   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2345                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FDC   0xA82B             ADD      R0,SP,#+172
   \   00001FDE   0x.... 0x....      BL       isHexNum
   \   00001FE2   0x2800             CMP      R0,#+0
   \   00001FE4   0xD10E             BNE.N    ??RoadBrd_ParseString_358
   2346                                          strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001FE6   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_359
   \   00001FEA   0xA80B             ADD      R0,SP,#+44
   \   00001FEC   0x.... 0x....      BL       strcpy
   \   00001FF0   0xE04F             B.N      ??RoadBrd_ParseString_355
   \   00001FF2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_207:
   \   00001FF4   0x........         DC32     ?_72
   \   00001FF8   0x........         DC32     ?_24
   \   00001FFC   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   00002000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2347                                        else
   2348                                        {
   2349                                            // Legal NUMBER BYTES. Save it as value
   2350                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_358: (+1)
   \   00002004   0xA82B             ADD      R0,SP,#+172
   \   00002006   0x.... 0x....      BL       hatoi
   \   0000200A   0x903A             STR      R0,[SP, #+232]
   2351                                            // 4. Test num_bytes. If Zero, We are done
   2352                                            sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   0000200C   0x9A31             LDR      R2,[SP, #+196]
   \   0000200E   0xF8DF 0x1BF8      LDR.W    R1,??RoadBrd_ParseString_335+0x4
   \   00002012   0xA80B             ADD      R0,SP,#+44
   \   00002014   0x.... 0x....      BL       sprintf
   2353                                            // 7. If Status was good, Time to get response.
   2354                                            Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00002018   0xF44F 0x73FA      MOV      R3,#+500
   \   0000201C   0x983A             LDR      R0,[SP, #+232]
   \   0000201E   0x0002             MOVS     R2,R0
   \   00002020   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00002022   0xA99A             ADD      R1,SP,#+616
   \   00002024   0x9831             LDR      R0,[SP, #+196]
   \   00002026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00002028   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   0000202C   0x0006             MOVS     R6,R0
   2355                                            // 7a. Wait for Command to complete(100ms).
   2356                                            if (Status == HAL_OK)
   \   0000202E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002030   0x2E00             CMP      R6,#+0
   \   00002032   0xD107             BNE.N    ??RoadBrd_ParseString_360
   2357                                            {
   2358                                              Status = RoadBrd_WaitForState( 20 );
   \   00002034   0x2014             MOVS     R0,#+20
   \   00002036   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000203A   0x0006             MOVS     R6,R0
   2359                                            }
   2360                                            else
   2361                                              break;
   2362                                            // 8. IfGood report, Need to Output Data.
   2363                                            if (Status == HAL_OK)
   \   0000203C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000203E   0x2E00             CMP      R6,#+0
   \   00002040   0xD127             BNE.N    ??RoadBrd_ParseString_355
   \   00002042   0xE000             B.N      ??RoadBrd_ParseString_361
   \                     ??RoadBrd_ParseString_360: (+1)
   \   00002044   0xE02B             B.N      ??RoadBrd_ParseString_304
   2364                                            {
   2365                                              // Send string to UART..
   2366          #ifdef NUCLEO
   2367                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2368          #else
   2369                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_361: (+1)
   \   00002046   0xA90B             ADD      R1,SP,#+44
   \   00002048   0x2000             MOVS     R0,#+0
   \   0000204A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000204E   0x0006             MOVS     R6,R0
   2370          #endif
   2371                                              if (Status != HAL_OK)
   \   00002050   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002052   0x2E00             CMP      R6,#+0
   \   00002054   0xD003             BEQ.N    ??RoadBrd_ParseString_362
   2372                                                return Status;
   \   00002056   0x0030             MOVS     R0,R6
   \   00002058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000205A   0xF002 0xBD8B      B.W      ??RoadBrd_ParseString_4
   2373                                              // NOW, Build Data String..
   2374                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_362: (+1)
   \   0000205E   0xF8DF 0x1C9C      LDR.W    R1,??RoadBrd_ParseString_348
   \   00002062   0xA80B             ADD      R0,SP,#+44
   \   00002064   0x.... 0x....      BL       sprintf
   2375                                              for(x=0; x<num_bytes_received; x++)
   \   00002068   0x2000             MOVS     R0,#+0
   \   0000206A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_363: (+1)
   \   0000206C   0x983A             LDR      R0,[SP, #+232]
   \   0000206E   0x4287             CMP      R7,R0
   \   00002070   0xDA0B             BGE.N    ??RoadBrd_ParseString_364
   2376                                              {
   2377                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00002072   0xA89A             ADD      R0,SP,#+616
   \   00002074   0x5DC2             LDRB     R2,[R0, R7]
   \   00002076   0xA1D3             ADR.N    R1,??RoadBrd_ParseString_246+0x8  ;; "%x."
   \   00002078   0xA82B             ADD      R0,SP,#+172
   \   0000207A   0x.... 0x....      BL       sprintf
   2378                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   0000207E   0xA92B             ADD      R1,SP,#+172
   \   00002080   0xA80B             ADD      R0,SP,#+44
   \   00002082   0x.... 0x....      BL       strcat
   2379                                              }
   \   00002086   0x1C7F             ADDS     R7,R7,#+1
   \   00002088   0xE7F0             B.N      ??RoadBrd_ParseString_363
   2380                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_364: (+1)
   \   0000208A   0xA1CF             ADR.N    R1,??RoadBrd_ParseString_246+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000208C   0xA80B             ADD      R0,SP,#+44
   \   0000208E   0x.... 0x....      BL       strcat
   2381                                          }
   2382                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2383                                        
   2384                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2385                                      
   2386                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2387                                
   2388                                    break;
   \                     ??RoadBrd_ParseString_355: (+1)
   \   00002092   0xE004             B.N      ??RoadBrd_ParseString_304
   2389                                  default:
   2390                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_306: (+1)
   \   00002094   0xF8DF 0x1798      LDR.W    R1,??RoadBrd_ParseString_280
   \   00002098   0xA80B             ADD      R0,SP,#+44
   \   0000209A   0x.... 0x....      BL       strcpy
   2391                                    break;
   2392                                } //EndSwitch ( tempBffr[2] )
   2393                              } //EndElse (Size < 9)
   2394                              break;
   \                     ??RoadBrd_ParseString_304: (+1)
   \   0000209E   0xF002 0xBCD8      B.W      ??RoadBrd_ParseString_289
   \   000020A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_215:
   \   000020A4   0x........         DC32     ?_73
   \   000020A8   0x........         DC32     ?_74
   \   000020AC   0x........         DC32     ?_75
   \   000020B0   0x........         DC32     ?_35
   2395          //++++++++++++++++++++++++++++++++++++++++++  Calibration Commands.
   2396                            case 'C':
   2397                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_290: (+1)
   \   000020B4   0x2000             MOVS     R0,#+0
   \   000020B6   0x0006             MOVS     R6,R0
   2398                              if (Size == 2)
   \   000020B8   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000020BC   0x2802             CMP      R0,#+2
   \   000020BE   0xF040 0x80E9      BNE.W    ??RoadBrd_ParseString_365
   2399                              {
   2400                                //------------------ TC Command: Dump Calibration Settings.      
   2401                                // Read Cool Eye/Grid Eye Values.....
   2402                                if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   000020C2   0x2005             MOVS     R0,#+5
   \   000020C4   0x.... 0x....      BL       Get_DriverStates
   \   000020C8   0x2800             CMP      R0,#+0
   \   000020CA   0xD004             BEQ.N    ??RoadBrd_ParseString_366
   2403                                {
   2404                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasure );
   \   000020CC   0xA85B             ADD      R0,SP,#+364
   \   000020CE   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   000020D2   0x0006             MOVS     R6,R0
   \   000020D4   0xE00B             B.N      ??RoadBrd_ParseString_367
   2405                                }
   2406                                else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_366: (+1)
   \   000020D6   0x2006             MOVS     R0,#+6
   \   000020D8   0x.... 0x....      BL       Get_DriverStates
   \   000020DC   0x2800             CMP      R0,#+0
   \   000020DE   0xD004             BEQ.N    ??RoadBrd_ParseString_368
   2407                                {
   2408                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasure );
   \   000020E0   0xA85B             ADD      R0,SP,#+364
   \   000020E2   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000020E6   0x0006             MOVS     R6,R0
   \   000020E8   0xE001             B.N      ??RoadBrd_ParseString_367
   2409                                }
   2410                                else
   2411                                  Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_368: (+1)
   \   000020EA   0x2001             MOVS     R0,#+1
   \   000020EC   0x0006             MOVS     R6,R0
   2412                                
   2413                                // Is this a BLE Operation?
   2414                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_367: (+1)
   \   000020EE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000020F0   0x2E00             CMP      R6,#+0
   \   000020F2   0xF040 0x80B5      BNE.W    ??RoadBrd_ParseString_369
   2415                                {
   2416                                  // OK Next Sensor.
   2417                                  // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   2418                                  Status = RoadBrd_ReadTemp_Scaled( &TMeasure );
   \   000020F6   0xA83C             ADD      R0,SP,#+240
   \   000020F8   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   000020FC   0x0006             MOVS     R6,R0
   2419                                  if (Status == HAL_OK)
   \   000020FE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002100   0x2E00             CMP      R6,#+0
   \   00002102   0xF040 0x8095      BNE.W    ??RoadBrd_ParseString_370
   2420                                  {
   2421                                    // OK Next Sensor.
   2422                                    // Read Humidity Sensor sensor and return Humidity results....
   2423                                    Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasure );
   \   00002106   0xA849             ADD      R0,SP,#+292
   \   00002108   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   0000210C   0x0006             MOVS     R6,R0
   2424                                    if (Status == HAL_OK)
   \   0000210E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002110   0x2E00             CMP      R6,#+0
   \   00002112   0xD174             BNE.N    ??RoadBrd_ParseString_371
   2425                                    {
   2426                                      // OK Next Sensor.
   2427                                      //Status = RoadBrd_Barometer_Status( &PRMeasure );
   2428                                      Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasure );
   \   00002114   0xA8AE             ADD      R0,SP,#+696
   \   00002116   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   0000211A   0x0006             MOVS     R6,R0
   2429                                      if (Status == HAL_OK)
   \   0000211C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000211E   0x2E00             CMP      R6,#+0
   \   00002120   0xD158             BNE.N    ??RoadBrd_ParseString_372
   2430                                      {
   2431                                        if ( BLE_Flag )
   \   00002122   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002124   0x2D00             CMP      R5,#+0
   \   00002126   0xD025             BEQ.N    ??RoadBrd_ParseString_373
   2432                                        {
   2433                                          // Yes...Build and Send BLE Response NOW.
   2434                                          sprintf( (char *)tempBffr2, "<STATUS>%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s</STATUS>", (char *)GridMeasure.GridEye1.TempC,
   2435                                                  (char *)GridMeasure.GridEye2.TempC,
   2436                                                  (char *)GridMeasure.GridEye3.TempC,
   2437                                                  (char *)GridMeasure.GridEye4.TempC,
   2438                                                  (char *)GridMeasure.GridEye5.TempC,
   2439                                                  (char *)GridMeasure.GridEye6.TempC,
   2440                                                  (char *)GridMeasure.GridEye7.TempC,
   2441                                                  (char *)GridMeasure.GridEye8.TempC,
   2442                                                  (char *)GridMeasure.Thermistor.TempC,
   2443                                                  (char *)TMeasure.TempC,
   2444                                                  (char *)HMeasure.Humidity,
   2445                                                  (char *)PRPMeasure.Pressure);
   \   00002128   0xA8AE             ADD      R0,SP,#+696
   \   0000212A   0x9009             STR      R0,[SP, #+36]
   \   0000212C   0xA849             ADD      R0,SP,#+292
   \   0000212E   0x9008             STR      R0,[SP, #+32]
   \   00002130   0xA83C             ADD      R0,SP,#+240
   \   00002132   0x9007             STR      R0,[SP, #+28]
   \   00002134   0xA85B             ADD      R0,SP,#+364
   \   00002136   0x9006             STR      R0,[SP, #+24]
   \   00002138   0xA88B             ADD      R0,SP,#+556
   \   0000213A   0x9005             STR      R0,[SP, #+20]
   \   0000213C   0xA885             ADD      R0,SP,#+532
   \   0000213E   0x9004             STR      R0,[SP, #+16]
   \   00002140   0xA87F             ADD      R0,SP,#+508
   \   00002142   0x9003             STR      R0,[SP, #+12]
   \   00002144   0xA879             ADD      R0,SP,#+484
   \   00002146   0x9002             STR      R0,[SP, #+8]
   \   00002148   0xA873             ADD      R0,SP,#+460
   \   0000214A   0x9001             STR      R0,[SP, #+4]
   \   0000214C   0xA86D             ADD      R0,SP,#+436
   \   0000214E   0x9000             STR      R0,[SP, #+0]
   \   00002150   0xAB67             ADD      R3,SP,#+412
   \   00002152   0xAA61             ADD      R2,SP,#+388
   \   00002154   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_374
   \   00002158   0xA80B             ADD      R0,SP,#+44
   \   0000215A   0x.... 0x....      BL       sprintf
   2446                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000215E   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_374+0x4
   \   00002162   0xA80B             ADD      R0,SP,#+44
   \   00002164   0x.... 0x....      BL       strcpy
   2447                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002168   0xA80B             ADD      R0,SP,#+44
   \   0000216A   0x.... 0x....      BL       strlen
   \   0000216E   0xA90B             ADD      R1,SP,#+44
   \   00002170   0x.... 0x....      BL       BGM111_Transmit
   2448                                        }
   2449                                        
   2450                                        //sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   2451                                        sprintf( (char *)tempBffr2, "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", (char *)GridMeasure.GridEye1.TempC,
   2452                                                (char *)GridMeasure.GridEye2.TempC,
   2453                                                (char *)GridMeasure.GridEye3.TempC,
   2454                                                (char *)GridMeasure.GridEye4.TempC,
   2455                                                (char *)GridMeasure.GridEye5.TempC,
   2456                                                (char *)GridMeasure.GridEye6.TempC,
   2457                                                (char *)GridMeasure.GridEye7.TempC,
   2458                                                (char *)GridMeasure.GridEye8.TempC,
   2459                                                (char *)GridMeasure.Thermistor.TempC,
   2460                                                (char *)TMeasure.TempC,
   2461                                                (char *)HMeasure.Humidity,
   2462                                                (char *)PRPMeasure.Pressure);
   \                     ??RoadBrd_ParseString_373: (+1)
   \   00002174   0xA8AE             ADD      R0,SP,#+696
   \   00002176   0x9009             STR      R0,[SP, #+36]
   \   00002178   0xA849             ADD      R0,SP,#+292
   \   0000217A   0x9008             STR      R0,[SP, #+32]
   \   0000217C   0xA83C             ADD      R0,SP,#+240
   \   0000217E   0x9007             STR      R0,[SP, #+28]
   \   00002180   0xA85B             ADD      R0,SP,#+364
   \   00002182   0x9006             STR      R0,[SP, #+24]
   \   00002184   0xA88B             ADD      R0,SP,#+556
   \   00002186   0x9005             STR      R0,[SP, #+20]
   \   00002188   0xA885             ADD      R0,SP,#+532
   \   0000218A   0x9004             STR      R0,[SP, #+16]
   \   0000218C   0xA87F             ADD      R0,SP,#+508
   \   0000218E   0x9003             STR      R0,[SP, #+12]
   \   00002190   0xA879             ADD      R0,SP,#+484
   \   00002192   0x9002             STR      R0,[SP, #+8]
   \   00002194   0xA873             ADD      R0,SP,#+460
   \   00002196   0x9001             STR      R0,[SP, #+4]
   \   00002198   0xA86D             ADD      R0,SP,#+436
   \   0000219A   0x9000             STR      R0,[SP, #+0]
   \   0000219C   0xAB67             ADD      R3,SP,#+412
   \   0000219E   0xAA61             ADD      R2,SP,#+388
   \   000021A0   0xF8DF 0x1D40      LDR.W    R1,??RoadBrd_ParseString_374+0x8
   \   000021A4   0xA80B             ADD      R0,SP,#+44
   \   000021A6   0x.... 0x....      BL       sprintf
   2463                                        // Send string to UART..
   2464          #ifdef NUCLEO
   2465                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2466          #else
   2467                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000021AA   0xA90B             ADD      R1,SP,#+44
   \   000021AC   0x2000             MOVS     R0,#+0
   \   000021AE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000021B2   0x0006             MOVS     R6,R0
   2468          #endif
   2469                                        if (Status != HAL_OK)
   \   000021B4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000021B6   0x2E00             CMP      R6,#+0
   \   000021B8   0xD003             BEQ.N    ??RoadBrd_ParseString_375
   2470                                          return Status;
   \   000021BA   0x0030             MOVS     R0,R6
   \   000021BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021BE   0xF002 0xBCD9      B.W      ??RoadBrd_ParseString_4
   2471                                        // NOW, Build Data String..
   2472                                        sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_375: (+1)
   \   000021C2   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_376
   \   000021C6   0xA80B             ADD      R0,SP,#+44
   \   000021C8   0x.... 0x....      BL       sprintf
   \   000021CC   0xF001 0xBE9D      B.W      ??RoadBrd_ParseString_377
   \                     ??RoadBrd_ParseString_222:
   \   000021D0   0x........         DC32     ?_36
   2473                                      } // Endif (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2474                                      else
   2475                                      {
   2476                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_372: (+1)
   \   000021D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000021D6   0x2D00             CMP      R5,#+0
   \   000021D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_378
   2477                                        {
   2478                                          // Yes...Build and Send BLE Response NOW.
   2479                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>");
   \   000021DA   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_376+0x4
   \   000021DE   0xA80B             ADD      R0,SP,#+44
   \   000021E0   0x.... 0x....      BL       strcpy
   2480                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000021E4   0xA80B             ADD      R0,SP,#+44
   \   000021E6   0x.... 0x....      BL       strlen
   \   000021EA   0xA90B             ADD      R1,SP,#+44
   \   000021EC   0x.... 0x....      BL       BGM111_Transmit
   2481                                        }
   2482                                        
   2483                                        sprintf( (char *)tempBffr2, "Pressure TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_378: (+1)
   \   000021F0   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_376+0x8
   \   000021F4   0xA80B             ADD      R0,SP,#+44
   \   000021F6   0x.... 0x....      BL       sprintf
   \   000021FA   0xF001 0xBE86      B.W      ??RoadBrd_ParseString_377
   2484                                      } // EndElse (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2485                                    } // Endif (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2486                                    else
   2487                                    {
   2488                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_371: (+1)
   \   000021FE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002200   0x2D00             CMP      R5,#+0
   \   00002202   0xD00A             BEQ.N    ??RoadBrd_ParseString_379
   2489                                      {
   2490                                        // Yes...Build and Send BLE Response NOW.
   2491                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>");
   \   00002204   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_376+0xC
   \   00002208   0xA80B             ADD      R0,SP,#+44
   \   0000220A   0x.... 0x....      BL       strcpy
   2492                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000220E   0xA80B             ADD      R0,SP,#+44
   \   00002210   0x.... 0x....      BL       strlen
   \   00002214   0xA90B             ADD      R1,SP,#+44
   \   00002216   0x.... 0x....      BL       BGM111_Transmit
   2493                                      }
   2494                                      
   2495                                      sprintf( (char *)tempBffr2, "Humidity TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_379: (+1)
   \   0000221A   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_376+0x10
   \   0000221E   0xA80B             ADD      R0,SP,#+44
   \   00002220   0x.... 0x....      BL       sprintf
   \   00002224   0xF001 0xBE71      B.W      ??RoadBrd_ParseString_377
   \                     ??RoadBrd_ParseString_225:
   \   00002228   0x........         DC32     ?_76
   \   0000222C   0x........         DC32     ?_77
   2496                                    } // EndElse (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2497                                  } // Endif (Status == HAL_OK) RoadBrd_ReadTemp
   2498                                  else
   2499                                  {
   2500                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_370: (+1)
   \   00002230   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002232   0x2D00             CMP      R5,#+0
   \   00002234   0xD00A             BEQ.N    ??RoadBrd_ParseString_380
   2501                                    {
   2502                                      // Yes...Build and Send BLE Response NOW.
   2503                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>");
   \   00002236   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_376+0x14
   \   0000223A   0xA80B             ADD      R0,SP,#+44
   \   0000223C   0x.... 0x....      BL       strcpy
   2504                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002240   0xA80B             ADD      R0,SP,#+44
   \   00002242   0x.... 0x....      BL       strlen
   \   00002246   0xA90B             ADD      R1,SP,#+44
   \   00002248   0x.... 0x....      BL       BGM111_Transmit
   2505                                    }
   2506                                    
   2507                                    sprintf( (char *)tempBffr2, "AMBIENT TEMPERATURE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_380: (+1)
   \   0000224C   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_376+0x18
   \   00002250   0xA80B             ADD      R0,SP,#+44
   \   00002252   0x.... 0x....      BL       sprintf
   \   00002256   0xF001 0xBE58      B.W      ??RoadBrd_ParseString_377
   \   0000225A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_228:
   \   0000225C   0x........         DC32     ?_78
   2508                                  } // EndElse (Status == HAL_OK) RoadBrd_ReadTemp
   2509                                } // Endif (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2510                                else
   2511                                {
   2512                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_369: (+1)
   \   00002260   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002262   0x2D00             CMP      R5,#+0
   \   00002264   0xD00A             BEQ.N    ??RoadBrd_ParseString_381
   2513                                  {
   2514                                    // Yes...Build and Send BLE Response NOW.
   2515                                    strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>");
   \   00002266   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_382
   \   0000226A   0xA80B             ADD      R0,SP,#+44
   \   0000226C   0x.... 0x....      BL       strcpy
   2516                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002270   0xA80B             ADD      R0,SP,#+44
   \   00002272   0x.... 0x....      BL       strlen
   \   00002276   0xA90B             ADD      R1,SP,#+44
   \   00002278   0x.... 0x....      BL       BGM111_Transmit
   2517                                  }
   2518                                  
   2519                                  sprintf( (char *)tempBffr2, "GRID EYE/COOL EYE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_381: (+1)
   \   0000227C   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_382+0x4
   \   00002280   0xA80B             ADD      R0,SP,#+44
   \   00002282   0x.... 0x....      BL       sprintf
   \   00002286   0xF001 0xBE40      B.W      ??RoadBrd_ParseString_377
   \   0000228A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_230:
   \   0000228C   0x........         DC32     ?_79
   \   00002290   0x........         DC32     ?_80
   2520                                } // EndElse (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2521                              }
   2522                              else
   2523                              {
   2524                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_365: (+1)
   \   00002294   0x78A0             LDRB     R0,[R4, #+2]
   \   00002296   0x2849             CMP      R0,#+73
   \   00002298   0xF001 0x860A      BEQ.W    ??RoadBrd_ParseString_383
   \   0000229C   0x2852             CMP      R0,#+82
   \   0000229E   0xF000 0x85E7      BEQ.W    ??RoadBrd_ParseString_384
   \   000022A2   0x2853             CMP      R0,#+83
   \   000022A4   0xD004             BEQ.N    ??RoadBrd_ParseString_385
   \   000022A6   0x2854             CMP      R0,#+84
   \   000022A8   0xF001 0x859D      BEQ.W    ??RoadBrd_ParseString_386
   \   000022AC   0xF001 0xBE2D      B.W      ??RoadBrd_ParseString_377
   2525                                {
   2526                                  //------------------ TCS Command: Calibration Set Command
   2527                                case 'S':
   2528                                  // Step 1. Validate format.
   2529                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_385: (+1)
   \   000022B0   0x78E0             LDRB     R0,[R4, #+3]
   \   000022B2   0x283A             CMP      R0,#+58
   \   000022B4   0xD018             BEQ.N    ??RoadBrd_ParseString_387
   2530                                  {
   2531                                    // Is this a BLE Operation?
   2532                                    if ( BLE_Flag )
   \   000022B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022B8   0x2D00             CMP      R5,#+0
   \   000022BA   0xD00A             BEQ.N    ??RoadBrd_ParseString_388
   2533                                    {
   2534                                      // Yes...Build and Send BLE Response NOW.
   2535                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_SYNTAX</STATUS>");
   \   000022BC   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_382+0x8
   \   000022C0   0xA80B             ADD      R0,SP,#+44
   \   000022C2   0x.... 0x....      BL       strcpy
   2536                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000022C6   0xA80B             ADD      R0,SP,#+44
   \   000022C8   0x.... 0x....      BL       strlen
   \   000022CC   0xA90B             ADD      R1,SP,#+44
   \   000022CE   0x.... 0x....      BL       BGM111_Transmit
   2537                                    }
   2538                                    
   2539                                    strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_388: (+1)
   \   000022D2   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_382+0xC
   \   000022D6   0xA80B             ADD      R0,SP,#+44
   \   000022D8   0x.... 0x....      BL       strcpy
   \   000022DC   0xF000 0xBDC6      B.W      ??RoadBrd_ParseString_389
   \                     ??RoadBrd_ParseString_234:
   \   000022E0   0x........         DC32     ?_81
   \   000022E4   0x........         DC32     ?_82
   2540                                  } // Endif (tempBffr[3]!=':')
   2541                                  else
   2542                                  {
   2543                                    // 2. Verify if remaining string is digits
   2544                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_387: (+1)
   \   000022E8   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000022EC   0x2805             CMP      R0,#+5
   \   000022EE   0xDA19             BGE.N    ??RoadBrd_ParseString_390
   2545                                    {
   2546                                      // Is this a BLE Operation?
   2547                                      if ( BLE_Flag )
   \   000022F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022F2   0x2D00             CMP      R5,#+0
   \   000022F4   0xD00A             BEQ.N    ??RoadBrd_ParseString_391
   2548                                      {
   2549                                        // Yes...Build and Send BLE Response NOW.
   2550                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   000022F6   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_392
   \   000022FA   0xA80B             ADD      R0,SP,#+44
   \   000022FC   0x.... 0x....      BL       strcpy
   2551                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002300   0xA80B             ADD      R0,SP,#+44
   \   00002302   0x.... 0x....      BL       strlen
   \   00002306   0xA90B             ADD      R1,SP,#+44
   \   00002308   0x.... 0x....      BL       BGM111_Transmit
   2552                                      }
   2553                                      strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_391: (+1)
   \   0000230C   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_392+0x4
   \   00002310   0xA80B             ADD      R0,SP,#+44
   \   00002312   0x.... 0x....      BL       strcpy
   \   00002316   0xF000 0xBDA9      B.W      ??RoadBrd_ParseString_389
   \   0000231A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_235:
   \   0000231C   0x........         DC32     ?_83
   \   00002320   0x........         DC32     ?_84
   2554                                    } // EndIf (Size > 4)
   2555                                    else
   2556                                    {
   2557                                      // 3. Grab remaining string and convert to integer.
   2558                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_390: (+1)
   \   00002324   0x1D20             ADDS     R0,R4,#+4
   \   00002326   0x9030             STR      R0,[SP, #+192]
   2559                                      strcpy(tempstr, tempPstr);
   \   00002328   0x9930             LDR      R1,[SP, #+192]
   \   0000232A   0xA852             ADD      R0,SP,#+328
   \   0000232C   0x.... 0x....      BL       strcpy
   2560                                      // Time to parse and test remaining string
   2561                                      Scale = 0.0;
   \   00002330   0x2000             MOVS     R0,#+0
   \   00002332   0x902A             STR      R0,[SP, #+168]
   2562                                      Offset = 0.0;
   \   00002334   0x2000             MOVS     R0,#+0
   \   00002336   0x9029             STR      R0,[SP, #+164]
   2563                                      if (sscanf (tempstr, "%s %f %f", uuid, &Scale, &Offset) == 3)
   \   00002338   0xA829             ADD      R0,SP,#+164
   \   0000233A   0x9000             STR      R0,[SP, #+0]
   \   0000233C   0xAB2A             ADD      R3,SP,#+168
   \   0000233E   0xAA36             ADD      R2,SP,#+216
   \   00002340   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_392+0x8
   \   00002344   0xA852             ADD      R0,SP,#+328
   \   00002346   0x.... 0x....      BL       sscanf
   \   0000234A   0x2803             CMP      R0,#+3
   \   0000234C   0xF040 0x857C      BNE.W    ??RoadBrd_ParseString_393
   2564                                      {
   2565                                        sprintf( (char *)tempBffr2, "Parms: %s, %f, %f.\r\n", uuid, Scale, Offset );
   \   00002350   0x9829             LDR      R0,[SP, #+164]
   \   00002352   0x.... 0x....      BL       __aeabi_f2d
   \   00002356   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000235A   0x982A             LDR      R0,[SP, #+168]
   \   0000235C   0x.... 0x....      BL       __aeabi_f2d
   \   00002360   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002364   0xAA36             ADD      R2,SP,#+216
   \   00002366   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_392+0xC
   \   0000236A   0xA80B             ADD      R0,SP,#+44
   \   0000236C   0x.... 0x....      BL       sprintf
   2566                                        // OK, We have 3 good parameters... NOW Need to determine if UUID is good.
   2567                                        if (strncmp((char *)uuid,"0002",4) == 0) // Shnt_Vltg
   \   00002370   0x2204             MOVS     R2,#+4
   \   00002372   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_392+0x10
   \   00002376   0xA836             ADD      R0,SP,#+216
   \   00002378   0x.... 0x....      BL       strncmp
   \   0000237C   0x2800             CMP      R0,#+0
   \   0000237E   0xD13A             BNE.N    ??RoadBrd_ParseString_394
   2568                                        {
   2569                                          Status = RoadBrd_CAL_Set_CalItem( CAL_SHNT_VLTG, Offset, Scale);
   \   00002380   0x9A2A             LDR      R2,[SP, #+168]
   \   00002382   0x9929             LDR      R1,[SP, #+164]
   \   00002384   0x2000             MOVS     R0,#+0
   \   00002386   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000238A   0x0006             MOVS     R6,R0
   2570                                          if (Status == HAL_OK)
   \   0000238C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000238E   0x2E00             CMP      R6,#+0
   \   00002390   0xD11C             BNE.N    ??RoadBrd_ParseString_395
   2571                                          {
   2572                                            // Is this a BLE Operation?
   2573                                            if ( BLE_Flag )
   \   00002392   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002394   0x2D00             CMP      R5,#+0
   \   00002396   0xD00A             BEQ.N    ??RoadBrd_ParseString_396
   2574                                            {
   2575                                              // Yes...Build and Send BLE Response NOW.
   2576                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG</STATUS>");
   \   00002398   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_397
   \   0000239C   0xA80B             ADD      R0,SP,#+44
   \   0000239E   0x.... 0x....      BL       strcpy
   2577                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023A2   0xA80B             ADD      R0,SP,#+44
   \   000023A4   0x.... 0x....      BL       strlen
   \   000023A8   0xA90B             ADD      R1,SP,#+44
   \   000023AA   0x.... 0x....      BL       BGM111_Transmit
   2578                                            }
   2579                                            sprintf( (char *)tempBffr2, "Shnt_Vltg Set COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_396: (+1)
   \   000023AE   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_397+0x4
   \   000023B2   0xA80B             ADD      R0,SP,#+44
   \   000023B4   0x.... 0x....      BL       sprintf
   \   000023B8   0xF000 0xBD43      B.W      ??RoadBrd_ParseString_398
   \                     ??RoadBrd_ParseString_246:
   \   000023BC   0x........         DC32     ?_85
   \   000023C0   0x........         DC32     ?_86
   \   000023C4   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   000023C8   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2580                                          }
   2581                                          else
   2582                                          {
   2583                                            // Is this a BLE Operation?
   2584                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_395: (+1)
   \   000023CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023CE   0x2D00             CMP      R5,#+0
   \   000023D0   0xD00A             BEQ.N    ??RoadBrd_ParseString_399
   2585                                            {
   2586                                              // Yes...Build and Send BLE Response NOW.
   2587                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>");
   \   000023D2   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_397+0x8
   \   000023D6   0xA80B             ADD      R0,SP,#+44
   \   000023D8   0x.... 0x....      BL       strcpy
   2588                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023DC   0xA80B             ADD      R0,SP,#+44
   \   000023DE   0x.... 0x....      BL       strlen
   \   000023E2   0xA90B             ADD      R1,SP,#+44
   \   000023E4   0x.... 0x....      BL       BGM111_Transmit
   2589                                            }
   2590                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_399: (+1)
   \   000023E8   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   000023EC   0xA80B             ADD      R0,SP,#+44
   \   000023EE   0x.... 0x....      BL       sprintf
   \   000023F2   0xF000 0xBD26      B.W      ??RoadBrd_ParseString_398
   2591                                          }
   2592                                        }
   2593                                        else if (strncmp((char *)uuid,"0004",4) == 0) // Current
   \                     ??RoadBrd_ParseString_394: (+1)
   \   000023F6   0x2204             MOVS     R2,#+4
   \   000023F8   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_397+0x10
   \   000023FC   0xA836             ADD      R0,SP,#+216
   \   000023FE   0x.... 0x....      BL       strncmp
   \   00002402   0x2800             CMP      R0,#+0
   \   00002404   0xD139             BNE.N    ??RoadBrd_ParseString_400
   2594                                        {
   2595                                          Status = RoadBrd_CAL_Set_CalItem( CAL_CURRENT, Offset, Scale);
   \   00002406   0x9A2A             LDR      R2,[SP, #+168]
   \   00002408   0x9929             LDR      R1,[SP, #+164]
   \   0000240A   0x2001             MOVS     R0,#+1
   \   0000240C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002410   0x0006             MOVS     R6,R0
   2596                                          if (Status == HAL_OK)
   \   00002412   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002414   0x2E00             CMP      R6,#+0
   \   00002416   0xD11B             BNE.N    ??RoadBrd_ParseString_401
   2597                                          {
   2598                                            // Is this a BLE Operation?
   2599                                            if ( BLE_Flag )
   \   00002418   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000241A   0x2D00             CMP      R5,#+0
   \   0000241C   0xD00A             BEQ.N    ??RoadBrd_ParseString_402
   2600                                            {
   2601                                              // Yes...Build and Send BLE Response NOW.
   2602                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT</STATUS>");
   \   0000241E   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_397+0x14
   \   00002422   0xA80B             ADD      R0,SP,#+44
   \   00002424   0x.... 0x....      BL       strcpy
   2603                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002428   0xA80B             ADD      R0,SP,#+44
   \   0000242A   0x.... 0x....      BL       strlen
   \   0000242E   0xA90B             ADD      R1,SP,#+44
   \   00002430   0x.... 0x....      BL       BGM111_Transmit
   2604                                            }
   2605                                            sprintf( (char *)tempBffr2, "Current Set COMPLETE." );
   \                     ??RoadBrd_ParseString_402: (+1)
   \   00002434   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_403
   \   00002438   0xA80B             ADD      R0,SP,#+44
   \   0000243A   0x.... 0x....      BL       sprintf
   \   0000243E   0xF000 0xBD00      B.W      ??RoadBrd_ParseString_398
   \   00002442   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_251:
   \   00002444   0x........         DC32     ?_87
   \   00002448   0x........         DC32     ?_88
   \   0000244C   0x........         DC32     ?_89
   2606                                          }
   2607                                          else
   2608                                          {
   2609                                            // Is this a BLE Operation?
   2610                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_401: (+1)
   \   00002450   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002452   0x2D00             CMP      R5,#+0
   \   00002454   0xD00A             BEQ.N    ??RoadBrd_ParseString_404
   2611                                            {
   2612                                              // Yes...Build and Send BLE Response NOW.
   2613                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT_ERR</STATUS>");
   \   00002456   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_403+0x4
   \   0000245A   0xA80B             ADD      R0,SP,#+44
   \   0000245C   0x.... 0x....      BL       strcpy
   2614                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002460   0xA80B             ADD      R0,SP,#+44
   \   00002462   0x.... 0x....      BL       strlen
   \   00002466   0xA90B             ADD      R1,SP,#+44
   \   00002468   0x.... 0x....      BL       BGM111_Transmit
   2615                                            }
   2616                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_404: (+1)
   \   0000246C   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002470   0xA80B             ADD      R0,SP,#+44
   \   00002472   0x.... 0x....      BL       sprintf
   \   00002476   0xF000 0xBCE4      B.W      ??RoadBrd_ParseString_398
   2617                                          }
   2618                                        }
   2619                                        else if (strncmp((char *)uuid,"0006",4) == 0) // Power
   \                     ??RoadBrd_ParseString_400: (+1)
   \   0000247A   0x2204             MOVS     R2,#+4
   \   0000247C   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_403+0x8
   \   00002480   0xA836             ADD      R0,SP,#+216
   \   00002482   0x.... 0x....      BL       strncmp
   \   00002486   0x2800             CMP      R0,#+0
   \   00002488   0xD139             BNE.N    ??RoadBrd_ParseString_405
   2620                                        {
   2621                                          Status = RoadBrd_CAL_Set_CalItem( CAL_POWER, Offset, Scale);
   \   0000248A   0x9A2A             LDR      R2,[SP, #+168]
   \   0000248C   0x9929             LDR      R1,[SP, #+164]
   \   0000248E   0x2002             MOVS     R0,#+2
   \   00002490   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002494   0x0006             MOVS     R6,R0
   2622                                          if (Status == HAL_OK)
   \   00002496   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002498   0x2E00             CMP      R6,#+0
   \   0000249A   0xD11B             BNE.N    ??RoadBrd_ParseString_406
   2623                                          {
   2624                                            // Is this a BLE Operation?
   2625                                            if ( BLE_Flag )
   \   0000249C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000249E   0x2D00             CMP      R5,#+0
   \   000024A0   0xD00A             BEQ.N    ??RoadBrd_ParseString_407
   2626                                            {
   2627                                              // Yes...Build and Send BLE Response NOW.
   2628                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER</STATUS>");
   \   000024A2   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_403+0xC
   \   000024A6   0xA80B             ADD      R0,SP,#+44
   \   000024A8   0x.... 0x....      BL       strcpy
   2629                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024AC   0xA80B             ADD      R0,SP,#+44
   \   000024AE   0x.... 0x....      BL       strlen
   \   000024B2   0xA90B             ADD      R1,SP,#+44
   \   000024B4   0x.... 0x....      BL       BGM111_Transmit
   2630                                            }
   2631                                            sprintf( (char *)tempBffr2, "Power Set COMPLETE." );
   \                     ??RoadBrd_ParseString_407: (+1)
   \   000024B8   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_403+0x10
   \   000024BC   0xA80B             ADD      R0,SP,#+44
   \   000024BE   0x.... 0x....      BL       sprintf
   \   000024C2   0xF000 0xBCBE      B.W      ??RoadBrd_ParseString_398
   \   000024C6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_257:
   \   000024C8   0x........         DC32     ?_90
   \   000024CC   0x........         DC32     ?_91
   \   000024D0   0x........         DC32     ?_92
   2632                                          }
   2633                                          else
   2634                                          {
   2635                                            // Is this a BLE Operation?
   2636                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_406: (+1)
   \   000024D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024D6   0x2D00             CMP      R5,#+0
   \   000024D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_408
   2637                                            {
   2638                                              // Yes...Build and Send BLE Response NOW.
   2639                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER_ERR</STATUS>");
   \   000024DA   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_409
   \   000024DE   0xA80B             ADD      R0,SP,#+44
   \   000024E0   0x.... 0x....      BL       strcpy
   2640                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024E4   0xA80B             ADD      R0,SP,#+44
   \   000024E6   0x.... 0x....      BL       strlen
   \   000024EA   0xA90B             ADD      R1,SP,#+44
   \   000024EC   0x.... 0x....      BL       BGM111_Transmit
   2641                                            }
   2642                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_408: (+1)
   \   000024F0   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   000024F4   0xA80B             ADD      R0,SP,#+44
   \   000024F6   0x.... 0x....      BL       sprintf
   \   000024FA   0xF000 0xBCA2      B.W      ??RoadBrd_ParseString_398
   2643                                          }
   2644                                        }
   2645                                        else if (strncmp((char *)uuid,"0008",4) == 0) // Voltage
   \                     ??RoadBrd_ParseString_405: (+1)
   \   000024FE   0x2204             MOVS     R2,#+4
   \   00002500   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_409+0x4
   \   00002504   0xA836             ADD      R0,SP,#+216
   \   00002506   0x.... 0x....      BL       strncmp
   \   0000250A   0x2800             CMP      R0,#+0
   \   0000250C   0xD139             BNE.N    ??RoadBrd_ParseString_410
   2646                                        {
   2647                                          Status = RoadBrd_CAL_Set_CalItem( CAL_VOLTAGE, Offset, Scale);
   \   0000250E   0x9A2A             LDR      R2,[SP, #+168]
   \   00002510   0x9929             LDR      R1,[SP, #+164]
   \   00002512   0x2003             MOVS     R0,#+3
   \   00002514   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002518   0x0006             MOVS     R6,R0
   2648                                          if (Status == HAL_OK)
   \   0000251A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000251C   0x2E00             CMP      R6,#+0
   \   0000251E   0xD11B             BNE.N    ??RoadBrd_ParseString_411
   2649                                          {
   2650                                            // Is this a BLE Operation?
   2651                                            if ( BLE_Flag )
   \   00002520   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002522   0x2D00             CMP      R5,#+0
   \   00002524   0xD00A             BEQ.N    ??RoadBrd_ParseString_412
   2652                                            {
   2653                                              // Yes...Build and Send BLE Response NOW.
   2654                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE</STATUS>");
   \   00002526   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_409+0x8
   \   0000252A   0xA80B             ADD      R0,SP,#+44
   \   0000252C   0x.... 0x....      BL       strcpy
   2655                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002530   0xA80B             ADD      R0,SP,#+44
   \   00002532   0x.... 0x....      BL       strlen
   \   00002536   0xA90B             ADD      R1,SP,#+44
   \   00002538   0x.... 0x....      BL       BGM111_Transmit
   2656                                            }
   2657                                            sprintf( (char *)tempBffr2, "Voltage Set COMPLETE." );
   \                     ??RoadBrd_ParseString_412: (+1)
   \   0000253C   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_409+0xC
   \   00002540   0xA80B             ADD      R0,SP,#+44
   \   00002542   0x.... 0x....      BL       sprintf
   \   00002546   0xF000 0xBC7C      B.W      ??RoadBrd_ParseString_398
   \   0000254A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_261:
   \   0000254C   0x........         DC32     ?_93
   \   00002550   0x........         DC32     ?_94
   \   00002554   0x........         DC32     ?_95
   2658                                          }
   2659                                          else
   2660                                          {
   2661                                            // Is this a BLE Operation?
   2662                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_411: (+1)
   \   00002558   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000255A   0x2D00             CMP      R5,#+0
   \   0000255C   0xD00A             BEQ.N    ??RoadBrd_ParseString_413
   2663                                            {
   2664                                              // Yes...Build and Send BLE Response NOW.
   2665                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>");
   \   0000255E   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_409+0x10
   \   00002562   0xA80B             ADD      R0,SP,#+44
   \   00002564   0x.... 0x....      BL       strcpy
   2666                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002568   0xA80B             ADD      R0,SP,#+44
   \   0000256A   0x.... 0x....      BL       strlen
   \   0000256E   0xA90B             ADD      R1,SP,#+44
   \   00002570   0x.... 0x....      BL       BGM111_Transmit
   2667                                            }
   2668                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_413: (+1)
   \   00002574   0xF8DF 0x1C88      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002578   0xA80B             ADD      R0,SP,#+44
   \   0000257A   0x.... 0x....      BL       sprintf
   \   0000257E   0xF000 0xBC60      B.W      ??RoadBrd_ParseString_398
   2669                                          }
   2670                                        }
   2671                                        else if (strncmp((char *)uuid,"000A",4) == 0) // TempC
   \                     ??RoadBrd_ParseString_410: (+1)
   \   00002582   0x2204             MOVS     R2,#+4
   \   00002584   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_414
   \   00002588   0xA836             ADD      R0,SP,#+216
   \   0000258A   0x.... 0x....      BL       strncmp
   \   0000258E   0x2800             CMP      R0,#+0
   \   00002590   0xD139             BNE.N    ??RoadBrd_ParseString_415
   2672                                        {
   2673                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPC, Offset, Scale);
   \   00002592   0x9A2A             LDR      R2,[SP, #+168]
   \   00002594   0x9929             LDR      R1,[SP, #+164]
   \   00002596   0x2004             MOVS     R0,#+4
   \   00002598   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000259C   0x0006             MOVS     R6,R0
   2674                                          if (Status == HAL_OK)
   \   0000259E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000025A0   0x2E00             CMP      R6,#+0
   \   000025A2   0xD11B             BNE.N    ??RoadBrd_ParseString_416
   2675                                          {
   2676                                            // Is this a BLE Operation?
   2677                                            if ( BLE_Flag )
   \   000025A4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025A6   0x2D00             CMP      R5,#+0
   \   000025A8   0xD00A             BEQ.N    ??RoadBrd_ParseString_417
   2678                                            {
   2679                                              // Yes...Build and Send BLE Response NOW.
   2680                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC</STATUS>");
   \   000025AA   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_414+0x4
   \   000025AE   0xA80B             ADD      R0,SP,#+44
   \   000025B0   0x.... 0x....      BL       strcpy
   2681                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025B4   0xA80B             ADD      R0,SP,#+44
   \   000025B6   0x.... 0x....      BL       strlen
   \   000025BA   0xA90B             ADD      R1,SP,#+44
   \   000025BC   0x.... 0x....      BL       BGM111_Transmit
   2682                                            }
   2683                                            sprintf( (char *)tempBffr2, "TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_417: (+1)
   \   000025C0   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_414+0x8
   \   000025C4   0xA80B             ADD      R0,SP,#+44
   \   000025C6   0x.... 0x....      BL       sprintf
   \   000025CA   0xF000 0xBC3A      B.W      ??RoadBrd_ParseString_398
   \   000025CE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_265:
   \   000025D0   0x........         DC32     ?_96
   \   000025D4   0x........         DC32     ?_97
   \   000025D8   0x........         DC32     ?_98
   2684                                          }
   2685                                          else
   2686                                          {
   2687                                            // Is this a BLE Operation?
   2688                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_416: (+1)
   \   000025DC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025DE   0x2D00             CMP      R5,#+0
   \   000025E0   0xD00A             BEQ.N    ??RoadBrd_ParseString_418
   2689                                            {
   2690                                              // Yes...Build and Send BLE Response NOW.
   2691                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC_ERR</STATUS>");
   \   000025E2   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_414+0xC
   \   000025E6   0xA80B             ADD      R0,SP,#+44
   \   000025E8   0x.... 0x....      BL       strcpy
   2692                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025EC   0xA80B             ADD      R0,SP,#+44
   \   000025EE   0x.... 0x....      BL       strlen
   \   000025F2   0xA90B             ADD      R1,SP,#+44
   \   000025F4   0x.... 0x....      BL       BGM111_Transmit
   2693                                            }
   2694                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_418: (+1)
   \   000025F8   0xF8DF 0x1C04      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   000025FC   0xA80B             ADD      R0,SP,#+44
   \   000025FE   0x.... 0x....      BL       sprintf
   \   00002602   0xF000 0xBC1E      B.W      ??RoadBrd_ParseString_398
   2695                                          }
   2696                                        }
   2697                                        else if (strncmp((char *)uuid,"000B",4) == 0) // TempF
   \                     ??RoadBrd_ParseString_415: (+1)
   \   00002606   0x2204             MOVS     R2,#+4
   \   00002608   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_414+0x10
   \   0000260C   0xA836             ADD      R0,SP,#+216
   \   0000260E   0x.... 0x....      BL       strncmp
   \   00002612   0x2800             CMP      R0,#+0
   \   00002614   0xD131             BNE.N    ??RoadBrd_ParseString_419
   2698                                        {
   2699                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPF, Offset, Scale);
   \   00002616   0x9A2A             LDR      R2,[SP, #+168]
   \   00002618   0x9929             LDR      R1,[SP, #+164]
   \   0000261A   0x2005             MOVS     R0,#+5
   \   0000261C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002620   0x0006             MOVS     R6,R0
   2700                                          if (Status == HAL_OK)
   \   00002622   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002624   0x2E00             CMP      R6,#+0
   \   00002626   0xD114             BNE.N    ??RoadBrd_ParseString_420
   2701                                          {
   2702                                            // Is this a BLE Operation?
   2703                                            if ( BLE_Flag )
   \   00002628   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000262A   0x2D00             CMP      R5,#+0
   \   0000262C   0xD00A             BEQ.N    ??RoadBrd_ParseString_421
   2704                                            {
   2705                                              // Yes...Build and Send BLE Response NOW.
   2706                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF</STATUS>");
   \   0000262E   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_422
   \   00002632   0xA80B             ADD      R0,SP,#+44
   \   00002634   0x.... 0x....      BL       strcpy
   2707                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002638   0xA80B             ADD      R0,SP,#+44
   \   0000263A   0x.... 0x....      BL       strlen
   \   0000263E   0xA90B             ADD      R1,SP,#+44
   \   00002640   0x.... 0x....      BL       BGM111_Transmit
   2708                                            }
   2709                                            sprintf( (char *)tempBffr2, "TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_421: (+1)
   \   00002644   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_422+0x4
   \   00002648   0xA80B             ADD      R0,SP,#+44
   \   0000264A   0x.... 0x....      BL       sprintf
   \   0000264E   0xF000 0xBBF8      B.W      ??RoadBrd_ParseString_398
   2710                                          }
   2711                                          else
   2712                                          {
   2713                                            // Is this a BLE Operation?
   2714                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_420: (+1)
   \   00002652   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002654   0x2D00             CMP      R5,#+0
   \   00002656   0xD00A             BEQ.N    ??RoadBrd_ParseString_423
   2715                                            {
   2716                                              // Yes...Build and Send BLE Response NOW.
   2717                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF_ERR</STATUS>");
   \   00002658   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_422+0x8
   \   0000265C   0xA80B             ADD      R0,SP,#+44
   \   0000265E   0x.... 0x....      BL       strcpy
   2718                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002662   0xA80B             ADD      R0,SP,#+44
   \   00002664   0x.... 0x....      BL       strlen
   \   00002668   0xA90B             ADD      R1,SP,#+44
   \   0000266A   0x.... 0x....      BL       BGM111_Transmit
   2719                                            }
   2720                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_423: (+1)
   \   0000266E   0xF8DF 0x1B90      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002672   0xA80B             ADD      R0,SP,#+44
   \   00002674   0x.... 0x....      BL       sprintf
   \   00002678   0xE3E3             B.N      ??RoadBrd_ParseString_398
   2721                                          }
   2722                                        }
   2723                                        else if (strncmp((char *)uuid,"0011",4) == 0) // Pressure
   \                     ??RoadBrd_ParseString_419: (+1)
   \   0000267A   0x2204             MOVS     R2,#+4
   \   0000267C   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_422+0xC
   \   00002680   0xA836             ADD      R0,SP,#+216
   \   00002682   0x.... 0x....      BL       strncmp
   \   00002686   0x2800             CMP      R0,#+0
   \   00002688   0xD130             BNE.N    ??RoadBrd_ParseString_424
   2724                                        {
   2725                                          Status = RoadBrd_CAL_Set_CalItem( CAL_PRESSURE, Offset, Scale);
   \   0000268A   0x9A2A             LDR      R2,[SP, #+168]
   \   0000268C   0x9929             LDR      R1,[SP, #+164]
   \   0000268E   0x2006             MOVS     R0,#+6
   \   00002690   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002694   0x0006             MOVS     R6,R0
   2726                                          if (Status == HAL_OK)
   \   00002696   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002698   0x2E00             CMP      R6,#+0
   \   0000269A   0xD113             BNE.N    ??RoadBrd_ParseString_425
   2727                                          {
   2728                                            // Is this a BLE Operation?
   2729                                            if ( BLE_Flag )
   \   0000269C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000269E   0x2D00             CMP      R5,#+0
   \   000026A0   0xD00A             BEQ.N    ??RoadBrd_ParseString_426
   2730                                            {
   2731                                              // Yes...Build and Send BLE Response NOW.
   2732                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE</STATUS>");
   \   000026A2   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_422+0x10
   \   000026A6   0xA80B             ADD      R0,SP,#+44
   \   000026A8   0x.... 0x....      BL       strcpy
   2733                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026AC   0xA80B             ADD      R0,SP,#+44
   \   000026AE   0x.... 0x....      BL       strlen
   \   000026B2   0xA90B             ADD      R1,SP,#+44
   \   000026B4   0x.... 0x....      BL       BGM111_Transmit
   2734                                            }
   2735                                            sprintf( (char *)tempBffr2, "Pressure Set COMPLETE." );
   \                     ??RoadBrd_ParseString_426: (+1)
   \   000026B8   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_427
   \   000026BC   0xA80B             ADD      R0,SP,#+44
   \   000026BE   0x.... 0x....      BL       sprintf
   \   000026C2   0xE3BE             B.N      ??RoadBrd_ParseString_398
   2736                                          }
   2737                                          else
   2738                                          {
   2739                                            // Is this a BLE Operation?
   2740                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_425: (+1)
   \   000026C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026C6   0x2D00             CMP      R5,#+0
   \   000026C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_428
   2741                                            {
   2742                                              // Yes...Build and Send BLE Response NOW.
   2743                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>");
   \   000026CA   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_427+0x4
   \   000026CE   0xA80B             ADD      R0,SP,#+44
   \   000026D0   0x.... 0x....      BL       strcpy
   2744                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026D4   0xA80B             ADD      R0,SP,#+44
   \   000026D6   0x.... 0x....      BL       strlen
   \   000026DA   0xA90B             ADD      R1,SP,#+44
   \   000026DC   0x.... 0x....      BL       BGM111_Transmit
   2745                                            }
   2746                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_428: (+1)
   \   000026E0   0xF8DF 0x1B1C      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   000026E4   0xA80B             ADD      R0,SP,#+44
   \   000026E6   0x.... 0x....      BL       sprintf
   \   000026EA   0xE3AA             B.N      ??RoadBrd_ParseString_398
   2747                                          }
   2748                                        }
   2749                                        else if (strncmp((char *)uuid,"0030",4) == 0) // Humidity
   \                     ??RoadBrd_ParseString_424: (+1)
   \   000026EC   0x2204             MOVS     R2,#+4
   \   000026EE   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_427+0x8
   \   000026F2   0xA836             ADD      R0,SP,#+216
   \   000026F4   0x.... 0x....      BL       strncmp
   \   000026F8   0x2800             CMP      R0,#+0
   \   000026FA   0xD135             BNE.N    ??RoadBrd_ParseString_429
   2750                                        {
   2751                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUMIDITY, Offset, Scale);
   \   000026FC   0x9A2A             LDR      R2,[SP, #+168]
   \   000026FE   0x9929             LDR      R1,[SP, #+164]
   \   00002700   0x2007             MOVS     R0,#+7
   \   00002702   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002706   0x0006             MOVS     R6,R0
   2752                                          if (Status == HAL_OK)
   \   00002708   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000270A   0x2E00             CMP      R6,#+0
   \   0000270C   0xD118             BNE.N    ??RoadBrd_ParseString_430
   2753                                          {
   2754                                            // Is this a BLE Operation?
   2755                                            if ( BLE_Flag )
   \   0000270E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002710   0x2D00             CMP      R5,#+0
   \   00002712   0xD00A             BEQ.N    ??RoadBrd_ParseString_431
   2756                                            {
   2757                                              // Yes...Build and Send BLE Response NOW.
   2758                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY</STATUS>");
   \   00002714   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_427+0xC
   \   00002718   0xA80B             ADD      R0,SP,#+44
   \   0000271A   0x.... 0x....      BL       strcpy
   2759                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000271E   0xA80B             ADD      R0,SP,#+44
   \   00002720   0x.... 0x....      BL       strlen
   \   00002724   0xA90B             ADD      R1,SP,#+44
   \   00002726   0x.... 0x....      BL       BGM111_Transmit
   2760                                            }
   2761                                            sprintf( (char *)tempBffr2, "Humidity Set COMPLETE." );
   \                     ??RoadBrd_ParseString_431: (+1)
   \   0000272A   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_427+0x10
   \   0000272E   0xA80B             ADD      R0,SP,#+44
   \   00002730   0x.... 0x....      BL       sprintf
   \   00002734   0xE385             B.N      ??RoadBrd_ParseString_398
   \   00002736   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_274:
   \   00002738   0x........         DC32     ?_99
   \   0000273C   0x........         DC32     ?_100
   2762                                          }
   2763                                          else
   2764                                          {
   2765                                            // Is this a BLE Operation?
   2766                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_430: (+1)
   \   00002740   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002742   0x2D00             CMP      R5,#+0
   \   00002744   0xD00A             BEQ.N    ??RoadBrd_ParseString_432
   2767                                            {
   2768                                              // Yes...Build and Send BLE Response NOW.
   2769                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>");
   \   00002746   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_433
   \   0000274A   0xA80B             ADD      R0,SP,#+44
   \   0000274C   0x.... 0x....      BL       strcpy
   2770                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002750   0xA80B             ADD      R0,SP,#+44
   \   00002752   0x.... 0x....      BL       strlen
   \   00002756   0xA90B             ADD      R1,SP,#+44
   \   00002758   0x.... 0x....      BL       BGM111_Transmit
   2771                                            }
   2772                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_432: (+1)
   \   0000275C   0xF8DF 0x1AA0      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002760   0xA80B             ADD      R0,SP,#+44
   \   00002762   0x.... 0x....      BL       sprintf
   \   00002766   0xE36C             B.N      ??RoadBrd_ParseString_398
   2773                                          }
   2774                                        }
   2775                                        else if (strncmp((char *)uuid,"0032",4) == 0) // Hum_TempC
   \                     ??RoadBrd_ParseString_429: (+1)
   \   00002768   0x2204             MOVS     R2,#+4
   \   0000276A   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_433+0x4
   \   0000276E   0xA836             ADD      R0,SP,#+216
   \   00002770   0x.... 0x....      BL       strncmp
   \   00002774   0x2800             CMP      R0,#+0
   \   00002776   0xD135             BNE.N    ??RoadBrd_ParseString_434
   2776                                        {
   2777                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPC, Offset, Scale);
   \   00002778   0x9A2A             LDR      R2,[SP, #+168]
   \   0000277A   0x9929             LDR      R1,[SP, #+164]
   \   0000277C   0x2008             MOVS     R0,#+8
   \   0000277E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002782   0x0006             MOVS     R6,R0
   2778                                          if (Status == HAL_OK)
   \   00002784   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002786   0x2E00             CMP      R6,#+0
   \   00002788   0xD118             BNE.N    ??RoadBrd_ParseString_435
   2779                                          {
   2780                                            // Is this a BLE Operation?
   2781                                            if ( BLE_Flag )
   \   0000278A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000278C   0x2D00             CMP      R5,#+0
   \   0000278E   0xD00A             BEQ.N    ??RoadBrd_ParseString_436
   2782                                            {
   2783                                              // Yes...Build and Send BLE Response NOW.
   2784                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC</STATUS>");
   \   00002790   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_433+0x8
   \   00002794   0xA80B             ADD      R0,SP,#+44
   \   00002796   0x.... 0x....      BL       strcpy
   2785                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000279A   0xA80B             ADD      R0,SP,#+44
   \   0000279C   0x.... 0x....      BL       strlen
   \   000027A0   0xA90B             ADD      R1,SP,#+44
   \   000027A2   0x.... 0x....      BL       BGM111_Transmit
   2786                                            }
   2787                                            sprintf( (char *)tempBffr2, "Hum_TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_436: (+1)
   \   000027A6   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_433+0xC
   \   000027AA   0xA80B             ADD      R0,SP,#+44
   \   000027AC   0x.... 0x....      BL       sprintf
   \   000027B0   0xE347             B.N      ??RoadBrd_ParseString_398
   \   000027B2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_277:
   \   000027B4   0x........         DC32     ?_101
   \   000027B8   0x........         DC32     ?_102
   2788                                          }
   2789                                          else
   2790                                          {
   2791                                            // Is this a BLE Operation?
   2792                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_435: (+1)
   \   000027BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000027BE   0x2D00             CMP      R5,#+0
   \   000027C0   0xD00A             BEQ.N    ??RoadBrd_ParseString_437
   2793                                            {
   2794                                              // Yes...Build and Send BLE Response NOW.
   2795                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>");
   \   000027C2   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_433+0x10
   \   000027C6   0xA80B             ADD      R0,SP,#+44
   \   000027C8   0x.... 0x....      BL       strcpy
   2796                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027CC   0xA80B             ADD      R0,SP,#+44
   \   000027CE   0x.... 0x....      BL       strlen
   \   000027D2   0xA90B             ADD      R1,SP,#+44
   \   000027D4   0x.... 0x....      BL       BGM111_Transmit
   2797                                            }
   2798                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_437: (+1)
   \   000027D8   0xF8DF 0x1A24      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   000027DC   0xA80B             ADD      R0,SP,#+44
   \   000027DE   0x.... 0x....      BL       sprintf
   \   000027E2   0xE32E             B.N      ??RoadBrd_ParseString_398
   2799                                          }
   2800                                        }
   2801                                        else if (strncmp((char *)uuid,"0033",4) == 0) // Hum_TempF
   \                     ??RoadBrd_ParseString_434: (+1)
   \   000027E4   0x2204             MOVS     R2,#+4
   \   000027E6   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_438
   \   000027EA   0xA836             ADD      R0,SP,#+216
   \   000027EC   0x.... 0x....      BL       strncmp
   \   000027F0   0x2800             CMP      R0,#+0
   \   000027F2   0xD139             BNE.N    ??RoadBrd_ParseString_439
   2802                                        {
   2803                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPF, Offset, Scale);
   \   000027F4   0x9A2A             LDR      R2,[SP, #+168]
   \   000027F6   0x9929             LDR      R1,[SP, #+164]
   \   000027F8   0x2009             MOVS     R0,#+9
   \   000027FA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000027FE   0x0006             MOVS     R6,R0
   2804                                          if (Status == HAL_OK)
   \   00002800   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002802   0x2E00             CMP      R6,#+0
   \   00002804   0xD11C             BNE.N    ??RoadBrd_ParseString_440
   2805                                          {
   2806                                            // Is this a BLE Operation?
   2807                                            if ( BLE_Flag )
   \   00002806   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002808   0x2D00             CMP      R5,#+0
   \   0000280A   0xD00A             BEQ.N    ??RoadBrd_ParseString_441
   2808                                            {
   2809                                              // Yes...Build and Send BLE Response NOW.
   2810                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF</STATUS>");
   \   0000280C   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_438+0x4
   \   00002810   0xA80B             ADD      R0,SP,#+44
   \   00002812   0x.... 0x....      BL       strcpy
   2811                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002816   0xA80B             ADD      R0,SP,#+44
   \   00002818   0x.... 0x....      BL       strlen
   \   0000281C   0xA90B             ADD      R1,SP,#+44
   \   0000281E   0x.... 0x....      BL       BGM111_Transmit
   2812                                            }
   2813                                            sprintf( (char *)tempBffr2, "Hum_TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_441: (+1)
   \   00002822   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_438+0x8
   \   00002826   0xA80B             ADD      R0,SP,#+44
   \   00002828   0x.... 0x....      BL       sprintf
   \   0000282C   0xE309             B.N      ??RoadBrd_ParseString_398
   \   0000282E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_280:
   \   00002830   0x........         DC32     ?_41
   \   00002834   0x........         DC32     ?_103
   \   00002838   0x........         DC32     ?_104
   \   0000283C   0x........         DC32     ?_105
   2814                                          }
   2815                                          else
   2816                                          {
   2817                                            // Is this a BLE Operation?
   2818                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_440: (+1)
   \   00002840   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002842   0x2D00             CMP      R5,#+0
   \   00002844   0xD00A             BEQ.N    ??RoadBrd_ParseString_442
   2819                                            {
   2820                                              // Yes...Build and Send BLE Response NOW.
   2821                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>");
   \   00002846   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_438+0xC
   \   0000284A   0xA80B             ADD      R0,SP,#+44
   \   0000284C   0x.... 0x....      BL       strcpy
   2822                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002850   0xA80B             ADD      R0,SP,#+44
   \   00002852   0x.... 0x....      BL       strlen
   \   00002856   0xA90B             ADD      R1,SP,#+44
   \   00002858   0x.... 0x....      BL       BGM111_Transmit
   2823                                            }
   2824                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_442: (+1)
   \   0000285C   0xF8DF 0x19A0      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002860   0xA80B             ADD      R0,SP,#+44
   \   00002862   0x.... 0x....      BL       sprintf
   \   00002866   0xE2EC             B.N      ??RoadBrd_ParseString_398
   2825                                          }
   2826                                        }
   2827                                        else if (strncmp((char *)uuid,"000D",4) == 0) // RGB_Red
   \                     ??RoadBrd_ParseString_439: (+1)
   \   00002868   0x2204             MOVS     R2,#+4
   \   0000286A   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_438+0x10
   \   0000286E   0xA836             ADD      R0,SP,#+216
   \   00002870   0x.... 0x....      BL       strncmp
   \   00002874   0x2800             CMP      R0,#+0
   \   00002876   0xD133             BNE.N    ??RoadBrd_ParseString_443
   2828                                        {
   2829                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_RED, Offset, Scale);
   \   00002878   0x9A2A             LDR      R2,[SP, #+168]
   \   0000287A   0x9929             LDR      R1,[SP, #+164]
   \   0000287C   0x200A             MOVS     R0,#+10
   \   0000287E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002882   0x0006             MOVS     R6,R0
   2830                                          if (Status == HAL_OK)
   \   00002884   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002886   0x2E00             CMP      R6,#+0
   \   00002888   0xD116             BNE.N    ??RoadBrd_ParseString_444
   2831                                          {
   2832                                            // Is this a BLE Operation?
   2833                                            if ( BLE_Flag )
   \   0000288A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000288C   0x2D00             CMP      R5,#+0
   \   0000288E   0xD00A             BEQ.N    ??RoadBrd_ParseString_445
   2834                                            {
   2835                                              // Yes...Build and Send BLE Response NOW.
   2836                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED</STATUS>");
   \   00002890   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_446
   \   00002894   0xA80B             ADD      R0,SP,#+44
   \   00002896   0x.... 0x....      BL       strcpy
   2837                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000289A   0xA80B             ADD      R0,SP,#+44
   \   0000289C   0x.... 0x....      BL       strlen
   \   000028A0   0xA90B             ADD      R1,SP,#+44
   \   000028A2   0x.... 0x....      BL       BGM111_Transmit
   2838                                            }
   2839                                            sprintf( (char *)tempBffr2, "RGB_Red Set COMPLETE." );
   \                     ??RoadBrd_ParseString_445: (+1)
   \   000028A6   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_446+0x4
   \   000028AA   0xA80B             ADD      R0,SP,#+44
   \   000028AC   0x.... 0x....      BL       sprintf
   \   000028B0   0xE2C7             B.N      ??RoadBrd_ParseString_398
   \   000028B2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_288:
   \   000028B4   0x........         DC32     ?_106
   2840                                          }
   2841                                          else
   2842                                          {
   2843                                            // Is this a BLE Operation?
   2844                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_444: (+1)
   \   000028B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000028BA   0x2D00             CMP      R5,#+0
   \   000028BC   0xD00A             BEQ.N    ??RoadBrd_ParseString_447
   2845                                            {
   2846                                              // Yes...Build and Send BLE Response NOW.
   2847                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>");
   \   000028BE   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_446+0x8
   \   000028C2   0xA80B             ADD      R0,SP,#+44
   \   000028C4   0x.... 0x....      BL       strcpy
   2848                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000028C8   0xA80B             ADD      R0,SP,#+44
   \   000028CA   0x.... 0x....      BL       strlen
   \   000028CE   0xA90B             ADD      R1,SP,#+44
   \   000028D0   0x.... 0x....      BL       BGM111_Transmit
   2849                                            }
   2850                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_447: (+1)
   \   000028D4   0xF8DF 0x1928      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   000028D8   0xA80B             ADD      R0,SP,#+44
   \   000028DA   0x.... 0x....      BL       sprintf
   \   000028DE   0xE2B0             B.N      ??RoadBrd_ParseString_398
   2851                                          }
   2852                                        }
   2853                                        else if (strncmp((char *)uuid,"000E",4) == 0) // RGB_Green
   \                     ??RoadBrd_ParseString_443: (+1)
   \   000028E0   0x2204             MOVS     R2,#+4
   \   000028E2   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_446+0xC
   \   000028E6   0xA836             ADD      R0,SP,#+216
   \   000028E8   0x.... 0x....      BL       strncmp
   \   000028EC   0x2800             CMP      R0,#+0
   \   000028EE   0xD133             BNE.N    ??RoadBrd_ParseString_448
   2854                                        {
   2855                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_GREEN, Offset, Scale);
   \   000028F0   0x9A2A             LDR      R2,[SP, #+168]
   \   000028F2   0x9929             LDR      R1,[SP, #+164]
   \   000028F4   0x200B             MOVS     R0,#+11
   \   000028F6   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000028FA   0x0006             MOVS     R6,R0
   2856                                          if (Status == HAL_OK)
   \   000028FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000028FE   0x2E00             CMP      R6,#+0
   \   00002900   0xD116             BNE.N    ??RoadBrd_ParseString_449
   2857                                          {
   2858                                            // Is this a BLE Operation?
   2859                                            if ( BLE_Flag )
   \   00002902   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002904   0x2D00             CMP      R5,#+0
   \   00002906   0xD00A             BEQ.N    ??RoadBrd_ParseString_450
   2860                                            {
   2861                                              // Yes...Build and Send BLE Response NOW.
   2862                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN</STATUS>");
   \   00002908   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_446+0x10
   \   0000290C   0xA80B             ADD      R0,SP,#+44
   \   0000290E   0x.... 0x....      BL       strcpy
   2863                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002912   0xA80B             ADD      R0,SP,#+44
   \   00002914   0x.... 0x....      BL       strlen
   \   00002918   0xA90B             ADD      R1,SP,#+44
   \   0000291A   0x.... 0x....      BL       BGM111_Transmit
   2864                                            }
   2865                                            sprintf( (char *)tempBffr2, "RGB_Green Set COMPLETE." );
   \                     ??RoadBrd_ParseString_450: (+1)
   \   0000291E   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_451
   \   00002922   0xA80B             ADD      R0,SP,#+44
   \   00002924   0x.... 0x....      BL       sprintf
   \   00002928   0xE28B             B.N      ??RoadBrd_ParseString_398
   \   0000292A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_303:
   \   0000292C   0x........         DC32     ?_107
   2866                                          }
   2867                                          else
   2868                                          {
   2869                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_449: (+1)
   \   00002930   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002932   0x2D00             CMP      R5,#+0
   \   00002934   0xD00A             BEQ.N    ??RoadBrd_ParseString_452
   2870                                            {
   2871                                              // Yes...Build and Send BLE Response NOW.
   2872                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>");
   \   00002936   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_451+0x4
   \   0000293A   0xA80B             ADD      R0,SP,#+44
   \   0000293C   0x.... 0x....      BL       strcpy
   2873                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002940   0xA80B             ADD      R0,SP,#+44
   \   00002942   0x.... 0x....      BL       strlen
   \   00002946   0xA90B             ADD      R1,SP,#+44
   \   00002948   0x.... 0x....      BL       BGM111_Transmit
   2874                                            }
   2875                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_452: (+1)
   \   0000294C   0xF8DF 0x18B0      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002950   0xA80B             ADD      R0,SP,#+44
   \   00002952   0x.... 0x....      BL       sprintf
   \   00002956   0xE274             B.N      ??RoadBrd_ParseString_398
   2876                                          }
   2877                                        }
   2878                                        else if (strncmp((char *)uuid,"000F",4) == 0) // RGB_Blue
   \                     ??RoadBrd_ParseString_448: (+1)
   \   00002958   0x2204             MOVS     R2,#+4
   \   0000295A   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_451+0x8
   \   0000295E   0xA836             ADD      R0,SP,#+216
   \   00002960   0x.... 0x....      BL       strncmp
   \   00002964   0x2800             CMP      R0,#+0
   \   00002966   0xD139             BNE.N    ??RoadBrd_ParseString_453
   2879                                        {
   2880                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_BLUE, Offset, Scale);
   \   00002968   0x9A2A             LDR      R2,[SP, #+168]
   \   0000296A   0x9929             LDR      R1,[SP, #+164]
   \   0000296C   0x200C             MOVS     R0,#+12
   \   0000296E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002972   0x0006             MOVS     R6,R0
   2881                                          if (Status == HAL_OK)
   \   00002974   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002976   0x2E00             CMP      R6,#+0
   \   00002978   0xD11C             BNE.N    ??RoadBrd_ParseString_454
   2882                                          {
   2883                                            // Is this a BLE Operation?
   2884                                            if ( BLE_Flag )
   \   0000297A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000297C   0x2D00             CMP      R5,#+0
   \   0000297E   0xD00A             BEQ.N    ??RoadBrd_ParseString_455
   2885                                            {
   2886                                              // Yes...Build and Send BLE Response NOW.
   2887                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE</STATUS>");
   \   00002980   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_451+0xC
   \   00002984   0xA80B             ADD      R0,SP,#+44
   \   00002986   0x.... 0x....      BL       strcpy
   2888                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000298A   0xA80B             ADD      R0,SP,#+44
   \   0000298C   0x.... 0x....      BL       strlen
   \   00002990   0xA90B             ADD      R1,SP,#+44
   \   00002992   0x.... 0x....      BL       BGM111_Transmit
   2889                                            }
   2890                                            sprintf( (char *)tempBffr2, "RGB_Blue Set COMPLETE." );
   \                     ??RoadBrd_ParseString_455: (+1)
   \   00002996   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_451+0x10
   \   0000299A   0xA80B             ADD      R0,SP,#+44
   \   0000299C   0x.... 0x....      BL       sprintf
   \   000029A0   0xE24F             B.N      ??RoadBrd_ParseString_398
   \   000029A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_312:
   \   000029A4   0x........         DC32     ?_108
   \   000029A8   0x........         DC32     ?_109
   \   000029AC   0x........         DC32     ?_110
   \   000029B0   0x........         DC32     ?_111
   2891                                          }
   2892                                          else
   2893                                          {
   2894                                            // Is this a BLE Operation?
   2895                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_454: (+1)
   \   000029B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000029B6   0x2D00             CMP      R5,#+0
   \   000029B8   0xD00A             BEQ.N    ??RoadBrd_ParseString_456
   2896                                            {
   2897                                              // Yes...Build and Send BLE Response NOW.
   2898                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>");
   \   000029BA   0xF8DF 0x1EB8      LDR.W    R1,??RoadBrd_ParseString_457
   \   000029BE   0xA80B             ADD      R0,SP,#+44
   \   000029C0   0x.... 0x....      BL       strcpy
   2899                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000029C4   0xA80B             ADD      R0,SP,#+44
   \   000029C6   0x.... 0x....      BL       strlen
   \   000029CA   0xA90B             ADD      R1,SP,#+44
   \   000029CC   0x.... 0x....      BL       BGM111_Transmit
   2900                                            }
   2901                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_456: (+1)
   \   000029D0   0xF8DF 0x182C      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   000029D4   0xA80B             ADD      R0,SP,#+44
   \   000029D6   0x.... 0x....      BL       sprintf
   \   000029DA   0xE232             B.N      ??RoadBrd_ParseString_398
   2902                                          }
   2903                                        }
   2904                                        else if (strncmp((char *)uuid,"0017",4) == 0) // Therm_C
   \                     ??RoadBrd_ParseString_453: (+1)
   \   000029DC   0x2204             MOVS     R2,#+4
   \   000029DE   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_457+0x4
   \   000029E2   0xA836             ADD      R0,SP,#+216
   \   000029E4   0x.... 0x....      BL       strncmp
   \   000029E8   0x2800             CMP      R0,#+0
   \   000029EA   0xD130             BNE.N    ??RoadBrd_ParseString_458
   2905                                        {
   2906                                          Status = RoadBrd_CAL_Set_CalItem( CAL_THERM_C, Offset, Scale);
   \   000029EC   0x9A2A             LDR      R2,[SP, #+168]
   \   000029EE   0x9929             LDR      R1,[SP, #+164]
   \   000029F0   0x200D             MOVS     R0,#+13
   \   000029F2   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000029F6   0x0006             MOVS     R6,R0
   2907                                          if (Status == HAL_OK)
   \   000029F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000029FA   0x2E00             CMP      R6,#+0
   \   000029FC   0xD113             BNE.N    ??RoadBrd_ParseString_459
   2908                                          {
   2909                                            // Is this a BLE Operation?
   2910                                            if ( BLE_Flag )
   \   000029FE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A00   0x2D00             CMP      R5,#+0
   \   00002A02   0xD00A             BEQ.N    ??RoadBrd_ParseString_460
   2911                                            {
   2912                                              // Yes...Build and Send BLE Response NOW.
   2913                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C</STATUS>");
   \   00002A04   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_457+0x8
   \   00002A08   0xA80B             ADD      R0,SP,#+44
   \   00002A0A   0x.... 0x....      BL       strcpy
   2914                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A0E   0xA80B             ADD      R0,SP,#+44
   \   00002A10   0x.... 0x....      BL       strlen
   \   00002A14   0xA90B             ADD      R1,SP,#+44
   \   00002A16   0x.... 0x....      BL       BGM111_Transmit
   2915                                            }
   2916                                            sprintf( (char *)tempBffr2, "Therm_C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_460: (+1)
   \   00002A1A   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_457+0xC
   \   00002A1E   0xA80B             ADD      R0,SP,#+44
   \   00002A20   0x.... 0x....      BL       sprintf
   \   00002A24   0xE20D             B.N      ??RoadBrd_ParseString_398
   2917                                          }
   2918                                          else
   2919                                          {
   2920                                            // Is this a BLE Operation?
   2921                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_459: (+1)
   \   00002A26   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A28   0x2D00             CMP      R5,#+0
   \   00002A2A   0xD00A             BEQ.N    ??RoadBrd_ParseString_461
   2922                                            {
   2923                                              // Yes...Build and Send BLE Response NOW.
   2924                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C_ERR</STATUS>");
   \   00002A2C   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_457+0x10
   \   00002A30   0xA80B             ADD      R0,SP,#+44
   \   00002A32   0x.... 0x....      BL       strcpy
   2925                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A36   0xA80B             ADD      R0,SP,#+44
   \   00002A38   0x.... 0x....      BL       strlen
   \   00002A3C   0xA90B             ADD      R1,SP,#+44
   \   00002A3E   0x.... 0x....      BL       BGM111_Transmit
   2926                                            }
   2927                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_461: (+1)
   \   00002A42   0xF8DF 0x17BC      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002A46   0xA80B             ADD      R0,SP,#+44
   \   00002A48   0x.... 0x....      BL       sprintf
   \   00002A4C   0xE1F9             B.N      ??RoadBrd_ParseString_398
   2928                                          }
   2929                                        }
   2930                                        else if (strncmp((char *)uuid,"0019",4) == 0) // RoadT_1C
   \                     ??RoadBrd_ParseString_458: (+1)
   \   00002A4E   0x2204             MOVS     R2,#+4
   \   00002A50   0xF8DF 0x1EC4      LDR.W    R1,??RoadBrd_ParseString_462
   \   00002A54   0xA836             ADD      R0,SP,#+216
   \   00002A56   0x.... 0x....      BL       strncmp
   \   00002A5A   0x2800             CMP      R0,#+0
   \   00002A5C   0xD132             BNE.N    ??RoadBrd_ParseString_463
   2931                                        {
   2932                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_1C, Offset, Scale);
   \   00002A5E   0x9A2A             LDR      R2,[SP, #+168]
   \   00002A60   0x9929             LDR      R1,[SP, #+164]
   \   00002A62   0x200E             MOVS     R0,#+14
   \   00002A64   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002A68   0x0006             MOVS     R6,R0
   2933                                          if (Status == HAL_OK)
   \   00002A6A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002A6C   0x2E00             CMP      R6,#+0
   \   00002A6E   0xD115             BNE.N    ??RoadBrd_ParseString_464
   2934                                          {
   2935                                            // Is this a BLE Operation?
   2936                                            if ( BLE_Flag )
   \   00002A70   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A72   0x2D00             CMP      R5,#+0
   \   00002A74   0xD00A             BEQ.N    ??RoadBrd_ParseString_465
   2937                                            {
   2938                                              // Yes...Build and Send BLE Response NOW.
   2939                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C</STATUS>");
   \   00002A76   0xF8DF 0x1EA4      LDR.W    R1,??RoadBrd_ParseString_462+0x4
   \   00002A7A   0xA80B             ADD      R0,SP,#+44
   \   00002A7C   0x.... 0x....      BL       strcpy
   2940                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A80   0xA80B             ADD      R0,SP,#+44
   \   00002A82   0x.... 0x....      BL       strlen
   \   00002A86   0xA90B             ADD      R1,SP,#+44
   \   00002A88   0x.... 0x....      BL       BGM111_Transmit
   2941                                            }
   2942                                            sprintf( (char *)tempBffr2, "RoadT_1C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_465: (+1)
   \   00002A8C   0xF8DF 0x1E90      LDR.W    R1,??RoadBrd_ParseString_462+0x8
   \   00002A90   0xA80B             ADD      R0,SP,#+44
   \   00002A92   0x.... 0x....      BL       sprintf
   \   00002A96   0xE1D4             B.N      ??RoadBrd_ParseString_398
   \                     ??RoadBrd_ParseString_322:
   \   00002A98   0x........         DC32     ?_112
   2943                                          }
   2944                                          else
   2945                                          {
   2946                                            // Is this a BLE Operation?
   2947                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_464: (+1)
   \   00002A9C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A9E   0x2D00             CMP      R5,#+0
   \   00002AA0   0xD00A             BEQ.N    ??RoadBrd_ParseString_466
   2948                                            {
   2949                                              // Yes...Build and Send BLE Response NOW.
   2950                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>");
   \   00002AA2   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_462+0xC
   \   00002AA6   0xA80B             ADD      R0,SP,#+44
   \   00002AA8   0x.... 0x....      BL       strcpy
   2951                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002AAC   0xA80B             ADD      R0,SP,#+44
   \   00002AAE   0x.... 0x....      BL       strlen
   \   00002AB2   0xA90B             ADD      R1,SP,#+44
   \   00002AB4   0x.... 0x....      BL       BGM111_Transmit
   2952                                            }
   2953                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_466: (+1)
   \   00002AB8   0xF8DF 0x1744      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002ABC   0xA80B             ADD      R0,SP,#+44
   \   00002ABE   0x.... 0x....      BL       sprintf
   \   00002AC2   0xE1BE             B.N      ??RoadBrd_ParseString_398
   2954                                          }
   2955                                        }
   2956                                        else if (strncmp((char *)uuid,"001B",4) == 0) // RoadT_2C
   \                     ??RoadBrd_ParseString_463: (+1)
   \   00002AC4   0x2204             MOVS     R2,#+4
   \   00002AC6   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_462+0x10
   \   00002ACA   0xA836             ADD      R0,SP,#+216
   \   00002ACC   0x.... 0x....      BL       strncmp
   \   00002AD0   0x2800             CMP      R0,#+0
   \   00002AD2   0xD133             BNE.N    ??RoadBrd_ParseString_467
   2957                                        {
   2958                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_2C, Offset, Scale);
   \   00002AD4   0x9A2A             LDR      R2,[SP, #+168]
   \   00002AD6   0x9929             LDR      R1,[SP, #+164]
   \   00002AD8   0x200F             MOVS     R0,#+15
   \   00002ADA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002ADE   0x0006             MOVS     R6,R0
   2959                                          if (Status == HAL_OK)
   \   00002AE0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002AE2   0x2E00             CMP      R6,#+0
   \   00002AE4   0xD116             BNE.N    ??RoadBrd_ParseString_468
   2960                                          {
   2961                                            // Is this a BLE Operation?
   2962                                            if ( BLE_Flag )
   \   00002AE6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AE8   0x2D00             CMP      R5,#+0
   \   00002AEA   0xD00A             BEQ.N    ??RoadBrd_ParseString_469
   2963                                            {
   2964                                              // Yes...Build and Send BLE Response NOW.
   2965                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C</STATUS>");
   \   00002AEC   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_470
   \   00002AF0   0xA80B             ADD      R0,SP,#+44
   \   00002AF2   0x.... 0x....      BL       strcpy
   2966                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002AF6   0xA80B             ADD      R0,SP,#+44
   \   00002AF8   0x.... 0x....      BL       strlen
   \   00002AFC   0xA90B             ADD      R1,SP,#+44
   \   00002AFE   0x.... 0x....      BL       BGM111_Transmit
   2967                                            }
   2968                                            sprintf( (char *)tempBffr2, "RoadT_2C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_469: (+1)
   \   00002B02   0xF8DF 0x1EBC      LDR.W    R1,??RoadBrd_ParseString_470+0x4
   \   00002B06   0xA80B             ADD      R0,SP,#+44
   \   00002B08   0x.... 0x....      BL       sprintf
   \   00002B0C   0xE199             B.N      ??RoadBrd_ParseString_398
   \   00002B0E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_328:
   \   00002B10   0x........         DC32     ?_114
   2969                                          }
   2970                                          else
   2971                                          {
   2972                                            // Is this a BLE Operation?
   2973                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_468: (+1)
   \   00002B14   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B16   0x2D00             CMP      R5,#+0
   \   00002B18   0xD00A             BEQ.N    ??RoadBrd_ParseString_471
   2974                                            {
   2975                                              // Yes...Build and Send BLE Response NOW.
   2976                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>");
   \   00002B1A   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_470+0x8
   \   00002B1E   0xA80B             ADD      R0,SP,#+44
   \   00002B20   0x.... 0x....      BL       strcpy
   2977                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B24   0xA80B             ADD      R0,SP,#+44
   \   00002B26   0x.... 0x....      BL       strlen
   \   00002B2A   0xA90B             ADD      R1,SP,#+44
   \   00002B2C   0x.... 0x....      BL       BGM111_Transmit
   2978                                            }
   2979                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_471: (+1)
   \   00002B30   0xF8DF 0x16CC      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002B34   0xA80B             ADD      R0,SP,#+44
   \   00002B36   0x.... 0x....      BL       sprintf
   \   00002B3A   0xE182             B.N      ??RoadBrd_ParseString_398
   2980                                          }
   2981                                        }
   2982                                        else if (strncmp((char *)uuid,"001D",4) == 0) // RoadT_3C
   \                     ??RoadBrd_ParseString_467: (+1)
   \   00002B3C   0x2204             MOVS     R2,#+4
   \   00002B3E   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_470+0xC
   \   00002B42   0xA836             ADD      R0,SP,#+216
   \   00002B44   0x.... 0x....      BL       strncmp
   \   00002B48   0x2800             CMP      R0,#+0
   \   00002B4A   0xD135             BNE.N    ??RoadBrd_ParseString_472
   2983                                        {
   2984                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_3C, Offset, Scale);
   \   00002B4C   0x9A2A             LDR      R2,[SP, #+168]
   \   00002B4E   0x9929             LDR      R1,[SP, #+164]
   \   00002B50   0x2010             MOVS     R0,#+16
   \   00002B52   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002B56   0x0006             MOVS     R6,R0
   2985                                          if (Status == HAL_OK)
   \   00002B58   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002B5A   0x2E00             CMP      R6,#+0
   \   00002B5C   0xD118             BNE.N    ??RoadBrd_ParseString_473
   2986                                          {
   2987                                            // Is this a BLE Operation?
   2988                                            if ( BLE_Flag )
   \   00002B5E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B60   0x2D00             CMP      R5,#+0
   \   00002B62   0xD00A             BEQ.N    ??RoadBrd_ParseString_474
   2989                                            {
   2990                                              // Yes...Build and Send BLE Response NOW.
   2991                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C</STATUS>");
   \   00002B64   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_470+0x10
   \   00002B68   0xA80B             ADD      R0,SP,#+44
   \   00002B6A   0x.... 0x....      BL       strcpy
   2992                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B6E   0xA80B             ADD      R0,SP,#+44
   \   00002B70   0x.... 0x....      BL       strlen
   \   00002B74   0xA90B             ADD      R1,SP,#+44
   \   00002B76   0x.... 0x....      BL       BGM111_Transmit
   2993                                            }
   2994                                            sprintf( (char *)tempBffr2, "RoadT_3C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_474: (+1)
   \   00002B7A   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_470+0x14
   \   00002B7E   0xA80B             ADD      R0,SP,#+44
   \   00002B80   0x.... 0x....      BL       sprintf
   \   00002B84   0xE15D             B.N      ??RoadBrd_ParseString_398
   \   00002B86   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_332:
   \   00002B88   0x........         DC32     ?_115
   \   00002B8C   0x........         DC32     ?_116
   2995                                          }
   2996                                          else
   2997                                          {
   2998                                            // Is this a BLE Operation?
   2999                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_473: (+1)
   \   00002B90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B92   0x2D00             CMP      R5,#+0
   \   00002B94   0xD00A             BEQ.N    ??RoadBrd_ParseString_475
   3000                                            {
   3001                                              // Yes...Build and Send BLE Response NOW.
   3002                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>");
   \   00002B96   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_476
   \   00002B9A   0xA80B             ADD      R0,SP,#+44
   \   00002B9C   0x.... 0x....      BL       strcpy
   3003                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BA0   0xA80B             ADD      R0,SP,#+44
   \   00002BA2   0x.... 0x....      BL       strlen
   \   00002BA6   0xA90B             ADD      R1,SP,#+44
   \   00002BA8   0x.... 0x....      BL       BGM111_Transmit
   3004                                            }
   3005                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_475: (+1)
   \   00002BAC   0xF8DF 0x1650      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002BB0   0xA80B             ADD      R0,SP,#+44
   \   00002BB2   0x.... 0x....      BL       sprintf
   \   00002BB6   0xE144             B.N      ??RoadBrd_ParseString_398
   3006                                          }
   3007                                        }
   3008                                        else if (strncmp((char *)uuid,"001F",4) == 0) // RoadT_4C
   \                     ??RoadBrd_ParseString_472: (+1)
   \   00002BB8   0x2204             MOVS     R2,#+4
   \   00002BBA   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_476+0x4
   \   00002BBE   0xA836             ADD      R0,SP,#+216
   \   00002BC0   0x.... 0x....      BL       strncmp
   \   00002BC4   0x2800             CMP      R0,#+0
   \   00002BC6   0xD135             BNE.N    ??RoadBrd_ParseString_477
   3009                                        {
   3010                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_4C, Offset, Scale);
   \   00002BC8   0x9A2A             LDR      R2,[SP, #+168]
   \   00002BCA   0x9929             LDR      R1,[SP, #+164]
   \   00002BCC   0x2011             MOVS     R0,#+17
   \   00002BCE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002BD2   0x0006             MOVS     R6,R0
   3011                                          if (Status == HAL_OK)
   \   00002BD4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002BD6   0x2E00             CMP      R6,#+0
   \   00002BD8   0xD118             BNE.N    ??RoadBrd_ParseString_478
   3012                                          {
   3013                                            // Is this a BLE Operation?
   3014                                            if ( BLE_Flag )
   \   00002BDA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002BDC   0x2D00             CMP      R5,#+0
   \   00002BDE   0xD00A             BEQ.N    ??RoadBrd_ParseString_479
   3015                                            {
   3016                                              // Yes...Build and Send BLE Response NOW.
   3017                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C</STATUS>");
   \   00002BE0   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_476+0x8
   \   00002BE4   0xA80B             ADD      R0,SP,#+44
   \   00002BE6   0x.... 0x....      BL       strcpy
   3018                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BEA   0xA80B             ADD      R0,SP,#+44
   \   00002BEC   0x.... 0x....      BL       strlen
   \   00002BF0   0xA90B             ADD      R1,SP,#+44
   \   00002BF2   0x.... 0x....      BL       BGM111_Transmit
   3019                                            }
   3020                                            sprintf( (char *)tempBffr2, "RoadT_4C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_479: (+1)
   \   00002BF6   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_476+0xC
   \   00002BFA   0xA80B             ADD      R0,SP,#+44
   \   00002BFC   0x.... 0x....      BL       sprintf
   \   00002C00   0xE11F             B.N      ??RoadBrd_ParseString_398
   \   00002C02   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_335:
   \   00002C04   0x........         DC32     ?_117
   \   00002C08   0x........         DC32     ?_118
   3021                                          }
   3022                                          else
   3023                                          {
   3024                                            // Is this a BLE Operation?
   3025                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_478: (+1)
   \   00002C0C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C0E   0x2D00             CMP      R5,#+0
   \   00002C10   0xD00A             BEQ.N    ??RoadBrd_ParseString_480
   3026                                            {
   3027                                              // Yes...Build and Send BLE Response NOW.
   3028                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>");
   \   00002C12   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_476+0x10
   \   00002C16   0xA80B             ADD      R0,SP,#+44
   \   00002C18   0x.... 0x....      BL       strcpy
   3029                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C1C   0xA80B             ADD      R0,SP,#+44
   \   00002C1E   0x.... 0x....      BL       strlen
   \   00002C22   0xA90B             ADD      R1,SP,#+44
   \   00002C24   0x.... 0x....      BL       BGM111_Transmit
   3030                                            }
   3031                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_480: (+1)
   \   00002C28   0xF8DF 0x15D4      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002C2C   0xA80B             ADD      R0,SP,#+44
   \   00002C2E   0x.... 0x....      BL       sprintf
   \   00002C32   0xE106             B.N      ??RoadBrd_ParseString_398
   3032                                          }
   3033                                        }
   3034                                        else if (strncmp((char *)uuid,"0021",4) == 0) // RoadT_5C
   \                     ??RoadBrd_ParseString_477: (+1)
   \   00002C34   0x2204             MOVS     R2,#+4
   \   00002C36   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_481
   \   00002C3A   0xA836             ADD      R0,SP,#+216
   \   00002C3C   0x.... 0x....      BL       strncmp
   \   00002C40   0x2800             CMP      R0,#+0
   \   00002C42   0xD135             BNE.N    ??RoadBrd_ParseString_482
   3035                                        {
   3036                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_5C, Offset, Scale);
   \   00002C44   0x9A2A             LDR      R2,[SP, #+168]
   \   00002C46   0x9929             LDR      R1,[SP, #+164]
   \   00002C48   0x2012             MOVS     R0,#+18
   \   00002C4A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002C4E   0x0006             MOVS     R6,R0
   3037                                          if (Status == HAL_OK)
   \   00002C50   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002C52   0x2E00             CMP      R6,#+0
   \   00002C54   0xD118             BNE.N    ??RoadBrd_ParseString_483
   3038                                          {
   3039                                            // Is this a BLE Operation?
   3040                                            if ( BLE_Flag )
   \   00002C56   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C58   0x2D00             CMP      R5,#+0
   \   00002C5A   0xD00A             BEQ.N    ??RoadBrd_ParseString_484
   3041                                            {
   3042                                              // Yes...Build and Send BLE Response NOW.
   3043                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C</STATUS>");
   \   00002C5C   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_481+0x4
   \   00002C60   0xA80B             ADD      R0,SP,#+44
   \   00002C62   0x.... 0x....      BL       strcpy
   3044                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C66   0xA80B             ADD      R0,SP,#+44
   \   00002C68   0x.... 0x....      BL       strlen
   \   00002C6C   0xA90B             ADD      R1,SP,#+44
   \   00002C6E   0x.... 0x....      BL       BGM111_Transmit
   3045                                            }
   3046                                            sprintf( (char *)tempBffr2, "RoadT_5C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_484: (+1)
   \   00002C72   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_481+0x8
   \   00002C76   0xA80B             ADD      R0,SP,#+44
   \   00002C78   0x.... 0x....      BL       sprintf
   \   00002C7C   0xE0E1             B.N      ??RoadBrd_ParseString_398
   \   00002C7E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_340:
   \   00002C80   0x........         DC32     ?_119
   \   00002C84   0x........         DC32     ?_120
   3047                                          }
   3048                                          else
   3049                                          {
   3050                                            // Is this a BLE Operation?
   3051                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_483: (+1)
   \   00002C88   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C8A   0x2D00             CMP      R5,#+0
   \   00002C8C   0xD00A             BEQ.N    ??RoadBrd_ParseString_485
   3052                                            {
   3053                                              // Yes...Build and Send BLE Response NOW.
   3054                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>");
   \   00002C8E   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_481+0xC
   \   00002C92   0xA80B             ADD      R0,SP,#+44
   \   00002C94   0x.... 0x....      BL       strcpy
   3055                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C98   0xA80B             ADD      R0,SP,#+44
   \   00002C9A   0x.... 0x....      BL       strlen
   \   00002C9E   0xA90B             ADD      R1,SP,#+44
   \   00002CA0   0x.... 0x....      BL       BGM111_Transmit
   3056                                            }
   3057                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_485: (+1)
   \   00002CA4   0xF8DF 0x1558      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002CA8   0xA80B             ADD      R0,SP,#+44
   \   00002CAA   0x.... 0x....      BL       sprintf
   \   00002CAE   0xE0C8             B.N      ??RoadBrd_ParseString_398
   3058                                          }
   3059                                        }
   3060                                        else if (strncmp((char *)uuid,"0023",4) == 0) // RoadT_6C
   \                     ??RoadBrd_ParseString_482: (+1)
   \   00002CB0   0x2204             MOVS     R2,#+4
   \   00002CB2   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_481+0x10
   \   00002CB6   0xA836             ADD      R0,SP,#+216
   \   00002CB8   0x.... 0x....      BL       strncmp
   \   00002CBC   0x2800             CMP      R0,#+0
   \   00002CBE   0xD133             BNE.N    ??RoadBrd_ParseString_486
   3061                                        {
   3062                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_6C, Offset, Scale);
   \   00002CC0   0x9A2A             LDR      R2,[SP, #+168]
   \   00002CC2   0x9929             LDR      R1,[SP, #+164]
   \   00002CC4   0x2013             MOVS     R0,#+19
   \   00002CC6   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002CCA   0x0006             MOVS     R6,R0
   3063                                          if (Status == HAL_OK)
   \   00002CCC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002CCE   0x2E00             CMP      R6,#+0
   \   00002CD0   0xD116             BNE.N    ??RoadBrd_ParseString_487
   3064                                          {
   3065                                            // Is this a BLE Operation?
   3066                                            if ( BLE_Flag )
   \   00002CD2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002CD4   0x2D00             CMP      R5,#+0
   \   00002CD6   0xD00A             BEQ.N    ??RoadBrd_ParseString_488
   3067                                            {
   3068                                              // Yes...Build and Send BLE Response NOW.
   3069                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C</STATUS>");
   \   00002CD8   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_489
   \   00002CDC   0xA80B             ADD      R0,SP,#+44
   \   00002CDE   0x.... 0x....      BL       strcpy
   3070                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002CE2   0xA80B             ADD      R0,SP,#+44
   \   00002CE4   0x.... 0x....      BL       strlen
   \   00002CE8   0xA90B             ADD      R1,SP,#+44
   \   00002CEA   0x.... 0x....      BL       BGM111_Transmit
   3071                                            }
   3072                                            sprintf( (char *)tempBffr2, "RoadT_6C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_488: (+1)
   \   00002CEE   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_489+0x4
   \   00002CF2   0xA80B             ADD      R0,SP,#+44
   \   00002CF4   0x.... 0x....      BL       sprintf
   \   00002CF8   0xE0A3             B.N      ??RoadBrd_ParseString_398
   \   00002CFA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_348:
   \   00002CFC   0x........         DC32     ?_121
   3073                                          }
   3074                                          else
   3075                                          {
   3076                                            // Is this a BLE Operation?
   3077                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_487: (+1)
   \   00002D00   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D02   0x2D00             CMP      R5,#+0
   \   00002D04   0xD00A             BEQ.N    ??RoadBrd_ParseString_490
   3078                                            {
   3079                                              // Yes...Build and Send BLE Response NOW.
   3080                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>");
   \   00002D06   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_489+0x8
   \   00002D0A   0xA80B             ADD      R0,SP,#+44
   \   00002D0C   0x.... 0x....      BL       strcpy
   3081                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D10   0xA80B             ADD      R0,SP,#+44
   \   00002D12   0x.... 0x....      BL       strlen
   \   00002D16   0xA90B             ADD      R1,SP,#+44
   \   00002D18   0x.... 0x....      BL       BGM111_Transmit
   3082                                            }
   3083                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_490: (+1)
   \   00002D1C   0xF8DF 0x14E0      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002D20   0xA80B             ADD      R0,SP,#+44
   \   00002D22   0x.... 0x....      BL       sprintf
   \   00002D26   0xE08C             B.N      ??RoadBrd_ParseString_398
   3084                                          }
   3085                                        }
   3086                                        else if (strncmp((char *)uuid,"0025",4) == 0) // RoadT_7C
   \                     ??RoadBrd_ParseString_486: (+1)
   \   00002D28   0x2204             MOVS     R2,#+4
   \   00002D2A   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_489+0xC
   \   00002D2E   0xA836             ADD      R0,SP,#+216
   \   00002D30   0x.... 0x....      BL       strncmp
   \   00002D34   0x2800             CMP      R0,#+0
   \   00002D36   0xD135             BNE.N    ??RoadBrd_ParseString_491
   3087                                        {
   3088                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_7C, Offset, Scale);
   \   00002D38   0x9A2A             LDR      R2,[SP, #+168]
   \   00002D3A   0x9929             LDR      R1,[SP, #+164]
   \   00002D3C   0x2014             MOVS     R0,#+20
   \   00002D3E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002D42   0x0006             MOVS     R6,R0
   3089                                          if (Status == HAL_OK)
   \   00002D44   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002D46   0x2E00             CMP      R6,#+0
   \   00002D48   0xD118             BNE.N    ??RoadBrd_ParseString_492
   3090                                          {
   3091                                            // Is this a BLE Operation?
   3092                                            if ( BLE_Flag )
   \   00002D4A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D4C   0x2D00             CMP      R5,#+0
   \   00002D4E   0xD00A             BEQ.N    ??RoadBrd_ParseString_493
   3093                                            {
   3094                                              // Yes...Build and Send BLE Response NOW.
   3095                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C</STATUS>");
   \   00002D50   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_494
   \   00002D54   0xA80B             ADD      R0,SP,#+44
   \   00002D56   0x.... 0x....      BL       strcpy
   3096                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D5A   0xA80B             ADD      R0,SP,#+44
   \   00002D5C   0x.... 0x....      BL       strlen
   \   00002D60   0xA90B             ADD      R1,SP,#+44
   \   00002D62   0x.... 0x....      BL       BGM111_Transmit
   3097                                            }
   3098                                            sprintf( (char *)tempBffr2, "RoadT_7C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_493: (+1)
   \   00002D66   0xF8DF 0x1EE8      LDR.W    R1,??RoadBrd_ParseString_494+0x4
   \   00002D6A   0xA80B             ADD      R0,SP,#+44
   \   00002D6C   0x.... 0x....      BL       sprintf
   \   00002D70   0xE067             B.N      ??RoadBrd_ParseString_398
   \   00002D72   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_354:
   \   00002D74   0x........         DC32     ?_122
   \   00002D78   0x........         DC32     ?_123
   3099                                          }
   3100                                          else
   3101                                          {
   3102                                            // Is this a BLE Operation?
   3103                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_492: (+1)
   \   00002D7C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D7E   0x2D00             CMP      R5,#+0
   \   00002D80   0xD00A             BEQ.N    ??RoadBrd_ParseString_495
   3104                                            {
   3105                                              // Yes...Build and Send BLE Response NOW.
   3106                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>");
   \   00002D82   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_494+0x8
   \   00002D86   0xA80B             ADD      R0,SP,#+44
   \   00002D88   0x.... 0x....      BL       strcpy
   3107                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D8C   0xA80B             ADD      R0,SP,#+44
   \   00002D8E   0x.... 0x....      BL       strlen
   \   00002D92   0xA90B             ADD      R1,SP,#+44
   \   00002D94   0x.... 0x....      BL       BGM111_Transmit
   3108                                            }
   3109                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_495: (+1)
   \   00002D98   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002D9C   0xA80B             ADD      R0,SP,#+44
   \   00002D9E   0x.... 0x....      BL       sprintf
   \   00002DA2   0xE04E             B.N      ??RoadBrd_ParseString_398
   3110                                          }
   3111                                        }
   3112                                        else if (strncmp((char *)uuid,"0027",4) == 0) // RoadT_8C
   \                     ??RoadBrd_ParseString_491: (+1)
   \   00002DA4   0x2204             MOVS     R2,#+4
   \   00002DA6   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_494+0xC
   \   00002DAA   0xA836             ADD      R0,SP,#+216
   \   00002DAC   0x.... 0x....      BL       strncmp
   \   00002DB0   0x2800             CMP      R0,#+0
   \   00002DB2   0xD133             BNE.N    ??RoadBrd_ParseString_496
   3113                                        {
   3114                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_8C, Offset, Scale);
   \   00002DB4   0x9A2A             LDR      R2,[SP, #+168]
   \   00002DB6   0x9929             LDR      R1,[SP, #+164]
   \   00002DB8   0x2015             MOVS     R0,#+21
   \   00002DBA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002DBE   0x0006             MOVS     R6,R0
   3115                                          if (Status == HAL_OK)
   \   00002DC0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002DC2   0x2E00             CMP      R6,#+0
   \   00002DC4   0xD113             BNE.N    ??RoadBrd_ParseString_497
   3116                                          {
   3117                                            // Is this a BLE Operation?
   3118                                            if ( BLE_Flag )
   \   00002DC6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DC8   0x2D00             CMP      R5,#+0
   \   00002DCA   0xD00A             BEQ.N    ??RoadBrd_ParseString_498
   3119                                            {
   3120                                              // Yes...Build and Send BLE Response NOW.
   3121                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C</STATUS>");
   \   00002DCC   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_494+0x10
   \   00002DD0   0xA80B             ADD      R0,SP,#+44
   \   00002DD2   0x.... 0x....      BL       strcpy
   3122                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002DD6   0xA80B             ADD      R0,SP,#+44
   \   00002DD8   0x.... 0x....      BL       strlen
   \   00002DDC   0xA90B             ADD      R1,SP,#+44
   \   00002DDE   0x.... 0x....      BL       BGM111_Transmit
   3123                                            }
   3124                                            sprintf( (char *)tempBffr2, "RoadT_8C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_498: (+1)
   \   00002DE2   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_494+0x14
   \   00002DE6   0xA80B             ADD      R0,SP,#+44
   \   00002DE8   0x.... 0x....      BL       sprintf
   \   00002DEC   0xE029             B.N      ??RoadBrd_ParseString_398
   3125                                          }
   3126                                          else
   3127                                          {
   3128                                            // Is this a BLE Operation?
   3129                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_497: (+1)
   \   00002DEE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DF0   0x2D00             CMP      R5,#+0
   \   00002DF2   0xD00A             BEQ.N    ??RoadBrd_ParseString_499
   3130                                            {
   3131                                              // Yes...Build and Send BLE Response NOW.
   3132                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>");
   \   00002DF4   0xF8DF 0x1EFC      LDR.W    R1,??RoadBrd_ParseString_500
   \   00002DF8   0xA80B             ADD      R0,SP,#+44
   \   00002DFA   0x.... 0x....      BL       strcpy
   3133                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002DFE   0xA80B             ADD      R0,SP,#+44
   \   00002E00   0x.... 0x....      BL       strlen
   \   00002E04   0xA90B             ADD      R1,SP,#+44
   \   00002E06   0x.... 0x....      BL       BGM111_Transmit
   3134                                            }
   3135                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_499: (+1)
   \   00002E0A   0xF8DF 0x13F4      LDR.W    R1,??RoadBrd_ParseString_397+0xC
   \   00002E0E   0xA80B             ADD      R0,SP,#+44
   \   00002E10   0x.... 0x....      BL       sprintf
   \   00002E14   0xE015             B.N      ??RoadBrd_ParseString_398
   \   00002E16   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_359:
   \   00002E18   0x........         DC32     ?_124
   3136                                          }
   3137                                        }
   3138                                        else
   3139                                        {
   3140                                          // Is this a BLE Operation?
   3141                                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_496: (+1)
   \   00002E1C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E1E   0x2D00             CMP      R5,#+0
   \   00002E20   0xD00A             BEQ.N    ??RoadBrd_ParseString_501
   3142                                          {
   3143                                            // Yes...Build and Send BLE Response NOW.
   3144                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADUUID</STATUS>");
   \   00002E22   0xF8DF 0x1ED4      LDR.W    R1,??RoadBrd_ParseString_500+0x4
   \   00002E26   0xA80B             ADD      R0,SP,#+44
   \   00002E28   0x.... 0x....      BL       strcpy
   3145                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E2C   0xA80B             ADD      R0,SP,#+44
   \   00002E2E   0x.... 0x....      BL       strlen
   \   00002E32   0xA90B             ADD      R1,SP,#+44
   \   00002E34   0x.... 0x....      BL       BGM111_Transmit
   3146                                          }
   3147                                          sprintf( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad UUID.\r\n" );
   \                     ??RoadBrd_ParseString_501: (+1)
   \   00002E38   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_500+0x8
   \   00002E3C   0xA80B             ADD      R0,SP,#+44
   \   00002E3E   0x.... 0x....      BL       sprintf
   3148                                        }
   3149                                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_398: (+1)
   \   00002E42   0x2000             MOVS     R0,#+0
   \   00002E44   0x0006             MOVS     R6,R0
   \   00002E46   0xE011             B.N      ??RoadBrd_ParseString_389
   3150                                      }
   3151                                      else
   3152                                      {
   3153                                        // Is this a BLE Operation?
   3154                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_393: (+1)
   \   00002E48   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E4A   0x2D00             CMP      R5,#+0
   \   00002E4C   0xD009             BEQ.N    ??RoadBrd_ParseString_502
   3155                                        {
   3156                                          // Yes...Build and Send BLE Response NOW.
   3157                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   00002E4E   0x49BF             LDR.N    R1,??RoadBrd_ParseString_392
   \   00002E50   0xA80B             ADD      R0,SP,#+44
   \   00002E52   0x.... 0x....      BL       strcpy
   3158                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E56   0xA80B             ADD      R0,SP,#+44
   \   00002E58   0x.... 0x....      BL       strlen
   \   00002E5C   0xA90B             ADD      R1,SP,#+44
   \   00002E5E   0x.... 0x....      BL       BGM111_Transmit
   3159                                        }
   3160                                        
   3161                                        strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Wrong Number of Parameters.\r\n");
   \                     ??RoadBrd_ParseString_502: (+1)
   \   00002E62   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_500+0xC
   \   00002E66   0xA80B             ADD      R0,SP,#+44
   \   00002E68   0x.... 0x....      BL       strcpy
   3162                                      }
   3163                                    } // EndElse (flag == 0)
   3164                                  } // EndElse (tempBffr[3]!=':')
   3165                                  break;
   \                     ??RoadBrd_ParseString_389: (+1)
   \   00002E6C   0xF001 0xB84D      B.W      ??RoadBrd_ParseString_377
   3166                                  //------------------ TCR Command: Calibration Read Command
   3167                                case 'R':
   3168                                  // Build Read Calibration Dump Part I....
   3169                                  // Is this a BLE Operation?
   3170                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_384: (+1)
   \   00002E70   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E72   0x2D00             CMP      R5,#+0
   \   00002E74   0xD00D             BEQ.N    ??RoadBrd_ParseString_503
   3171                                  {
   3172                                    // Yes...Build and Send BLE Response NOW.
   3173                                    sprintf( (char *)tempBffr2, "<STATUS>TCR:%s\\",  RoadBrd_CAL_GetTimeString());
   \   00002E76   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002E7A   0x0002             MOVS     R2,R0
   \   00002E7C   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_500+0x10
   \   00002E80   0xA80B             ADD      R0,SP,#+44
   \   00002E82   0x.... 0x....      BL       sprintf
   3174                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E86   0xA80B             ADD      R0,SP,#+44
   \   00002E88   0x.... 0x....      BL       strlen
   \   00002E8C   0xA90B             ADD      R1,SP,#+44
   \   00002E8E   0x.... 0x....      BL       BGM111_Transmit
   3175                                  }
   3176                                  
   3177                                  // Send string to UART..
   3178                                  sprintf( (char *)tempBffr2, "CALIBRATION DATA\r\nDate: %s\r\n",  RoadBrd_CAL_GetTimeString());
   \                     ??RoadBrd_ParseString_503: (+1)
   \   00002E92   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002E96   0x0002             MOVS     R2,R0
   \   00002E98   0xF8DF 0x1F14      LDR.W    R1,??RoadBrd_ParseString_504
   \   00002E9C   0xA80B             ADD      R0,SP,#+44
   \   00002E9E   0x.... 0x....      BL       sprintf
   3179          #ifdef NUCLEO
   3180                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3181          #else
   3182                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002EA2   0xA90B             ADD      R1,SP,#+44
   \   00002EA4   0x2000             MOVS     R0,#+0
   \   00002EA6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002EAA   0x0006             MOVS     R6,R0
   3183          #endif
   3184                                  if (Status != HAL_OK)
   \   00002EAC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002EAE   0x2E00             CMP      R6,#+0
   \   00002EB0   0xD003             BEQ.N    ??RoadBrd_ParseString_505
   3185                                      return Status;
   \   00002EB2   0x0030             MOVS     R0,R6
   \   00002EB4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EB6   0xF001 0xBE5D      B.W      ??RoadBrd_ParseString_4
   3186                                  // Build Read Calibration Dump Part II....
   3187                                  // Send string to UART..
   3188                                  sprintf( (char *)tempBffr2, "Name		        UUID		Slope		Offset\r\n" );
   \                     ??RoadBrd_ParseString_505: (+1)
   \   00002EBA   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_504+0x4
   \   00002EBE   0xA80B             ADD      R0,SP,#+44
   \   00002EC0   0x.... 0x....      BL       sprintf
   3189          #ifdef NUCLEO
   3190                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3191          #else
   3192                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002EC4   0xA90B             ADD      R1,SP,#+44
   \   00002EC6   0x2000             MOVS     R0,#+0
   \   00002EC8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002ECC   0x0006             MOVS     R6,R0
   3193          #endif
   3194                                  if (Status != HAL_OK)
   \   00002ECE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002ED0   0x2E00             CMP      R6,#+0
   \   00002ED2   0xD009             BEQ.N    ??RoadBrd_ParseString_506
   3195                                      return Status;
   \   00002ED4   0x0030             MOVS     R0,R6
   \   00002ED6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002ED8   0xF001 0xBE4C      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_374:
   \   00002EDC   0x........         DC32     ?_125
   \   00002EE0   0x........         DC32     ?_24
   \   00002EE4   0x........         DC32     ?_126
   3196                                  // NOW, Build Data String..
   3197                                  for (x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_506: (+1)
   \   00002EE8   0x2000             MOVS     R0,#+0
   \   00002EEA   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_507: (+1)
   \   00002EEC   0x2F16             CMP      R7,#+22
   \   00002EEE   0xF280 0x8766      BGE.W    ??RoadBrd_ParseString_508
   3198                                  {
   3199                                    // Build String
   3200                                    switch(x)
   \   00002EF2   0x2F00             CMP      R7,#+0
   \   00002EF4   0xD036             BEQ.N    ??RoadBrd_ParseString_509
   \   00002EF6   0x2F02             CMP      R7,#+2
   \   00002EF8   0xF000 0x80DE      BEQ.W    ??RoadBrd_ParseString_510
   \   00002EFC   0xF0C0 0x808A      BCC.W    ??RoadBrd_ParseString_511
   \   00002F00   0x2F04             CMP      R7,#+4
   \   00002F02   0xF000 0x8183      BEQ.W    ??RoadBrd_ParseString_512
   \   00002F06   0xF0C0 0x812B      BCC.W    ??RoadBrd_ParseString_513
   \   00002F0A   0x2F06             CMP      R7,#+6
   \   00002F0C   0xF000 0x8226      BEQ.W    ??RoadBrd_ParseString_514
   \   00002F10   0xF0C0 0x81D0      BCC.W    ??RoadBrd_ParseString_515
   \   00002F14   0x2F08             CMP      R7,#+8
   \   00002F16   0xF000 0x82C9      BEQ.W    ??RoadBrd_ParseString_516
   \   00002F1A   0xF0C0 0x8273      BCC.W    ??RoadBrd_ParseString_517
   \   00002F1E   0x2F0A             CMP      R7,#+10
   \   00002F20   0xF000 0x836A      BEQ.W    ??RoadBrd_ParseString_518
   \   00002F24   0xF0C0 0x8316      BCC.W    ??RoadBrd_ParseString_519
   \   00002F28   0x2F0C             CMP      R7,#+12
   \   00002F2A   0xF000 0x8409      BEQ.W    ??RoadBrd_ParseString_520
   \   00002F2E   0xF0C0 0x83B5      BCC.W    ??RoadBrd_ParseString_521
   \   00002F32   0x2F0E             CMP      R7,#+14
   \   00002F34   0xF000 0x84A8      BEQ.W    ??RoadBrd_ParseString_522
   \   00002F38   0xF0C0 0x8454      BCC.W    ??RoadBrd_ParseString_523
   \   00002F3C   0x2F10             CMP      R7,#+16
   \   00002F3E   0xF000 0x8549      BEQ.W    ??RoadBrd_ParseString_524
   \   00002F42   0xF0C0 0x84F3      BCC.W    ??RoadBrd_ParseString_525
   \   00002F46   0x2F12             CMP      R7,#+18
   \   00002F48   0xF000 0x85E8      BEQ.W    ??RoadBrd_ParseString_526
   \   00002F4C   0xF0C0 0x8594      BCC.W    ??RoadBrd_ParseString_527
   \   00002F50   0x2F14             CMP      R7,#+20
   \   00002F52   0xF000 0x8687      BEQ.W    ??RoadBrd_ParseString_528
   \   00002F56   0xF0C0 0x8631      BCC.W    ??RoadBrd_ParseString_529
   \   00002F5A   0x2F15             CMP      R7,#+21
   \   00002F5C   0xF000 0x86D4      BEQ.W    ??RoadBrd_ParseString_530
   \   00002F60   0xF000 0xBF19      B.W      ??RoadBrd_ParseString_531
   3201                                    {
   3202                                      case CAL_SHNT_VLTG: //CAL_SHNT_VLTG Values
   3203                                        // Is this a BLE Operation?
   3204                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_509: (+1)
   \   00002F64   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002F66   0x2D00             CMP      R5,#+0
   \   00002F68   0xD024             BEQ.N    ??RoadBrd_ParseString_532
   3205                                        {
   3206                                          // Yes...Build and Send BLE Response NOW.
   3207                                          sprintf( (char *)tempBffr2, "%s:0002//%1.4f//%2.3f//", 
   3208                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3209                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3210                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00002F6A   0x0038             MOVS     R0,R7
   \   00002F6C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F6E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002F72   0x4683             MOV      R11,R0
   \   00002F74   0x0038             MOVS     R0,R7
   \   00002F76   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F78   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002F7C   0x4681             MOV      R9,R0
   \   00002F7E   0x0038             MOVS     R0,R7
   \   00002F80   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F82   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002F86   0x4682             MOV      R10,R0
   \   00002F88   0x4658             MOV      R0,R11
   \   00002F8A   0x.... 0x....      BL       __aeabi_f2d
   \   00002F8E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002F92   0x4648             MOV      R0,R9
   \   00002F94   0x.... 0x....      BL       __aeabi_f2d
   \   00002F98   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002F9C   0x4652             MOV      R2,R10
   \   00002F9E   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_533
   \   00002FA2   0xA80B             ADD      R0,SP,#+44
   \   00002FA4   0x.... 0x....      BL       sprintf
   3211                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002FA8   0xA80B             ADD      R0,SP,#+44
   \   00002FAA   0x.... 0x....      BL       strlen
   \   00002FAE   0xA90B             ADD      R1,SP,#+44
   \   00002FB0   0x.... 0x....      BL       BGM111_Transmit
   3212                                        }
   3213                                        sprintf( (char *)tempBffr2, "%s	0002		%1.4f		%2.3f\r\n", 
   3214                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3215                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3216                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_532: (+1)
   \   00002FB4   0x0038             MOVS     R0,R7
   \   00002FB6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FB8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002FBC   0x4683             MOV      R11,R0
   \   00002FBE   0x0038             MOVS     R0,R7
   \   00002FC0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FC2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002FC6   0x4681             MOV      R9,R0
   \   00002FC8   0x0038             MOVS     R0,R7
   \   00002FCA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FCC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002FD0   0x4682             MOV      R10,R0
   \   00002FD2   0x4658             MOV      R0,R11
   \   00002FD4   0x.... 0x....      BL       __aeabi_f2d
   \   00002FD8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002FDC   0x4648             MOV      R0,R9
   \   00002FDE   0x.... 0x....      BL       __aeabi_f2d
   \   00002FE2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FE6   0x4652             MOV      R2,R10
   \   00002FE8   0xF8DF 0x1EF4      LDR.W    R1,??RoadBrd_ParseString_534
   \   00002FEC   0xA80B             ADD      R0,SP,#+44
   \   00002FEE   0x.... 0x....      BL       sprintf
   3217                                        break;
   \   00002FF2   0xF000 0xBED0      B.W      ??RoadBrd_ParseString_531
   \   00002FF6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_376:
   \   00002FF8   0x........         DC32     ?_127
   \   00002FFC   0x........         DC32     ?_128
   \   00003000   0x........         DC32     ?_129
   \   00003004   0x........         DC32     ?_130
   \   00003008   0x........         DC32     ?_131
   \   0000300C   0x........         DC32     ?_132
   \   00003010   0x........         DC32     ?_133
   3218                                      case CAL_CURRENT: //CAL_CURRENT Values
   3219                                        // Is this a BLE Operation?
   3220                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_511: (+1)
   \   00003014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003016   0x2D00             CMP      R5,#+0
   \   00003018   0xD024             BEQ.N    ??RoadBrd_ParseString_535
   3221                                        {
   3222                                          // Yes...Build and Send BLE Response NOW.
   3223                                          sprintf( (char *)tempBffr2, "%s:0004//%1.4f//%2.3f//", 
   3224                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3225                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3226                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000301A   0x0038             MOVS     R0,R7
   \   0000301C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000301E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003022   0x4683             MOV      R11,R0
   \   00003024   0x0038             MOVS     R0,R7
   \   00003026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003028   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000302C   0x4681             MOV      R9,R0
   \   0000302E   0x0038             MOVS     R0,R7
   \   00003030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003032   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003036   0x4682             MOV      R10,R0
   \   00003038   0x4658             MOV      R0,R11
   \   0000303A   0x.... 0x....      BL       __aeabi_f2d
   \   0000303E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003042   0x4648             MOV      R0,R9
   \   00003044   0x.... 0x....      BL       __aeabi_f2d
   \   00003048   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000304C   0x4652             MOV      R2,R10
   \   0000304E   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_536
   \   00003052   0xA80B             ADD      R0,SP,#+44
   \   00003054   0x.... 0x....      BL       sprintf
   3227                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003058   0xA80B             ADD      R0,SP,#+44
   \   0000305A   0x.... 0x....      BL       strlen
   \   0000305E   0xA90B             ADD      R1,SP,#+44
   \   00003060   0x.... 0x....      BL       BGM111_Transmit
   3228                                        }
   3229                                        sprintf( (char *)tempBffr2, "%s	        0004		%1.4f		%2.3f\r\n", 
   3230                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3231                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3232                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_535: (+1)
   \   00003064   0x0038             MOVS     R0,R7
   \   00003066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003068   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000306C   0x4683             MOV      R11,R0
   \   0000306E   0x0038             MOVS     R0,R7
   \   00003070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003072   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003076   0x4681             MOV      R9,R0
   \   00003078   0x0038             MOVS     R0,R7
   \   0000307A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000307C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003080   0x4682             MOV      R10,R0
   \   00003082   0x4658             MOV      R0,R11
   \   00003084   0x.... 0x....      BL       __aeabi_f2d
   \   00003088   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000308C   0x4648             MOV      R0,R9
   \   0000308E   0x.... 0x....      BL       __aeabi_f2d
   \   00003092   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003096   0x4652             MOV      R2,R10
   \   00003098   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_537
   \   0000309C   0xA80B             ADD      R0,SP,#+44
   \   0000309E   0x.... 0x....      BL       sprintf
   3233                                        break;
   \   000030A2   0xF000 0xBE78      B.W      ??RoadBrd_ParseString_531
   \   000030A6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_382:
   \   000030A8   0x........         DC32     ?_134
   \   000030AC   0x........         DC32     ?_135
   \   000030B0   0x........         DC32     ?_136
   \   000030B4   0x........         DC32     ?_137
   3234                                      case CAL_POWER: //CAL_POWER Values
   3235                                        // Is this a BLE Operation?
   3236                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_510: (+1)
   \   000030B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000030BA   0x2D00             CMP      R5,#+0
   \   000030BC   0xD024             BEQ.N    ??RoadBrd_ParseString_538
   3237                                        {
   3238                                          // Yes...Build and Send BLE Response NOW.
   3239                                          sprintf( (char *)tempBffr2, "%s:0006//%1.4f//%2.3f//", 
   3240                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3241                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3242                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000030BE   0x0038             MOVS     R0,R7
   \   000030C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030C2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000030C6   0x4683             MOV      R11,R0
   \   000030C8   0x0038             MOVS     R0,R7
   \   000030CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030CC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000030D0   0x4681             MOV      R9,R0
   \   000030D2   0x0038             MOVS     R0,R7
   \   000030D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030D6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000030DA   0x4682             MOV      R10,R0
   \   000030DC   0x4658             MOV      R0,R11
   \   000030DE   0x.... 0x....      BL       __aeabi_f2d
   \   000030E2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000030E6   0x4648             MOV      R0,R9
   \   000030E8   0x.... 0x....      BL       __aeabi_f2d
   \   000030EC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000030F0   0x4652             MOV      R2,R10
   \   000030F2   0xF8DF 0x1EC4      LDR.W    R1,??RoadBrd_ParseString_539
   \   000030F6   0xA80B             ADD      R0,SP,#+44
   \   000030F8   0x.... 0x....      BL       sprintf
   3243                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000030FC   0xA80B             ADD      R0,SP,#+44
   \   000030FE   0x.... 0x....      BL       strlen
   \   00003102   0xA90B             ADD      R1,SP,#+44
   \   00003104   0x.... 0x....      BL       BGM111_Transmit
   3244                                        }
   3245                                        sprintf( (char *)tempBffr2, "%s	0006		%1.4f		%2.3f\r\n", 
   3246                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3247                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3248                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_538: (+1)
   \   00003108   0x0038             MOVS     R0,R7
   \   0000310A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000310C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003110   0x4683             MOV      R11,R0
   \   00003112   0x0038             MOVS     R0,R7
   \   00003114   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003116   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000311A   0x4681             MOV      R9,R0
   \   0000311C   0x0038             MOVS     R0,R7
   \   0000311E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003120   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003124   0x4682             MOV      R10,R0
   \   00003126   0x4658             MOV      R0,R11
   \   00003128   0x.... 0x....      BL       __aeabi_f2d
   \   0000312C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003130   0x4648             MOV      R0,R9
   \   00003132   0x.... 0x....      BL       __aeabi_f2d
   \   00003136   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000313A   0x4652             MOV      R2,R10
   \   0000313C   0xF8DF 0x1ED4      LDR.W    R1,??RoadBrd_ParseString_540
   \   00003140   0xA80B             ADD      R0,SP,#+44
   \   00003142   0x.... 0x....      BL       sprintf
   3249                                        break;
   \   00003146   0xF000 0xBE26      B.W      ??RoadBrd_ParseString_531
   \   0000314A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_392:
   \   0000314C   0x........         DC32     ?_138
   \   00003150   0x........         DC32     ?_139
   \   00003154   0x........         DC32     ?_140
   \   00003158   0x........         DC32     ?_141
   \   0000315C   0x........         DC32     ?_142
   3250                                      case CAL_VOLTAGE: //CAL_VOLTAGE Values
   3251                                        // Is this a BLE Operation?
   3252                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_513: (+1)
   \   00003160   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003162   0x2D00             CMP      R5,#+0
   \   00003164   0xD024             BEQ.N    ??RoadBrd_ParseString_541
   3253                                        {
   3254                                          // Yes...Build and Send BLE Response NOW.
   3255                                          sprintf( (char *)tempBffr2, "%s:0008//%1.4f//%2.3f//", 
   3256                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3257                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3258                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003166   0x0038             MOVS     R0,R7
   \   00003168   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000316A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000316E   0x4683             MOV      R11,R0
   \   00003170   0x0038             MOVS     R0,R7
   \   00003172   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003174   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003178   0x4681             MOV      R9,R0
   \   0000317A   0x0038             MOVS     R0,R7
   \   0000317C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000317E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003182   0x4682             MOV      R10,R0
   \   00003184   0x4658             MOV      R0,R11
   \   00003186   0x.... 0x....      BL       __aeabi_f2d
   \   0000318A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000318E   0x4648             MOV      R0,R9
   \   00003190   0x.... 0x....      BL       __aeabi_f2d
   \   00003194   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003198   0x4652             MOV      R2,R10
   \   0000319A   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_540+0x4
   \   0000319E   0xA80B             ADD      R0,SP,#+44
   \   000031A0   0x.... 0x....      BL       sprintf
   3259                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000031A4   0xA80B             ADD      R0,SP,#+44
   \   000031A6   0x.... 0x....      BL       strlen
   \   000031AA   0xA90B             ADD      R1,SP,#+44
   \   000031AC   0x.... 0x....      BL       BGM111_Transmit
   3260                                        }
   3261                                        sprintf( (char *)tempBffr2, "%s	        0008		%1.4f		%2.3f\r\n", 
   3262                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3263                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3264                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_541: (+1)
   \   000031B0   0x0038             MOVS     R0,R7
   \   000031B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031B4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000031B8   0x4683             MOV      R11,R0
   \   000031BA   0x0038             MOVS     R0,R7
   \   000031BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031BE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000031C2   0x4681             MOV      R9,R0
   \   000031C4   0x0038             MOVS     R0,R7
   \   000031C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031C8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000031CC   0x4682             MOV      R10,R0
   \   000031CE   0x4658             MOV      R0,R11
   \   000031D0   0x.... 0x....      BL       __aeabi_f2d
   \   000031D4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000031D8   0x4648             MOV      R0,R9
   \   000031DA   0x.... 0x....      BL       __aeabi_f2d
   \   000031DE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000031E2   0x4652             MOV      R2,R10
   \   000031E4   0xF8DF 0x1EDC      LDR.W    R1,??RoadBrd_ParseString_542
   \   000031E8   0xA80B             ADD      R0,SP,#+44
   \   000031EA   0x.... 0x....      BL       sprintf
   3265                                        break;
   \   000031EE   0xF000 0xBDD2      B.W      ??RoadBrd_ParseString_531
   \   000031F2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_397:
   \   000031F4   0x........         DC32     ?_143
   \   000031F8   0x........         DC32     ?_144
   \   000031FC   0x........         DC32     ?_145
   \   00003200   0x........         DC32     ?_146
   \   00003204   0x........         DC32     ?_147
   \   00003208   0x........         DC32     ?_148
   3266                                      case CAL_TEMPC: //CAL_TEMPC Values
   3267                                        // Is this a BLE Operation?
   3268                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_512: (+1)
   \   0000320C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000320E   0x2D00             CMP      R5,#+0
   \   00003210   0xD024             BEQ.N    ??RoadBrd_ParseString_543
   3269                                        {
   3270                                          // Yes...Build and Send BLE Response NOW.
   3271                                          sprintf( (char *)tempBffr2, "%s:000A//%1.4f//%2.3f//", 
   3272                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3273                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3274                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003212   0x0038             MOVS     R0,R7
   \   00003214   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003216   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000321A   0x4683             MOV      R11,R0
   \   0000321C   0x0038             MOVS     R0,R7
   \   0000321E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003220   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003224   0x4681             MOV      R9,R0
   \   00003226   0x0038             MOVS     R0,R7
   \   00003228   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000322A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000322E   0x4682             MOV      R10,R0
   \   00003230   0x4658             MOV      R0,R11
   \   00003232   0x.... 0x....      BL       __aeabi_f2d
   \   00003236   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000323A   0x4648             MOV      R0,R9
   \   0000323C   0x.... 0x....      BL       __aeabi_f2d
   \   00003240   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003244   0x4652             MOV      R2,R10
   \   00003246   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_542+0x4
   \   0000324A   0xA80B             ADD      R0,SP,#+44
   \   0000324C   0x.... 0x....      BL       sprintf
   3275                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003250   0xA80B             ADD      R0,SP,#+44
   \   00003252   0x.... 0x....      BL       strlen
   \   00003256   0xA90B             ADD      R1,SP,#+44
   \   00003258   0x.... 0x....      BL       BGM111_Transmit
   3276                                        }
   3277                                        sprintf( (char *)tempBffr2, "%s	000A		%1.4f		%2.3f\r\n", 
   3278                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3279                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3280                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_543: (+1)
   \   0000325C   0x0038             MOVS     R0,R7
   \   0000325E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003260   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003264   0x4683             MOV      R11,R0
   \   00003266   0x0038             MOVS     R0,R7
   \   00003268   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000326A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000326E   0x4681             MOV      R9,R0
   \   00003270   0x0038             MOVS     R0,R7
   \   00003272   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003274   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003278   0x4682             MOV      R10,R0
   \   0000327A   0x4658             MOV      R0,R11
   \   0000327C   0x.... 0x....      BL       __aeabi_f2d
   \   00003280   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003284   0x4648             MOV      R0,R9
   \   00003286   0x.... 0x....      BL       __aeabi_f2d
   \   0000328A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000328E   0x4652             MOV      R2,R10
   \   00003290   0xF8DF 0x1E94      LDR.W    R1,??RoadBrd_ParseString_544
   \   00003294   0xA80B             ADD      R0,SP,#+44
   \   00003296   0x.... 0x....      BL       sprintf
   3281                                        break;
   \   0000329A   0xF000 0xBD7C      B.W      ??RoadBrd_ParseString_531
   \   0000329E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_403:
   \   000032A0   0x........         DC32     ?_149
   \   000032A4   0x........         DC32     ?_150
   \   000032A8   0x........         DC32     ?_151
   \   000032AC   0x........         DC32     ?_152
   \   000032B0   0x........         DC32     ?_153
   3282                                      case CAL_TEMPF: //CAL_TEMPF Values
   3283                                        // Is this a BLE Operation?
   3284                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_515: (+1)
   \   000032B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000032B6   0x2D00             CMP      R5,#+0
   \   000032B8   0xD024             BEQ.N    ??RoadBrd_ParseString_545
   3285                                        {
   3286                                          // Yes...Build and Send BLE Response NOW.
   3287                                          sprintf( (char *)tempBffr2, "%s:000B//%1.4f//%2.3f//", 
   3288                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3289                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3290                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000032BA   0x0038             MOVS     R0,R7
   \   000032BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032BE   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000032C2   0x4683             MOV      R11,R0
   \   000032C4   0x0038             MOVS     R0,R7
   \   000032C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032C8   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000032CC   0x4681             MOV      R9,R0
   \   000032CE   0x0038             MOVS     R0,R7
   \   000032D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032D2   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000032D6   0x4682             MOV      R10,R0
   \   000032D8   0x4658             MOV      R0,R11
   \   000032DA   0x.... 0x....      BL       __aeabi_f2d
   \   000032DE   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000032E2   0x4648             MOV      R0,R9
   \   000032E4   0x.... 0x....      BL       __aeabi_f2d
   \   000032E8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000032EC   0x4652             MOV      R2,R10
   \   000032EE   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_544+0x4
   \   000032F2   0xA80B             ADD      R0,SP,#+44
   \   000032F4   0x.... 0x....      BL       sprintf
   3291                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000032F8   0xA80B             ADD      R0,SP,#+44
   \   000032FA   0x.... 0x....      BL       strlen
   \   000032FE   0xA90B             ADD      R1,SP,#+44
   \   00003300   0x.... 0x....      BL       BGM111_Transmit
   3292                                        }
   3293                                        sprintf( (char *)tempBffr2, "%s	000B		%1.4f		%2.3f\r\n", 
   3294                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3295                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3296                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_545: (+1)
   \   00003304   0x0038             MOVS     R0,R7
   \   00003306   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003308   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000330C   0x4683             MOV      R11,R0
   \   0000330E   0x0038             MOVS     R0,R7
   \   00003310   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003312   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003316   0x4681             MOV      R9,R0
   \   00003318   0x0038             MOVS     R0,R7
   \   0000331A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000331C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003320   0x4682             MOV      R10,R0
   \   00003322   0x4658             MOV      R0,R11
   \   00003324   0x.... 0x....      BL       __aeabi_f2d
   \   00003328   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000332C   0x4648             MOV      R0,R9
   \   0000332E   0x.... 0x....      BL       __aeabi_f2d
   \   00003332   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003336   0x4652             MOV      R2,R10
   \   00003338   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_544+0x8
   \   0000333C   0xA80B             ADD      R0,SP,#+44
   \   0000333E   0x.... 0x....      BL       sprintf
   3297                                        break;
   \   00003342   0xF000 0xBD28      B.W      ??RoadBrd_ParseString_531
   \   00003346   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_409:
   \   00003348   0x........         DC32     ?_154
   \   0000334C   0x........         DC32     ?_155
   \   00003350   0x........         DC32     ?_156
   \   00003354   0x........         DC32     ?_157
   \   00003358   0x........         DC32     ?_158
   3298                                      case CAL_PRESSURE: //CAL_PRESSURE Values
   3299                                        // Is this a BLE Operation?
   3300                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_514: (+1)
   \   0000335C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000335E   0x2D00             CMP      R5,#+0
   \   00003360   0xD024             BEQ.N    ??RoadBrd_ParseString_546
   3301                                        {
   3302                                          // Yes...Build and Send BLE Response NOW.
   3303                                          sprintf( (char *)tempBffr2, "%s:0011//%1.4f//%2.3f//", 
   3304                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3305                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3306                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003362   0x0038             MOVS     R0,R7
   \   00003364   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003366   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000336A   0x4683             MOV      R11,R0
   \   0000336C   0x0038             MOVS     R0,R7
   \   0000336E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003370   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003374   0x4681             MOV      R9,R0
   \   00003376   0x0038             MOVS     R0,R7
   \   00003378   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000337A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000337E   0x4682             MOV      R10,R0
   \   00003380   0x4658             MOV      R0,R11
   \   00003382   0x.... 0x....      BL       __aeabi_f2d
   \   00003386   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000338A   0x4648             MOV      R0,R9
   \   0000338C   0x.... 0x....      BL       __aeabi_f2d
   \   00003390   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003394   0x4652             MOV      R2,R10
   \   00003396   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_547
   \   0000339A   0xA80B             ADD      R0,SP,#+44
   \   0000339C   0x.... 0x....      BL       sprintf
   3307                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000033A0   0xA80B             ADD      R0,SP,#+44
   \   000033A2   0x.... 0x....      BL       strlen
   \   000033A6   0xA90B             ADD      R1,SP,#+44
   \   000033A8   0x.... 0x....      BL       BGM111_Transmit
   3308                                        }
   3309                                        sprintf( (char *)tempBffr2, "%s	0011		%1.4f		%2.3f\r\n", 
   3310                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3311                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3312                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_546: (+1)
   \   000033AC   0x0038             MOVS     R0,R7
   \   000033AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033B0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000033B4   0x4683             MOV      R11,R0
   \   000033B6   0x0038             MOVS     R0,R7
   \   000033B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033BA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000033BE   0x4681             MOV      R9,R0
   \   000033C0   0x0038             MOVS     R0,R7
   \   000033C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033C4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000033C8   0x4682             MOV      R10,R0
   \   000033CA   0x4658             MOV      R0,R11
   \   000033CC   0x.... 0x....      BL       __aeabi_f2d
   \   000033D0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000033D4   0x4648             MOV      R0,R9
   \   000033D6   0x.... 0x....      BL       __aeabi_f2d
   \   000033DA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000033DE   0x4652             MOV      R2,R10
   \   000033E0   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_547+0x4
   \   000033E4   0xA80B             ADD      R0,SP,#+44
   \   000033E6   0x.... 0x....      BL       sprintf
   3313                                        break;
   \   000033EA   0xF000 0xBCD4      B.W      ??RoadBrd_ParseString_531
   \   000033EE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_414:
   \   000033F0   0x........         DC32     ?_159
   \   000033F4   0x........         DC32     ?_160
   \   000033F8   0x........         DC32     ?_161
   \   000033FC   0x........         DC32     ?_162
   \   00003400   0x........         DC32     ?_163
   3314                                      case CAL_HUMIDITY: //CAL_HUMIDITY Values
   3315                                        // Is this a BLE Operation?
   3316                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_517: (+1)
   \   00003404   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003406   0x2D00             CMP      R5,#+0
   \   00003408   0xD024             BEQ.N    ??RoadBrd_ParseString_548
   3317                                        {
   3318                                          // Yes...Build and Send BLE Response NOW.
   3319                                          sprintf( (char *)tempBffr2, "%s:0030//%1.4f//%2.3f//", 
   3320                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3321                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3322                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000340A   0x0038             MOVS     R0,R7
   \   0000340C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000340E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003412   0x4683             MOV      R11,R0
   \   00003414   0x0038             MOVS     R0,R7
   \   00003416   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003418   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000341C   0x4681             MOV      R9,R0
   \   0000341E   0x0038             MOVS     R0,R7
   \   00003420   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003422   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003426   0x4682             MOV      R10,R0
   \   00003428   0x4658             MOV      R0,R11
   \   0000342A   0x.... 0x....      BL       __aeabi_f2d
   \   0000342E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003432   0x4648             MOV      R0,R9
   \   00003434   0x.... 0x....      BL       __aeabi_f2d
   \   00003438   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000343C   0x4652             MOV      R2,R10
   \   0000343E   0xF8DF 0x1E5C      LDR.W    R1,??RoadBrd_ParseString_549
   \   00003442   0xA80B             ADD      R0,SP,#+44
   \   00003444   0x.... 0x....      BL       sprintf
   3323                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003448   0xA80B             ADD      R0,SP,#+44
   \   0000344A   0x.... 0x....      BL       strlen
   \   0000344E   0xA90B             ADD      R1,SP,#+44
   \   00003450   0x.... 0x....      BL       BGM111_Transmit
   3324                                        }
   3325                                        sprintf( (char *)tempBffr2, "%s	0030		%1.4f		%2.3f\r\n", 
   3326                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3327                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3328                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_548: (+1)
   \   00003454   0x0038             MOVS     R0,R7
   \   00003456   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003458   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000345C   0x4683             MOV      R11,R0
   \   0000345E   0x0038             MOVS     R0,R7
   \   00003460   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003462   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003466   0x4681             MOV      R9,R0
   \   00003468   0x0038             MOVS     R0,R7
   \   0000346A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000346C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003470   0x4682             MOV      R10,R0
   \   00003472   0x4658             MOV      R0,R11
   \   00003474   0x.... 0x....      BL       __aeabi_f2d
   \   00003478   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000347C   0x4648             MOV      R0,R9
   \   0000347E   0x.... 0x....      BL       __aeabi_f2d
   \   00003482   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003486   0x4652             MOV      R2,R10
   \   00003488   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_550
   \   0000348C   0xA80B             ADD      R0,SP,#+44
   \   0000348E   0x.... 0x....      BL       sprintf
   3329                                        break;
   \   00003492   0xF000 0xBC80      B.W      ??RoadBrd_ParseString_531
   \   00003496   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_422:
   \   00003498   0x........         DC32     ?_164
   \   0000349C   0x........         DC32     ?_165
   \   000034A0   0x........         DC32     ?_166
   \   000034A4   0x........         DC32     ?_167
   \   000034A8   0x........         DC32     ?_168
   3330                                      case CAL_HUM_TEMPC: //CAL_HUM_TEMPC Values
   3331                                        // Is this a BLE Operation?
   3332                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_516: (+1)
   \   000034AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000034AE   0x2D00             CMP      R5,#+0
   \   000034B0   0xD024             BEQ.N    ??RoadBrd_ParseString_551
   3333                                        {
   3334                                          // Yes...Build and Send BLE Response NOW.
   3335                                          sprintf( (char *)tempBffr2, "%s:0032//%1.4f//%2.3f//", 
   3336                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3337                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3338                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000034B2   0x0038             MOVS     R0,R7
   \   000034B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034B6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000034BA   0x4683             MOV      R11,R0
   \   000034BC   0x0038             MOVS     R0,R7
   \   000034BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034C0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000034C4   0x4681             MOV      R9,R0
   \   000034C6   0x0038             MOVS     R0,R7
   \   000034C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034CA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000034CE   0x4682             MOV      R10,R0
   \   000034D0   0x4658             MOV      R0,R11
   \   000034D2   0x.... 0x....      BL       __aeabi_f2d
   \   000034D6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000034DA   0x4648             MOV      R0,R9
   \   000034DC   0x.... 0x....      BL       __aeabi_f2d
   \   000034E0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000034E4   0x4652             MOV      R2,R10
   \   000034E6   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_552
   \   000034EA   0xA80B             ADD      R0,SP,#+44
   \   000034EC   0x.... 0x....      BL       sprintf
   3339                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000034F0   0xA80B             ADD      R0,SP,#+44
   \   000034F2   0x.... 0x....      BL       strlen
   \   000034F6   0xA90B             ADD      R1,SP,#+44
   \   000034F8   0x.... 0x....      BL       BGM111_Transmit
   3340                                        }
   3341                                        sprintf( (char *)tempBffr2, "%s	0032		%1.4f		%2.3f\r\n", 
   3342                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3343                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3344                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_551: (+1)
   \   000034FC   0x0038             MOVS     R0,R7
   \   000034FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003500   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003504   0x4683             MOV      R11,R0
   \   00003506   0x0038             MOVS     R0,R7
   \   00003508   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000350A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000350E   0x4681             MOV      R9,R0
   \   00003510   0x0038             MOVS     R0,R7
   \   00003512   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003514   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003518   0x4682             MOV      R10,R0
   \   0000351A   0x4658             MOV      R0,R11
   \   0000351C   0x.... 0x....      BL       __aeabi_f2d
   \   00003520   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003524   0x4648             MOV      R0,R9
   \   00003526   0x.... 0x....      BL       __aeabi_f2d
   \   0000352A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000352E   0x4652             MOV      R2,R10
   \   00003530   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_552+0x4
   \   00003534   0xA80B             ADD      R0,SP,#+44
   \   00003536   0x.... 0x....      BL       sprintf
   3345                                        break;
   \   0000353A   0xF000 0xBC2C      B.W      ??RoadBrd_ParseString_531
   \   0000353E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_427:
   \   00003540   0x........         DC32     ?_169
   \   00003544   0x........         DC32     ?_170
   \   00003548   0x........         DC32     ?_171
   \   0000354C   0x........         DC32     ?_172
   \   00003550   0x........         DC32     ?_173
   3346                                      case CAL_HUM_TEMPF: //CAL_HUM_TEMPF Values
   3347                                        // Is this a BLE Operation?
   3348                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_519: (+1)
   \   00003554   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003556   0x2D00             CMP      R5,#+0
   \   00003558   0xD024             BEQ.N    ??RoadBrd_ParseString_553
   3349                                        {
   3350                                          // Yes...Build and Send BLE Response NOW.
   3351                                          sprintf( (char *)tempBffr2, "%s:0033//%1.4f//%2.3f//", 
   3352                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3353                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3354                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000355A   0x0038             MOVS     R0,R7
   \   0000355C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000355E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003562   0x4683             MOV      R11,R0
   \   00003564   0x0038             MOVS     R0,R7
   \   00003566   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003568   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000356C   0x4681             MOV      R9,R0
   \   0000356E   0x0038             MOVS     R0,R7
   \   00003570   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003572   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003576   0x4682             MOV      R10,R0
   \   00003578   0x4658             MOV      R0,R11
   \   0000357A   0x.... 0x....      BL       __aeabi_f2d
   \   0000357E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003582   0x4648             MOV      R0,R9
   \   00003584   0x.... 0x....      BL       __aeabi_f2d
   \   00003588   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000358C   0x4652             MOV      R2,R10
   \   0000358E   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_554
   \   00003592   0xA80B             ADD      R0,SP,#+44
   \   00003594   0x.... 0x....      BL       sprintf
   3355                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003598   0xA80B             ADD      R0,SP,#+44
   \   0000359A   0x.... 0x....      BL       strlen
   \   0000359E   0xA90B             ADD      R1,SP,#+44
   \   000035A0   0x.... 0x....      BL       BGM111_Transmit
   3356                                        }
   3357                                        sprintf( (char *)tempBffr2, "%s	0033		%1.4f		%2.3f\r\n", 
   3358                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3359                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3360                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_553: (+1)
   \   000035A4   0x0038             MOVS     R0,R7
   \   000035A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035A8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000035AC   0x4683             MOV      R11,R0
   \   000035AE   0x0038             MOVS     R0,R7
   \   000035B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035B2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000035B6   0x4681             MOV      R9,R0
   \   000035B8   0x0038             MOVS     R0,R7
   \   000035BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035BC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000035C0   0x4682             MOV      R10,R0
   \   000035C2   0x4658             MOV      R0,R11
   \   000035C4   0x.... 0x....      BL       __aeabi_f2d
   \   000035C8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000035CC   0x4648             MOV      R0,R9
   \   000035CE   0x.... 0x....      BL       __aeabi_f2d
   \   000035D2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000035D6   0x4652             MOV      R2,R10
   \   000035D8   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_555
   \   000035DC   0xA80B             ADD      R0,SP,#+44
   \   000035DE   0x.... 0x....      BL       sprintf
   3361                                        break;
   \   000035E2   0xE3D8             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_433:
   \   000035E4   0x........         DC32     ?_174
   \   000035E8   0x........         DC32     ?_175
   \   000035EC   0x........         DC32     ?_176
   \   000035F0   0x........         DC32     ?_177
   \   000035F4   0x........         DC32     ?_178
   3362                                      case CAL_RGB_RED: //CAL_RGB_RED Values
   3363                                        // Is this a BLE Operation?
   3364                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_518: (+1)
   \   000035F8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000035FA   0x2D00             CMP      R5,#+0
   \   000035FC   0xD024             BEQ.N    ??RoadBrd_ParseString_556
   3365                                        {
   3366                                          // Yes...Build and Send BLE Response NOW.
   3367                                          sprintf( (char *)tempBffr2, "%s:000D//%1.4f//%2.3f//", 
   3368                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3369                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3370                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000035FE   0x0038             MOVS     R0,R7
   \   00003600   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003602   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003606   0x4683             MOV      R11,R0
   \   00003608   0x0038             MOVS     R0,R7
   \   0000360A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000360C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003610   0x4681             MOV      R9,R0
   \   00003612   0x0038             MOVS     R0,R7
   \   00003614   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003616   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000361A   0x4682             MOV      R10,R0
   \   0000361C   0x4658             MOV      R0,R11
   \   0000361E   0x.... 0x....      BL       __aeabi_f2d
   \   00003622   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003626   0x4648             MOV      R0,R9
   \   00003628   0x.... 0x....      BL       __aeabi_f2d
   \   0000362C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003630   0x4652             MOV      R2,R10
   \   00003632   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_555+0x4
   \   00003636   0xA80B             ADD      R0,SP,#+44
   \   00003638   0x.... 0x....      BL       sprintf
   3371                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000363C   0xA80B             ADD      R0,SP,#+44
   \   0000363E   0x.... 0x....      BL       strlen
   \   00003642   0xA90B             ADD      R1,SP,#+44
   \   00003644   0x.... 0x....      BL       BGM111_Transmit
   3372                                        }
   3373                                        sprintf( (char *)tempBffr2, "%s	        000D		%1.4f		%2.3f\r\n", 
   3374                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3375                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3376                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_556: (+1)
   \   00003648   0x0038             MOVS     R0,R7
   \   0000364A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000364C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003650   0x4683             MOV      R11,R0
   \   00003652   0x0038             MOVS     R0,R7
   \   00003654   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003656   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000365A   0x4681             MOV      R9,R0
   \   0000365C   0x0038             MOVS     R0,R7
   \   0000365E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003660   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003664   0x4682             MOV      R10,R0
   \   00003666   0x4658             MOV      R0,R11
   \   00003668   0x.... 0x....      BL       __aeabi_f2d
   \   0000366C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003670   0x4648             MOV      R0,R9
   \   00003672   0x.... 0x....      BL       __aeabi_f2d
   \   00003676   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000367A   0x4652             MOV      R2,R10
   \   0000367C   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_557
   \   00003680   0xA80B             ADD      R0,SP,#+44
   \   00003682   0x.... 0x....      BL       sprintf
   3377                                        break;
   \   00003686   0xE386             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_438:
   \   00003688   0x........         DC32     ?_179
   \   0000368C   0x........         DC32     ?_180
   \   00003690   0x........         DC32     ?_181
   \   00003694   0x........         DC32     ?_182
   \   00003698   0x........         DC32     ?_183
   3378                                      case CAL_RGB_GREEN: //CAL_RGB_GREEN Values
   3379                                        // Is this a BLE Operation?
   3380                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_521: (+1)
   \   0000369C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000369E   0x2D00             CMP      R5,#+0
   \   000036A0   0xD024             BEQ.N    ??RoadBrd_ParseString_558
   3381                                        {
   3382                                          // Yes...Build and Send BLE Response NOW.
   3383                                          sprintf( (char *)tempBffr2, "%s:000E//%1.4f//%2.3f//", 
   3384                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3385                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3386                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000036A2   0x0038             MOVS     R0,R7
   \   000036A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036A6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036AA   0x4683             MOV      R11,R0
   \   000036AC   0x0038             MOVS     R0,R7
   \   000036AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036B0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000036B4   0x4681             MOV      R9,R0
   \   000036B6   0x0038             MOVS     R0,R7
   \   000036B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036BA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000036BE   0x4682             MOV      R10,R0
   \   000036C0   0x4658             MOV      R0,R11
   \   000036C2   0x.... 0x....      BL       __aeabi_f2d
   \   000036C6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000036CA   0x4648             MOV      R0,R9
   \   000036CC   0x.... 0x....      BL       __aeabi_f2d
   \   000036D0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000036D4   0x4652             MOV      R2,R10
   \   000036D6   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_559
   \   000036DA   0xA80B             ADD      R0,SP,#+44
   \   000036DC   0x.... 0x....      BL       sprintf
   3387                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000036E0   0xA80B             ADD      R0,SP,#+44
   \   000036E2   0x.... 0x....      BL       strlen
   \   000036E6   0xA90B             ADD      R1,SP,#+44
   \   000036E8   0x.... 0x....      BL       BGM111_Transmit
   3388                                        }
   3389                                        sprintf( (char *)tempBffr2, "%s	000E		%1.4f		%2.3f\r\n", 
   3390                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3391                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3392                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_558: (+1)
   \   000036EC   0x0038             MOVS     R0,R7
   \   000036EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036F0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036F4   0x4683             MOV      R11,R0
   \   000036F6   0x0038             MOVS     R0,R7
   \   000036F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036FA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000036FE   0x4681             MOV      R9,R0
   \   00003700   0x0038             MOVS     R0,R7
   \   00003702   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003704   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003708   0x4682             MOV      R10,R0
   \   0000370A   0x4658             MOV      R0,R11
   \   0000370C   0x.... 0x....      BL       __aeabi_f2d
   \   00003710   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003714   0x4648             MOV      R0,R9
   \   00003716   0x.... 0x....      BL       __aeabi_f2d
   \   0000371A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000371E   0x4652             MOV      R2,R10
   \   00003720   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_560
   \   00003724   0xA80B             ADD      R0,SP,#+44
   \   00003726   0x.... 0x....      BL       sprintf
   3393                                        break;
   \   0000372A   0xE334             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_446:
   \   0000372C   0x........         DC32     ?_184
   \   00003730   0x........         DC32     ?_185
   \   00003734   0x........         DC32     ?_186
   \   00003738   0x........         DC32     ?_187
   \   0000373C   0x........         DC32     ?_188
   3394                                      case CAL_RGB_BLUE: //CAL_RGB_BLUE Values
   3395                                        // Is this a BLE Operation?
   3396                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_520: (+1)
   \   00003740   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003742   0x2D00             CMP      R5,#+0
   \   00003744   0xD024             BEQ.N    ??RoadBrd_ParseString_561
   3397                                        {
   3398                                          // Yes...Build and Send BLE Response NOW.
   3399                                          sprintf( (char *)tempBffr2, "%s:000F//%1.4f//%2.3f//", 
   3400                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3401                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3402                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003746   0x0038             MOVS     R0,R7
   \   00003748   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000374A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000374E   0x4683             MOV      R11,R0
   \   00003750   0x0038             MOVS     R0,R7
   \   00003752   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003754   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003758   0x4681             MOV      R9,R0
   \   0000375A   0x0038             MOVS     R0,R7
   \   0000375C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000375E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003762   0x4682             MOV      R10,R0
   \   00003764   0x4658             MOV      R0,R11
   \   00003766   0x.... 0x....      BL       __aeabi_f2d
   \   0000376A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000376E   0x4648             MOV      R0,R9
   \   00003770   0x.... 0x....      BL       __aeabi_f2d
   \   00003774   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003778   0x4652             MOV      R2,R10
   \   0000377A   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_562
   \   0000377E   0xA80B             ADD      R0,SP,#+44
   \   00003780   0x.... 0x....      BL       sprintf
   3403                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003784   0xA80B             ADD      R0,SP,#+44
   \   00003786   0x.... 0x....      BL       strlen
   \   0000378A   0xA90B             ADD      R1,SP,#+44
   \   0000378C   0x.... 0x....      BL       BGM111_Transmit
   3404                                        }
   3405                                        sprintf( (char *)tempBffr2, "%s	000F		%1.4f		%2.3f\r\n", 
   3406                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3407                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3408                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_561: (+1)
   \   00003790   0x0038             MOVS     R0,R7
   \   00003792   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003794   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003798   0x4683             MOV      R11,R0
   \   0000379A   0x0038             MOVS     R0,R7
   \   0000379C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000379E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000037A2   0x4681             MOV      R9,R0
   \   000037A4   0x0038             MOVS     R0,R7
   \   000037A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037A8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000037AC   0x4682             MOV      R10,R0
   \   000037AE   0x4658             MOV      R0,R11
   \   000037B0   0x.... 0x....      BL       __aeabi_f2d
   \   000037B4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000037B8   0x4648             MOV      R0,R9
   \   000037BA   0x.... 0x....      BL       __aeabi_f2d
   \   000037BE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000037C2   0x4652             MOV      R2,R10
   \   000037C4   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_563
   \   000037C8   0xA80B             ADD      R0,SP,#+44
   \   000037CA   0x.... 0x....      BL       sprintf
   3409                                        break;
   \   000037CE   0xE2E2             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_451:
   \   000037D0   0x........         DC32     ?_189
   \   000037D4   0x........         DC32     ?_190
   \   000037D8   0x........         DC32     ?_191
   \   000037DC   0x........         DC32     ?_192
   \   000037E0   0x........         DC32     ?_193
   3410                                      case CAL_THERM_C: //CAL_THERM_C Values
   3411                                        // Is this a BLE Operation?
   3412                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_523: (+1)
   \   000037E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000037E6   0x2D00             CMP      R5,#+0
   \   000037E8   0xD024             BEQ.N    ??RoadBrd_ParseString_564
   3413                                        {
   3414                                          // Yes...Build and Send BLE Response NOW.
   3415                                          sprintf( (char *)tempBffr2, "%s:0017//%1.4f//%2.3f//", 
   3416                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3417                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3418                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000037EA   0x0038             MOVS     R0,R7
   \   000037EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037EE   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000037F2   0x4683             MOV      R11,R0
   \   000037F4   0x0038             MOVS     R0,R7
   \   000037F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037F8   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000037FC   0x4681             MOV      R9,R0
   \   000037FE   0x0038             MOVS     R0,R7
   \   00003800   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003802   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003806   0x4682             MOV      R10,R0
   \   00003808   0x4658             MOV      R0,R11
   \   0000380A   0x.... 0x....      BL       __aeabi_f2d
   \   0000380E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003812   0x4648             MOV      R0,R9
   \   00003814   0x.... 0x....      BL       __aeabi_f2d
   \   00003818   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000381C   0x4652             MOV      R2,R10
   \   0000381E   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_565
   \   00003822   0xA80B             ADD      R0,SP,#+44
   \   00003824   0x.... 0x....      BL       sprintf
   3419                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003828   0xA80B             ADD      R0,SP,#+44
   \   0000382A   0x.... 0x....      BL       strlen
   \   0000382E   0xA90B             ADD      R1,SP,#+44
   \   00003830   0x.... 0x....      BL       BGM111_Transmit
   3420                                        }
   3421                                        sprintf( (char *)tempBffr2, "%s	        0017		%1.4f		%2.3f\r\n", 
   3422                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3423                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3424                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_564: (+1)
   \   00003834   0x0038             MOVS     R0,R7
   \   00003836   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003838   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000383C   0x4683             MOV      R11,R0
   \   0000383E   0x0038             MOVS     R0,R7
   \   00003840   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003842   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003846   0x4681             MOV      R9,R0
   \   00003848   0x0038             MOVS     R0,R7
   \   0000384A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000384C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003850   0x4682             MOV      R10,R0
   \   00003852   0x4658             MOV      R0,R11
   \   00003854   0x.... 0x....      BL       __aeabi_f2d
   \   00003858   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000385C   0x4648             MOV      R0,R9
   \   0000385E   0x.... 0x....      BL       __aeabi_f2d
   \   00003862   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003866   0x4652             MOV      R2,R10
   \   00003868   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_566
   \   0000386C   0xA80B             ADD      R0,SP,#+44
   \   0000386E   0x.... 0x....      BL       sprintf
   3425                                        break;
   \   00003872   0xE290             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_457:
   \   00003874   0x........         DC32     ?_194
   \   00003878   0x........         DC32     ?_195
   \   0000387C   0x........         DC32     ?_196
   \   00003880   0x........         DC32     ?_197
   \   00003884   0x........         DC32     ?_198
   3426                                      case CAL_ROADT_1C: //CAL_ROADT_1C Values
   3427                                        // Is this a BLE Operation?
   3428                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_522: (+1)
   \   00003888   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000388A   0x2D00             CMP      R5,#+0
   \   0000388C   0xD024             BEQ.N    ??RoadBrd_ParseString_567
   3429                                        {
   3430                                          // Yes...Build and Send BLE Response NOW.
   3431                                          sprintf( (char *)tempBffr2, "%s:0019//%1.4f//%2.3f//", 
   3432                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3433                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3434                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000388E   0x0038             MOVS     R0,R7
   \   00003890   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003892   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003896   0x4683             MOV      R11,R0
   \   00003898   0x0038             MOVS     R0,R7
   \   0000389A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000389C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038A0   0x4681             MOV      R9,R0
   \   000038A2   0x0038             MOVS     R0,R7
   \   000038A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038A6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038AA   0x4682             MOV      R10,R0
   \   000038AC   0x4658             MOV      R0,R11
   \   000038AE   0x.... 0x....      BL       __aeabi_f2d
   \   000038B2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000038B6   0x4648             MOV      R0,R9
   \   000038B8   0x.... 0x....      BL       __aeabi_f2d
   \   000038BC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000038C0   0x4652             MOV      R2,R10
   \   000038C2   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_568
   \   000038C6   0xA80B             ADD      R0,SP,#+44
   \   000038C8   0x.... 0x....      BL       sprintf
   3435                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000038CC   0xA80B             ADD      R0,SP,#+44
   \   000038CE   0x.... 0x....      BL       strlen
   \   000038D2   0xA90B             ADD      R1,SP,#+44
   \   000038D4   0x.... 0x....      BL       BGM111_Transmit
   3436                                        }
   3437                                        sprintf( (char *)tempBffr2, "%s	0019		%1.4f		%2.3f\r\n", 
   3438                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3439                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3440                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_567: (+1)
   \   000038D8   0x0038             MOVS     R0,R7
   \   000038DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038DC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000038E0   0x4683             MOV      R11,R0
   \   000038E2   0x0038             MOVS     R0,R7
   \   000038E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038E6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038EA   0x4681             MOV      R9,R0
   \   000038EC   0x0038             MOVS     R0,R7
   \   000038EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038F0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038F4   0x4682             MOV      R10,R0
   \   000038F6   0x4658             MOV      R0,R11
   \   000038F8   0x.... 0x....      BL       __aeabi_f2d
   \   000038FC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003900   0x4648             MOV      R0,R9
   \   00003902   0x.... 0x....      BL       __aeabi_f2d
   \   00003906   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000390A   0x4652             MOV      R2,R10
   \   0000390C   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_569
   \   00003910   0xA80B             ADD      R0,SP,#+44
   \   00003912   0x.... 0x....      BL       sprintf
   3441                                        break;
   \   00003916   0xE23E             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_462:
   \   00003918   0x........         DC32     ?_199
   \   0000391C   0x........         DC32     ?_200
   \   00003920   0x........         DC32     ?_201
   \   00003924   0x........         DC32     ?_202
   \   00003928   0x........         DC32     ?_203
   3442                                      case CAL_ROADT_2C: //CAL_ROADT_2C Values
   3443                                        // Is this a BLE Operation?
   3444                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_525: (+1)
   \   0000392C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000392E   0x2D00             CMP      R5,#+0
   \   00003930   0xD024             BEQ.N    ??RoadBrd_ParseString_570
   3445                                        {
   3446                                          // Yes...Build and Send BLE Response NOW.
   3447                                          sprintf( (char *)tempBffr2, "%s:001B//%1.4f//%2.3f//", 
   3448                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3449                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3450                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003932   0x0038             MOVS     R0,R7
   \   00003934   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003936   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000393A   0x4683             MOV      R11,R0
   \   0000393C   0x0038             MOVS     R0,R7
   \   0000393E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003940   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003944   0x4681             MOV      R9,R0
   \   00003946   0x0038             MOVS     R0,R7
   \   00003948   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000394A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000394E   0x4682             MOV      R10,R0
   \   00003950   0x4658             MOV      R0,R11
   \   00003952   0x.... 0x....      BL       __aeabi_f2d
   \   00003956   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000395A   0x4648             MOV      R0,R9
   \   0000395C   0x.... 0x....      BL       __aeabi_f2d
   \   00003960   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003964   0x4652             MOV      R2,R10
   \   00003966   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_571
   \   0000396A   0xA80B             ADD      R0,SP,#+44
   \   0000396C   0x.... 0x....      BL       sprintf
   3451                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003970   0xA80B             ADD      R0,SP,#+44
   \   00003972   0x.... 0x....      BL       strlen
   \   00003976   0xA90B             ADD      R1,SP,#+44
   \   00003978   0x.... 0x....      BL       BGM111_Transmit
   3452                                        }
   3453                                        sprintf( (char *)tempBffr2, "%s	001B		%1.4f		%2.3f\r\n", 
   3454                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3455                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3456                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_570: (+1)
   \   0000397C   0x0038             MOVS     R0,R7
   \   0000397E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003980   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003984   0x4683             MOV      R11,R0
   \   00003986   0x0038             MOVS     R0,R7
   \   00003988   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000398A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000398E   0x4681             MOV      R9,R0
   \   00003990   0x0038             MOVS     R0,R7
   \   00003992   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003994   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003998   0x4682             MOV      R10,R0
   \   0000399A   0x4658             MOV      R0,R11
   \   0000399C   0x.... 0x....      BL       __aeabi_f2d
   \   000039A0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000039A4   0x4648             MOV      R0,R9
   \   000039A6   0x.... 0x....      BL       __aeabi_f2d
   \   000039AA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000039AE   0x4652             MOV      R2,R10
   \   000039B0   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_571+0x4
   \   000039B4   0xA80B             ADD      R0,SP,#+44
   \   000039B6   0x.... 0x....      BL       sprintf
   3457                                        break;
   \   000039BA   0xE1EC             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_470:
   \   000039BC   0x........         DC32     ?_204
   \   000039C0   0x........         DC32     ?_205
   \   000039C4   0x........         DC32     ?_206
   \   000039C8   0x........         DC32     ?_207
   \   000039CC   0x........         DC32     ?_208
   \   000039D0   0x........         DC32     ?_209
   3458                                      case CAL_ROADT_3C: //CAL_ROADT_3C Values
   3459                                        // Is this a BLE Operation?
   3460                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_524: (+1)
   \   000039D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000039D6   0x2D00             CMP      R5,#+0
   \   000039D8   0xD024             BEQ.N    ??RoadBrd_ParseString_572
   3461                                        {
   3462                                          // Yes...Build and Send BLE Response NOW.
   3463                                          sprintf( (char *)tempBffr2, "%s:001D//%1.4f//%2.3f//", 
   3464                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3465                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3466                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000039DA   0x0038             MOVS     R0,R7
   \   000039DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039DE   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000039E2   0x4683             MOV      R11,R0
   \   000039E4   0x0038             MOVS     R0,R7
   \   000039E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039E8   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000039EC   0x4681             MOV      R9,R0
   \   000039EE   0x0038             MOVS     R0,R7
   \   000039F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039F2   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000039F6   0x4682             MOV      R10,R0
   \   000039F8   0x4658             MOV      R0,R11
   \   000039FA   0x.... 0x....      BL       __aeabi_f2d
   \   000039FE   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A02   0x4648             MOV      R0,R9
   \   00003A04   0x.... 0x....      BL       __aeabi_f2d
   \   00003A08   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A0C   0x4652             MOV      R2,R10
   \   00003A0E   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_573
   \   00003A12   0xA80B             ADD      R0,SP,#+44
   \   00003A14   0x.... 0x....      BL       sprintf
   3467                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003A18   0xA80B             ADD      R0,SP,#+44
   \   00003A1A   0x.... 0x....      BL       strlen
   \   00003A1E   0xA90B             ADD      R1,SP,#+44
   \   00003A20   0x.... 0x....      BL       BGM111_Transmit
   3468                                        }
   3469                                        sprintf( (char *)tempBffr2, "%s	001D		%1.4f		%2.3f\r\n", 
   3470                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3471                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3472                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_572: (+1)
   \   00003A24   0x0038             MOVS     R0,R7
   \   00003A26   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A28   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A2C   0x4683             MOV      R11,R0
   \   00003A2E   0x0038             MOVS     R0,R7
   \   00003A30   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A32   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A36   0x4681             MOV      R9,R0
   \   00003A38   0x0038             MOVS     R0,R7
   \   00003A3A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A3C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A40   0x4682             MOV      R10,R0
   \   00003A42   0x4658             MOV      R0,R11
   \   00003A44   0x.... 0x....      BL       __aeabi_f2d
   \   00003A48   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A4C   0x4648             MOV      R0,R9
   \   00003A4E   0x.... 0x....      BL       __aeabi_f2d
   \   00003A52   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A56   0x4652             MOV      R2,R10
   \   00003A58   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_574
   \   00003A5C   0xA80B             ADD      R0,SP,#+44
   \   00003A5E   0x.... 0x....      BL       sprintf
   3473                                        break;
   \   00003A62   0xE198             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_476:
   \   00003A64   0x........         DC32     ?_210
   \   00003A68   0x........         DC32     ?_211
   \   00003A6C   0x........         DC32     ?_212
   \   00003A70   0x........         DC32     ?_213
   \   00003A74   0x........         DC32     ?_214
   3474                                      case CAL_ROADT_4C: //CAL_ROADT_4C Values
   3475                                        // Is this a BLE Operation?
   3476                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_527: (+1)
   \   00003A78   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003A7A   0x2D00             CMP      R5,#+0
   \   00003A7C   0xD024             BEQ.N    ??RoadBrd_ParseString_575
   3477                                        {
   3478                                          // Yes...Build and Send BLE Response NOW.
   3479                                          sprintf( (char *)tempBffr2, "%s:001F//%1.4f//%2.3f//", 
   3480                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3481                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3482                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003A7E   0x0038             MOVS     R0,R7
   \   00003A80   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A82   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A86   0x4683             MOV      R11,R0
   \   00003A88   0x0038             MOVS     R0,R7
   \   00003A8A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A8C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A90   0x4681             MOV      R9,R0
   \   00003A92   0x0038             MOVS     R0,R7
   \   00003A94   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A96   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A9A   0x4682             MOV      R10,R0
   \   00003A9C   0x4658             MOV      R0,R11
   \   00003A9E   0x.... 0x....      BL       __aeabi_f2d
   \   00003AA2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AA6   0x4648             MOV      R0,R9
   \   00003AA8   0x.... 0x....      BL       __aeabi_f2d
   \   00003AAC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003AB0   0x4652             MOV      R2,R10
   \   00003AB2   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_576
   \   00003AB6   0xA80B             ADD      R0,SP,#+44
   \   00003AB8   0x.... 0x....      BL       sprintf
   3483                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003ABC   0xA80B             ADD      R0,SP,#+44
   \   00003ABE   0x.... 0x....      BL       strlen
   \   00003AC2   0xA90B             ADD      R1,SP,#+44
   \   00003AC4   0x.... 0x....      BL       BGM111_Transmit
   3484                                        }
   3485                                        sprintf( (char *)tempBffr2, "%s	001F		%1.4f		%2.3f\r\n", 
   3486                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3487                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3488                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_575: (+1)
   \   00003AC8   0x0038             MOVS     R0,R7
   \   00003ACA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003ACC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003AD0   0x4683             MOV      R11,R0
   \   00003AD2   0x0038             MOVS     R0,R7
   \   00003AD4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AD6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003ADA   0x4681             MOV      R9,R0
   \   00003ADC   0x0038             MOVS     R0,R7
   \   00003ADE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AE0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003AE4   0x4682             MOV      R10,R0
   \   00003AE6   0x4658             MOV      R0,R11
   \   00003AE8   0x.... 0x....      BL       __aeabi_f2d
   \   00003AEC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AF0   0x4648             MOV      R0,R9
   \   00003AF2   0x.... 0x....      BL       __aeabi_f2d
   \   00003AF6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003AFA   0x4652             MOV      R2,R10
   \   00003AFC   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_577
   \   00003B00   0xA80B             ADD      R0,SP,#+44
   \   00003B02   0x.... 0x....      BL       sprintf
   3489                                        break;
   \   00003B06   0xE146             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_481:
   \   00003B08   0x........         DC32     ?_215
   \   00003B0C   0x........         DC32     ?_216
   \   00003B10   0x........         DC32     ?_217
   \   00003B14   0x........         DC32     ?_218
   \   00003B18   0x........         DC32     ?_219
   3490                                      case CAL_ROADT_5C: //CAL_ROADT_5C Values
   3491                                        // Is this a BLE Operation?
   3492                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_526: (+1)
   \   00003B1C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003B1E   0x2D00             CMP      R5,#+0
   \   00003B20   0xD024             BEQ.N    ??RoadBrd_ParseString_578
   3493                                        {
   3494                                          // Yes...Build and Send BLE Response NOW.
   3495                                          sprintf( (char *)tempBffr2, "%s:0021//%1.4f//%2.3f//", 
   3496                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3497                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3498                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003B22   0x0038             MOVS     R0,R7
   \   00003B24   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B26   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B2A   0x4683             MOV      R11,R0
   \   00003B2C   0x0038             MOVS     R0,R7
   \   00003B2E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B30   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B34   0x4681             MOV      R9,R0
   \   00003B36   0x0038             MOVS     R0,R7
   \   00003B38   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B3A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B3E   0x4682             MOV      R10,R0
   \   00003B40   0x4658             MOV      R0,R11
   \   00003B42   0x.... 0x....      BL       __aeabi_f2d
   \   00003B46   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B4A   0x4648             MOV      R0,R9
   \   00003B4C   0x.... 0x....      BL       __aeabi_f2d
   \   00003B50   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B54   0x4652             MOV      R2,R10
   \   00003B56   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_579
   \   00003B5A   0xA80B             ADD      R0,SP,#+44
   \   00003B5C   0x.... 0x....      BL       sprintf
   3499                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003B60   0xA80B             ADD      R0,SP,#+44
   \   00003B62   0x.... 0x....      BL       strlen
   \   00003B66   0xA90B             ADD      R1,SP,#+44
   \   00003B68   0x.... 0x....      BL       BGM111_Transmit
   3500                                        }
   3501                                        sprintf( (char *)tempBffr2, "%s	0021		%1.4f		%2.3f\r\n", 
   3502                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3503                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3504                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_578: (+1)
   \   00003B6C   0x0038             MOVS     R0,R7
   \   00003B6E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B70   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B74   0x4683             MOV      R11,R0
   \   00003B76   0x0038             MOVS     R0,R7
   \   00003B78   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B7A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B7E   0x4681             MOV      R9,R0
   \   00003B80   0x0038             MOVS     R0,R7
   \   00003B82   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B84   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B88   0x4682             MOV      R10,R0
   \   00003B8A   0x4658             MOV      R0,R11
   \   00003B8C   0x.... 0x....      BL       __aeabi_f2d
   \   00003B90   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B94   0x4648             MOV      R0,R9
   \   00003B96   0x.... 0x....      BL       __aeabi_f2d
   \   00003B9A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B9E   0x4652             MOV      R2,R10
   \   00003BA0   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_580
   \   00003BA4   0xA80B             ADD      R0,SP,#+44
   \   00003BA6   0x.... 0x....      BL       sprintf
   3505                                        break;
   \   00003BAA   0xE0F4             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_489:
   \   00003BAC   0x........         DC32     ?_220
   \   00003BB0   0x........         DC32     ?_221
   \   00003BB4   0x........         DC32     ?_222
   \   00003BB8   0x........         DC32     ?_223
   3506                                      case CAL_ROADT_6C: //CAL_ROADT_6C Values
   3507                                        // Is this a BLE Operation?
   3508                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_529: (+1)
   \   00003BBC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003BBE   0x2D00             CMP      R5,#+0
   \   00003BC0   0xD024             BEQ.N    ??RoadBrd_ParseString_581
   3509                                        {
   3510                                          // Yes...Build and Send BLE Response NOW.
   3511                                          sprintf( (char *)tempBffr2, "%s:0023//%1.4f//%2.3f//", 
   3512                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3513                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3514                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003BC2   0x0038             MOVS     R0,R7
   \   00003BC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BC6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003BCA   0x4683             MOV      R11,R0
   \   00003BCC   0x0038             MOVS     R0,R7
   \   00003BCE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BD0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003BD4   0x4681             MOV      R9,R0
   \   00003BD6   0x0038             MOVS     R0,R7
   \   00003BD8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BDA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003BDE   0x4682             MOV      R10,R0
   \   00003BE0   0x4658             MOV      R0,R11
   \   00003BE2   0x.... 0x....      BL       __aeabi_f2d
   \   00003BE6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003BEA   0x4648             MOV      R0,R9
   \   00003BEC   0x.... 0x....      BL       __aeabi_f2d
   \   00003BF0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003BF4   0x4652             MOV      R2,R10
   \   00003BF6   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_580+0x4
   \   00003BFA   0xA80B             ADD      R0,SP,#+44
   \   00003BFC   0x.... 0x....      BL       sprintf
   3515                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003C00   0xA80B             ADD      R0,SP,#+44
   \   00003C02   0x.... 0x....      BL       strlen
   \   00003C06   0xA90B             ADD      R1,SP,#+44
   \   00003C08   0x.... 0x....      BL       BGM111_Transmit
   3516                                        }
   3517                                        sprintf( (char *)tempBffr2, "%s	0023		%1.4f		%2.3f\r\n", 
   3518                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3519                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3520                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_581: (+1)
   \   00003C0C   0x0038             MOVS     R0,R7
   \   00003C0E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C10   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C14   0x4683             MOV      R11,R0
   \   00003C16   0x0038             MOVS     R0,R7
   \   00003C18   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C1A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C1E   0x4681             MOV      R9,R0
   \   00003C20   0x0038             MOVS     R0,R7
   \   00003C22   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C24   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C28   0x4682             MOV      R10,R0
   \   00003C2A   0x4658             MOV      R0,R11
   \   00003C2C   0x.... 0x....      BL       __aeabi_f2d
   \   00003C30   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C34   0x4648             MOV      R0,R9
   \   00003C36   0x.... 0x....      BL       __aeabi_f2d
   \   00003C3A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C3E   0x4652             MOV      R2,R10
   \   00003C40   0xF8DF 0x1D20      LDR.W    R1,??RoadBrd_ParseString_580+0x8
   \   00003C44   0xA80B             ADD      R0,SP,#+44
   \   00003C46   0x.... 0x....      BL       sprintf
   3521                                        break;
   \   00003C4A   0xE0A4             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_494:
   \   00003C4C   0x........         DC32     ?_224
   \   00003C50   0x........         DC32     ?_225
   \   00003C54   0x........         DC32     ?_226
   \   00003C58   0x........         DC32     ?_227
   \   00003C5C   0x........         DC32     ?_228
   \   00003C60   0x........         DC32     ?_229
   3522                                      case CAL_ROADT_7C: //CAL_ROADT_7C Values
   3523                                        // Is this a BLE Operation?
   3524                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_528: (+1)
   \   00003C64   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003C66   0x2D00             CMP      R5,#+0
   \   00003C68   0xD024             BEQ.N    ??RoadBrd_ParseString_582
   3525                                        {
   3526                                          // Yes...Build and Send BLE Response NOW.
   3527                                          sprintf( (char *)tempBffr2, "%s:0025//%1.4f//%2.3f//", 
   3528                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3529                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3530                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003C6A   0x0038             MOVS     R0,R7
   \   00003C6C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C6E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C72   0x4683             MOV      R11,R0
   \   00003C74   0x0038             MOVS     R0,R7
   \   00003C76   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C78   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C7C   0x4681             MOV      R9,R0
   \   00003C7E   0x0038             MOVS     R0,R7
   \   00003C80   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C82   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C86   0x4682             MOV      R10,R0
   \   00003C88   0x4658             MOV      R0,R11
   \   00003C8A   0x.... 0x....      BL       __aeabi_f2d
   \   00003C8E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C92   0x4648             MOV      R0,R9
   \   00003C94   0x.... 0x....      BL       __aeabi_f2d
   \   00003C98   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C9C   0x4652             MOV      R2,R10
   \   00003C9E   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_583
   \   00003CA2   0xA80B             ADD      R0,SP,#+44
   \   00003CA4   0x.... 0x....      BL       sprintf
   3531                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003CA8   0xA80B             ADD      R0,SP,#+44
   \   00003CAA   0x.... 0x....      BL       strlen
   \   00003CAE   0xA90B             ADD      R1,SP,#+44
   \   00003CB0   0x.... 0x....      BL       BGM111_Transmit
   3532                                        }
   3533                                        sprintf( (char *)tempBffr2, "%s	0025		%1.4f		%2.3f\r\n", 
   3534                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3535                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3536                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_582: (+1)
   \   00003CB4   0x0038             MOVS     R0,R7
   \   00003CB6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CB8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003CBC   0x4683             MOV      R11,R0
   \   00003CBE   0x0038             MOVS     R0,R7
   \   00003CC0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CC2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003CC6   0x4681             MOV      R9,R0
   \   00003CC8   0x0038             MOVS     R0,R7
   \   00003CCA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CCC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003CD0   0x4682             MOV      R10,R0
   \   00003CD2   0x4658             MOV      R0,R11
   \   00003CD4   0x.... 0x....      BL       __aeabi_f2d
   \   00003CD8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003CDC   0x4648             MOV      R0,R9
   \   00003CDE   0x.... 0x....      BL       __aeabi_f2d
   \   00003CE2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CE6   0x4652             MOV      R2,R10
   \   00003CE8   0xF8DF 0x1D40      LDR.W    R1,??RoadBrd_ParseString_583+0x4
   \   00003CEC   0xA80B             ADD      R0,SP,#+44
   \   00003CEE   0x.... 0x....      BL       sprintf
   3537                                        break;
   \   00003CF2   0xE050             B.N      ??RoadBrd_ParseString_531
   \                     ??RoadBrd_ParseString_500:
   \   00003CF4   0x........         DC32     ?_230
   \   00003CF8   0x........         DC32     ?_231
   \   00003CFC   0x........         DC32     ?_232
   \   00003D00   0x........         DC32     ?_233
   \   00003D04   0x........         DC32     ?_234
   3538                                      case CAL_ROADT_8C: //CAL_ROADT_8C Values
   3539                                        // Is this a BLE Operation?
   3540                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_530: (+1)
   \   00003D08   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003D0A   0x2D00             CMP      R5,#+0
   \   00003D0C   0xD024             BEQ.N    ??RoadBrd_ParseString_584
   3541                                        {
   3542                                          // Yes...Build and Send BLE Response NOW.
   3543                                          sprintf( (char *)tempBffr2, "%s:0027//%1.4f//%2.3f//", 
   3544                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3545                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3546                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003D0E   0x0038             MOVS     R0,R7
   \   00003D10   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D12   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D16   0x4683             MOV      R11,R0
   \   00003D18   0x0038             MOVS     R0,R7
   \   00003D1A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D1C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D20   0x4681             MOV      R9,R0
   \   00003D22   0x0038             MOVS     R0,R7
   \   00003D24   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D26   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D2A   0x4682             MOV      R10,R0
   \   00003D2C   0x4658             MOV      R0,R11
   \   00003D2E   0x.... 0x....      BL       __aeabi_f2d
   \   00003D32   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D36   0x4648             MOV      R0,R9
   \   00003D38   0x.... 0x....      BL       __aeabi_f2d
   \   00003D3C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D40   0x4652             MOV      R2,R10
   \   00003D42   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_585
   \   00003D46   0xA80B             ADD      R0,SP,#+44
   \   00003D48   0x.... 0x....      BL       sprintf
   3547                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003D4C   0xA80B             ADD      R0,SP,#+44
   \   00003D4E   0x.... 0x....      BL       strlen
   \   00003D52   0xA90B             ADD      R1,SP,#+44
   \   00003D54   0x.... 0x....      BL       BGM111_Transmit
   3548                                        }
   3549                                        sprintf( (char *)tempBffr2, "%s	0027		%1.4f		%2.3f\r\n", 
   3550                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3551                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3552                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_584: (+1)
   \   00003D58   0x0038             MOVS     R0,R7
   \   00003D5A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D5C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D60   0x4683             MOV      R11,R0
   \   00003D62   0x0038             MOVS     R0,R7
   \   00003D64   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D66   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D6A   0x4681             MOV      R9,R0
   \   00003D6C   0x0038             MOVS     R0,R7
   \   00003D6E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D70   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D74   0x4682             MOV      R10,R0
   \   00003D76   0x4658             MOV      R0,R11
   \   00003D78   0x.... 0x....      BL       __aeabi_f2d
   \   00003D7C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D80   0x4648             MOV      R0,R9
   \   00003D82   0x.... 0x....      BL       __aeabi_f2d
   \   00003D86   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D8A   0x4652             MOV      R2,R10
   \   00003D8C   0xF8DF 0x1D60      LDR.W    R1,??RoadBrd_ParseString_586
   \   00003D90   0xA80B             ADD      R0,SP,#+44
   \   00003D92   0x.... 0x....      BL       sprintf
   3553                                        break;
   3554                                    } // EndSwitch(x)
   3555                                    // Now Print String.
   3556          #ifdef NUCLEO
   3557                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3558          #else
   3559                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_531: (+1)
   \   00003D96   0xA90B             ADD      R1,SP,#+44
   \   00003D98   0x2000             MOVS     R0,#+0
   \   00003D9A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003D9E   0x0006             MOVS     R6,R0
   3560          #endif
   3561                                    if (Status != HAL_OK)
   \   00003DA0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003DA2   0x2E00             CMP      R6,#+0
   \   00003DA4   0xD008             BEQ.N    ??RoadBrd_ParseString_587
   3562                                      return Status;
   \   00003DA6   0x0030             MOVS     R0,R6
   \   00003DA8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003DAA   0xF000 0xBEE3      B.W      ??RoadBrd_ParseString_4
   \   00003DAE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_504:
   \   00003DB0   0x........         DC32     ?_235
   \   00003DB4   0x........         DC32     ?_236
   3563                                  } // EndFor(x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_587: (+1)
   \   00003DB8   0x1C7F             ADDS     R7,R7,#+1
   \   00003DBA   0xF7FF 0xB897      B.W      ??RoadBrd_ParseString_507
   3564                                  // Is this a BLE Operation?
   3565                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_508: (+1)
   \   00003DBE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DC0   0x2D00             CMP      R5,#+0
   \   00003DC2   0xD00A             BEQ.N    ??RoadBrd_ParseString_588
   3566                                  {
   3567                                    // Yes...Build and Send BLE Response NOW.
   3568                                    strcpy( (char *)tempBffr2, "</STATUS>");
   \   00003DC4   0xF8DF 0x1D58      LDR.W    R1,??RoadBrd_ParseString_589
   \   00003DC8   0xA80B             ADD      R0,SP,#+44
   \   00003DCA   0x.... 0x....      BL       strcpy
   3569                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003DCE   0xA80B             ADD      R0,SP,#+44
   \   00003DD0   0x.... 0x....      BL       strlen
   \   00003DD4   0xA90B             ADD      R1,SP,#+44
   \   00003DD6   0x.... 0x....      BL       BGM111_Transmit
   3570                                  }
   3571                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_588: (+1)
   \   00003DDA   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_589+0x4
   \   00003DDE   0xA80B             ADD      R0,SP,#+44
   \   00003DE0   0x.... 0x....      BL       sprintf
   3572                                  break;
   \   00003DE4   0xE091             B.N      ??RoadBrd_ParseString_377
   3573                                  //------------------ TCT Command: Calibration Set Time Command
   3574                                case 'T':
   3575                                  // Step 1. Validate format.
   3576                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_386: (+1)
   \   00003DE6   0x78E0             LDRB     R0,[R4, #+3]
   \   00003DE8   0x283A             CMP      R0,#+58
   \   00003DEA   0xD013             BEQ.N    ??RoadBrd_ParseString_590
   3577                                  {
   3578                                    // Is this a BLE Operation?
   3579                                    if ( BLE_Flag )
   \   00003DEC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DEE   0x2D00             CMP      R5,#+0
   \   00003DF0   0xD00A             BEQ.N    ??RoadBrd_ParseString_591
   3580                                    {
   3581                                      // Yes...Build and Send BLE Response NOW.
   3582                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_SYNTAX</STATUS>");
   \   00003DF2   0xF8DF 0x1D34      LDR.W    R1,??RoadBrd_ParseString_589+0x8
   \   00003DF6   0xA80B             ADD      R0,SP,#+44
   \   00003DF8   0x.... 0x....      BL       strcpy
   3583                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003DFC   0xA80B             ADD      R0,SP,#+44
   \   00003DFE   0x.... 0x....      BL       strlen
   \   00003E02   0xA90B             ADD      R1,SP,#+44
   \   00003E04   0x.... 0x....      BL       BGM111_Transmit
   3584                                    }
   3585                                    
   3586                                    strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_591: (+1)
   \   00003E08   0xF8DF 0x1D20      LDR.W    R1,??RoadBrd_ParseString_589+0xC
   \   00003E0C   0xA80B             ADD      R0,SP,#+44
   \   00003E0E   0x.... 0x....      BL       strcpy
   \   00003E12   0xE04C             B.N      ??RoadBrd_ParseString_592
   3587                                  } // Endif (tempBffr[3]!=':')
   3588                                  else
   3589                                  {
   3590                                    // 2. Verify if remaining string is digits
   3591                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_590: (+1)
   \   00003E14   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00003E18   0x2805             CMP      R0,#+5
   \   00003E1A   0xDA13             BGE.N    ??RoadBrd_ParseString_593
   3592                                    {
   3593                                      // Is this a BLE Operation?
   3594                                      if ( BLE_Flag )
   \   00003E1C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E1E   0x2D00             CMP      R5,#+0
   \   00003E20   0xD00A             BEQ.N    ??RoadBrd_ParseString_594
   3595                                      {
   3596                                        // Yes...Build and Send BLE Response NOW.
   3597                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_BADPARAM</STATUS>");
   \   00003E22   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_595
   \   00003E26   0xA80B             ADD      R0,SP,#+44
   \   00003E28   0x.... 0x....      BL       strcpy
   3598                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E2C   0xA80B             ADD      R0,SP,#+44
   \   00003E2E   0x.... 0x....      BL       strlen
   \   00003E32   0xA90B             ADD      R1,SP,#+44
   \   00003E34   0x.... 0x....      BL       BGM111_Transmit
   3599                                      }
   3600                                      strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_594: (+1)
   \   00003E38   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_595+0x4
   \   00003E3C   0xA80B             ADD      R0,SP,#+44
   \   00003E3E   0x.... 0x....      BL       strcpy
   \   00003E42   0xE034             B.N      ??RoadBrd_ParseString_592
   3601                                    } // EndIf (Size > 4)
   3602                                    else
   3603                                    {
   3604                                      // 3. Grab remaining string and Save it.
   3605                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_593: (+1)
   \   00003E44   0x1D20             ADDS     R0,R4,#+4
   \   00003E46   0x9030             STR      R0,[SP, #+192]
   3606                                      strcpy(tempstr, tempPstr);
   \   00003E48   0x9930             LDR      R1,[SP, #+192]
   \   00003E4A   0xA852             ADD      R0,SP,#+328
   \   00003E4C   0x.... 0x....      BL       strcpy
   3607                                      // NOW...Save it.
   3608                                      Status = RoadBrd_CAL_Set_TimeString( (uint8_t *)tempPstr );
   \   00003E50   0x9830             LDR      R0,[SP, #+192]
   \   00003E52   0x.... 0x....      BL       RoadBrd_CAL_Set_TimeString
   \   00003E56   0x0006             MOVS     R6,R0
   3609                                      if (Status != HAL_OK)
   \   00003E58   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003E5A   0x2E00             CMP      R6,#+0
   \   00003E5C   0xD014             BEQ.N    ??RoadBrd_ParseString_596
   3610                                      {
   3611                                        // Is this a BLE Operation?
   3612                                        if ( BLE_Flag )
   \   00003E5E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E60   0x2D00             CMP      R5,#+0
   \   00003E62   0xD00A             BEQ.N    ??RoadBrd_ParseString_597
   3613                                        {
   3614                                          // Yes...Build and Send BLE Response NOW.
   3615                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_ERR</STATUS>");
   \   00003E64   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00003E68   0xA80B             ADD      R0,SP,#+44
   \   00003E6A   0x.... 0x....      BL       strcpy
   3616                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E6E   0xA80B             ADD      R0,SP,#+44
   \   00003E70   0x.... 0x....      BL       strlen
   \   00003E74   0xA90B             ADD      R1,SP,#+44
   \   00003E76   0x.... 0x....      BL       BGM111_Transmit
   3617                                        }
   3618                                        return Status;
   \                     ??RoadBrd_ParseString_597: (+1)
   \   00003E7A   0x0030             MOVS     R0,R6
   \   00003E7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003E7E   0xF000 0xBE79      B.W      ??RoadBrd_ParseString_4
   \   00003E82   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_533:
   \   00003E84   0x........         DC32     ?_237
   3619                                      }
   3620                                      else
   3621                                      {
   3622                                        // Is this a BLE Operation?
   3623                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_596: (+1)
   \   00003E88   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E8A   0x2D00             CMP      R5,#+0
   \   00003E8C   0xD00A             BEQ.N    ??RoadBrd_ParseString_598
   3624                                        {
   3625                                          // Yes...Build and Send BLE Response NOW.
   3626                                          strcpy( (char *)tempBffr2, "<STATUS>ST_TCT_ACK</STATUS>");
   \   00003E8E   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00003E92   0xA80B             ADD      R0,SP,#+44
   \   00003E94   0x.... 0x....      BL       strcpy
   3627                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E98   0xA80B             ADD      R0,SP,#+44
   \   00003E9A   0x.... 0x....      BL       strlen
   \   00003E9E   0xA90B             ADD      R1,SP,#+44
   \   00003EA0   0x.... 0x....      BL       BGM111_Transmit
   3628                                        }
   3629                                      }
   3630                                      sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_598: (+1)
   \   00003EA4   0xF8DF 0x1C7C      LDR.W    R1,??RoadBrd_ParseString_589+0x4
   \   00003EA8   0xA80B             ADD      R0,SP,#+44
   \   00003EAA   0x.... 0x....      BL       sprintf
   3631                                    } // EndElse (Size > 4)
   3632                                  } // EndElse (tempBffr[3]!=':')
   3633                                  break;
   \                     ??RoadBrd_ParseString_592: (+1)
   \   00003EAE   0xE02C             B.N      ??RoadBrd_ParseString_377
   3634                                  //------------------ TCI Command: Calibration Initialize Cal Table(Reset)
   3635                                case 'I':
   3636                                  Status = RoadBrd_CAL_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_383: (+1)
   \   00003EB0   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   00003EB4   0x0006             MOVS     R6,R0
   3637                                  if (Status != HAL_OK)
   \   00003EB6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003EB8   0x2E00             CMP      R6,#+0
   \   00003EBA   0xD013             BEQ.N    ??RoadBrd_ParseString_599
   3638                                  {
   3639                                    // Is this a BLE Operation?
   3640                                    if ( BLE_Flag )
   \   00003EBC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003EBE   0x2D00             CMP      R5,#+0
   \   00003EC0   0xD00A             BEQ.N    ??RoadBrd_ParseString_600
   3641                                    {
   3642                                      // Yes...Build and Send BLE Response NOW.
   3643                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCI_ERR</STATUS>");
   \   00003EC2   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   00003EC6   0xA80B             ADD      R0,SP,#+44
   \   00003EC8   0x.... 0x....      BL       strcpy
   3644                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003ECC   0xA80B             ADD      R0,SP,#+44
   \   00003ECE   0x.... 0x....      BL       strlen
   \   00003ED2   0xA90B             ADD      R1,SP,#+44
   \   00003ED4   0x.... 0x....      BL       BGM111_Transmit
   3645                                    }
   3646                                    return Status;
   \                     ??RoadBrd_ParseString_600: (+1)
   \   00003ED8   0x0030             MOVS     R0,R6
   \   00003EDA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003EDC   0xF000 0xBE4A      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_534:
   \   00003EE0   0x........         DC32     ?_238
   3647                                  }
   3648                                  else
   3649                                  {
   3650                                    // Is this a BLE Operation?
   3651                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_599: (+1)
   \   00003EE4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003EE6   0x2D00             CMP      R5,#+0
   \   00003EE8   0xD00A             BEQ.N    ??RoadBrd_ParseString_601
   3652                                    {
   3653                                      // Yes...Build and Send BLE Response NOW.
   3654                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TCI_ACK</STATUS>");
   \   00003EEA   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00003EEE   0xA80B             ADD      R0,SP,#+44
   \   00003EF0   0x.... 0x....      BL       strcpy
   3655                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003EF4   0xA80B             ADD      R0,SP,#+44
   \   00003EF6   0x.... 0x....      BL       strlen
   \   00003EFA   0xA90B             ADD      R1,SP,#+44
   \   00003EFC   0x.... 0x....      BL       BGM111_Transmit
   3656                                    }
   3657                                  }
   3658                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_601: (+1)
   \   00003F00   0xF8DF 0x1C20      LDR.W    R1,??RoadBrd_ParseString_589+0x4
   \   00003F04   0xA80B             ADD      R0,SP,#+44
   \   00003F06   0x.... 0x....      BL       sprintf
   3659                                  break;
   3660                                } //EndSwitch
   3661                              } //EndElse (Size == 2)
   3662                              break;
   \                     ??RoadBrd_ParseString_377: (+1)
   \   00003F0A   0xF000 0xBDA2      B.W      ??RoadBrd_ParseString_289
   3663          //++++++++++++++++++++++++++++++++++++++++++  Dump Driver State.
   3664                            case 'D':
   3665                              // Read Driver Status
   3666                              DriverStatus = Get_DriverStatus();
   \                     ??RoadBrd_ParseString_291: (+1)
   \   00003F0E   0x.... 0x....      BL       Get_DriverStatus
   \   00003F12   0xF8AD 0x00E4      STRH     R0,[SP, #+228]
   3667                              // Is this a BLE Operation?
   3668                              if ( BLE_Flag )
   \   00003F16   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F18   0x2D00             CMP      R5,#+0
   \   00003F1A   0xD00C             BEQ.N    ??RoadBrd_ParseString_602
   3669                              {
   3670                                // Yes...Build and Send BLE Response NOW.
   3671                                sprintf( (char *)tempBffr2, "<STATUS>ST_DRIVER:%04x</STATUS>", DriverStatus );
   \   00003F1C   0xF8BD 0x20E4      LDRH     R2,[SP, #+228]
   \   00003F20   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00003F24   0xA80B             ADD      R0,SP,#+44
   \   00003F26   0x.... 0x....      BL       sprintf
   3672                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F2A   0xA80B             ADD      R0,SP,#+44
   \   00003F2C   0x.... 0x....      BL       strlen
   \   00003F30   0xA90B             ADD      R1,SP,#+44
   \   00003F32   0x.... 0x....      BL       BGM111_Transmit
   3673                              }
   3674                              
   3675                              sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   \                     ??RoadBrd_ParseString_602: (+1)
   \   00003F36   0xF8BD 0x20E4      LDRH     R2,[SP, #+228]
   \   00003F3A   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   00003F3E   0xA80B             ADD      R0,SP,#+44
   \   00003F40   0x.... 0x....      BL       sprintf
   3676                              break;
   \   00003F44   0xF000 0xBD85      B.W      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_536:
   \   00003F48   0x........         DC32     ?_239
   3677          //++++++++++++++++++++++++++++++++++++++++++  RESET Micro.
   3678                            case 'R':
   3679                              // RESET
   3680                              // Is this a BLE Operation?
   3681                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_297: (+1)
   \   00003F4C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F4E   0x2D00             CMP      R5,#+0
   \   00003F50   0xD00D             BEQ.N    ??RoadBrd_ParseString_603
   3682                              {
   3683                                // Yes...Build and Send BLE Response NOW.
   3684                                strcpy( (char *)tempBffr2, "<STATUS>ST_RESET_ACK</STATUS>");
   \   00003F52   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00003F56   0xA80B             ADD      R0,SP,#+44
   \   00003F58   0x.... 0x....      BL       strcpy
   3685                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F5C   0xA80B             ADD      R0,SP,#+44
   \   00003F5E   0x.... 0x....      BL       strlen
   \   00003F62   0xA90B             ADD      R1,SP,#+44
   \   00003F64   0x.... 0x....      BL       BGM111_Transmit
   3686                                HAL_Delay(100);           // Wait 100ms
   \   00003F68   0x2064             MOVS     R0,#+100
   \   00003F6A   0x.... 0x....      BL       HAL_Delay
   3687                              }
   3688                              HAL_NVIC_SystemReset();
   \                     ??RoadBrd_ParseString_603: (+1)
   \   00003F6E   0x.... 0x....      BL       HAL_NVIC_SystemReset
   3689                              sprintf( (char *)tempBffr2, "RESET CALLED BUT NO RESPONSE!!\r\n" );
   \   00003F72   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   00003F76   0xA80B             ADD      R0,SP,#+44
   \   00003F78   0x.... 0x....      BL       sprintf
   3690                              break;
   \   00003F7C   0xF000 0xBD69      B.W      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_537:
   \   00003F80   0x........         DC32     ?_240
   3691          //++++++++++++++++++++++++++++++++++++++++++  Key Flash Variable Commands.
   3692                            case 'K':
   3693                              // Key Flash Variable Commands.
   3694                              // Test Size to make sure we have enough Characters for this operation
   3695                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_294: (+1)
   \   00003F84   0x2000             MOVS     R0,#+0
   \   00003F86   0x0006             MOVS     R6,R0
   3696                              if (Size < 4)
   \   00003F88   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00003F8C   0x2804             CMP      R0,#+4
   \   00003F8E   0xDA15             BGE.N    ??RoadBrd_ParseString_604
   3697                              {
   3698                                // Is this a BLE Operation?
   3699                                if ( BLE_Flag )
   \   00003F90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F92   0x2D00             CMP      R5,#+0
   \   00003F94   0xD00A             BEQ.N    ??RoadBrd_ParseString_605
   3700                                {
   3701                                  // Yes...Build and Send BLE Response NOW.
   3702                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   00003F96   0x.... 0x....      LDR.W    R1,??DataTable3_9
   \   00003F9A   0xA80B             ADD      R0,SP,#+44
   \   00003F9C   0x.... 0x....      BL       strcpy
   3703                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003FA0   0xA80B             ADD      R0,SP,#+44
   \   00003FA2   0x.... 0x....      BL       strlen
   \   00003FA6   0xA90B             ADD      R1,SP,#+44
   \   00003FA8   0x.... 0x....      BL       BGM111_Transmit
   3704                                }
   3705                                strcpy( (char *)tempBffr2, "TK SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_605: (+1)
   \   00003FAC   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   00003FB0   0xA80B             ADD      R0,SP,#+44
   \   00003FB2   0x.... 0x....      BL       strcpy
   \   00003FB6   0xE30C             B.N      ??RoadBrd_ParseString_606
   \                     ??RoadBrd_ParseString_539:
   \   00003FB8   0x........         DC32     ?_241
   3706                              }
   3707                              else
   3708                              {
   3709                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_604: (+1)
   \   00003FBC   0x78A0             LDRB     R0,[R4, #+2]
   \   00003FBE   0x2852             CMP      R0,#+82
   \   00003FC0   0xF000 0x8240      BEQ.W    ??RoadBrd_ParseString_607
   \   00003FC4   0x2853             CMP      R0,#+83
   \   00003FC6   0xF040 0x82F1      BNE.W    ??RoadBrd_ParseString_608
   3710                                {
   3711          //------------------
   3712                                  case 'S':
   3713                                    //Key Flash Variable Set Command.
   3714                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_609: (+1)
   \   00003FCA   0x78E0             LDRB     R0,[R4, #+3]
   \   00003FCC   0x2842             CMP      R0,#+66
   \   00003FCE   0xF000 0x81A6      BEQ.W    ??RoadBrd_ParseString_610
   \   00003FD2   0x2852             CMP      R0,#+82
   \   00003FD4   0xD006             BEQ.N    ??RoadBrd_ParseString_611
   \   00003FD6   0x2853             CMP      R0,#+83
   \   00003FD8   0xF000 0x808F      BEQ.W    ??RoadBrd_ParseString_612
   \   00003FDC   0x2854             CMP      R0,#+84
   \   00003FDE   0xF000 0x8114      BEQ.W    ??RoadBrd_ParseString_613
   \   00003FE2   0xE224             B.N      ??RoadBrd_ParseString_614
   3715                                    {
   3716          //------------------
   3717                                      case 'R':
   3718                                        //Key Flash Variable Set Road Sound Sample Rate Command.
   3719                                        // Step 1. Validate format.
   3720                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_611: (+1)
   \   00003FE4   0x7920             LDRB     R0,[R4, #+4]
   \   00003FE6   0x283A             CMP      R0,#+58
   \   00003FE8   0xD018             BEQ.N    ??RoadBrd_ParseString_615
   3721                                        {
   3722                                          // Is this a BLE Operation?
   3723                                          if ( BLE_Flag )
   \   00003FEA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003FEC   0x2D00             CMP      R5,#+0
   \   00003FEE   0xD00A             BEQ.N    ??RoadBrd_ParseString_616
   3724                                          {
   3725                                            // Yes...Build and Send BLE Response NOW.
   3726                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_SYNTAX</STATUS>");
   \   00003FF0   0x.... 0x....      LDR.W    R1,??DataTable3_12
   \   00003FF4   0xA80B             ADD      R0,SP,#+44
   \   00003FF6   0x.... 0x....      BL       strcpy
   3727                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003FFA   0xA80B             ADD      R0,SP,#+44
   \   00003FFC   0x.... 0x....      BL       strlen
   \   00004000   0xA90B             ADD      R1,SP,#+44
   \   00004002   0x.... 0x....      BL       BGM111_Transmit
   3728                                          }
   3729                                          strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_616: (+1)
   \   00004006   0x.... 0x....      LDR.W    R1,??DataTable3_13
   \   0000400A   0xA80B             ADD      R0,SP,#+44
   \   0000400C   0x.... 0x....      BL       strcpy
   \   00004010   0xE072             B.N      ??RoadBrd_ParseString_617
   \   00004012   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_540:
   \   00004014   0x........         DC32     ?_242
   \   00004018   0x........         DC32     ?_243
   3730                                        } // Endif (tempBffr[4]!=':')
   3731                                        else
   3732                                        {
   3733                                          // 2. Verify if remaining string is digits
   3734                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_615: (+1)
   \   0000401C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004020   0x2806             CMP      R0,#+6
   \   00004022   0xDB10             BLT.N    ??RoadBrd_ParseString_618
   3735                                          {
   3736                                            flag = 1;
   \   00004024   0x2001             MOVS     R0,#+1
   \   00004026   0x902E             STR      R0,[SP, #+184]
   3737                                            for (x=5; x< Size; x++)
   \   00004028   0x2005             MOVS     R0,#+5
   \   0000402A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_619: (+1)
   \   0000402C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004030   0x4287             CMP      R7,R0
   \   00004032   0xDA0A             BGE.N    ??RoadBrd_ParseString_620
   3738                                            {
   3739                                              if (isdigit(tempBffr[x]) == 0)
   \   00004034   0x5DE0             LDRB     R0,[R4, R7]
   \   00004036   0x.... 0x....      BL       isdigit
   \   0000403A   0x2800             CMP      R0,#+0
   \   0000403C   0xD101             BNE.N    ??RoadBrd_ParseString_621
   3740                                                flag = 0;
   \   0000403E   0x2000             MOVS     R0,#+0
   \   00004040   0x902E             STR      R0,[SP, #+184]
   3741                                            }
   \                     ??RoadBrd_ParseString_621: (+1)
   \   00004042   0x1C7F             ADDS     R7,R7,#+1
   \   00004044   0xE7F2             B.N      ??RoadBrd_ParseString_619
   3742                                          } // EndIf (Size > 5)
   3743                                          else
   3744                                            flag = 0;
   \                     ??RoadBrd_ParseString_618: (+1)
   \   00004046   0x2000             MOVS     R0,#+0
   \   00004048   0x902E             STR      R0,[SP, #+184]
   3745                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_620: (+1)
   \   0000404A   0x982E             LDR      R0,[SP, #+184]
   \   0000404C   0x2800             CMP      R0,#+0
   \   0000404E   0xD113             BNE.N    ??RoadBrd_ParseString_622
   3746                                          {
   3747                                            // Is this a BLE Operation?
   3748                                            if ( BLE_Flag )
   \   00004050   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004052   0x2D00             CMP      R5,#+0
   \   00004054   0xD00A             BEQ.N    ??RoadBrd_ParseString_623
   3749                                            {
   3750                                              // Yes...Build and Send BLE Response NOW.
   3751                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   00004056   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \   0000405A   0xA80B             ADD      R0,SP,#+44
   \   0000405C   0x.... 0x....      BL       strcpy
   3752                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004060   0xA80B             ADD      R0,SP,#+44
   \   00004062   0x.... 0x....      BL       strlen
   \   00004066   0xA90B             ADD      R1,SP,#+44
   \   00004068   0x.... 0x....      BL       BGM111_Transmit
   3753                                            }
   3754                                            strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_623: (+1)
   \   0000406C   0x.... 0x....      LDR.W    R1,??DataTable3_15
   \   00004070   0xA80B             ADD      R0,SP,#+44
   \   00004072   0x.... 0x....      BL       strcpy
   \   00004076   0xE03F             B.N      ??RoadBrd_ParseString_617
   3755                                          }
   3756                                          else
   3757                                          {
   3758                                            // 3. Grab remaining string and convert to integer.
   3759                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_622: (+1)
   \   00004078   0x1D60             ADDS     R0,R4,#+5
   \   0000407A   0x9030             STR      R0,[SP, #+192]
   3760                                            strcpy(tempstr, tempPstr);
   \   0000407C   0x9930             LDR      R1,[SP, #+192]
   \   0000407E   0xA852             ADD      R0,SP,#+328
   \   00004080   0x.... 0x....      BL       strcpy
   3761                                            new_value = atoi( tempstr );
   \   00004084   0xA852             ADD      R0,SP,#+328
   \   00004086   0x.... 0x....      BL       atoi
   \   0000408A   0x902F             STR      R0,[SP, #+188]
   3762                                            if((new_value > 9999) ||
   3763                                               (new_value < 0))
   \   0000408C   0x982F             LDR      R0,[SP, #+188]
   \   0000408E   0xF242 0x7110      MOVW     R1,#+10000
   \   00004092   0x4288             CMP      R0,R1
   \   00004094   0xDA02             BGE.N    ??RoadBrd_ParseString_624
   \   00004096   0x982F             LDR      R0,[SP, #+188]
   \   00004098   0x2800             CMP      R0,#+0
   \   0000409A   0xD517             BPL.N    ??RoadBrd_ParseString_625
   3764                                            {
   3765                                              // Is this a BLE Operation?
   3766                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_624: (+1)
   \   0000409C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000409E   0x2D00             CMP      R5,#+0
   \   000040A0   0xD00A             BEQ.N    ??RoadBrd_ParseString_626
   3767                                              {
   3768                                                // Yes...Build and Send BLE Response NOW.
   3769                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   000040A2   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \   000040A6   0xA80B             ADD      R0,SP,#+44
   \   000040A8   0x.... 0x....      BL       strcpy
   3770                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040AC   0xA80B             ADD      R0,SP,#+44
   \   000040AE   0x.... 0x....      BL       strlen
   \   000040B2   0xA90B             ADD      R1,SP,#+44
   \   000040B4   0x.... 0x....      BL       BGM111_Transmit
   3771                                              }
   3772                                              strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_626: (+1)
   \   000040B8   0x.... 0x....      LDR.W    R1,??DataTable3_15
   \   000040BC   0xA80B             ADD      R0,SP,#+44
   \   000040BE   0x.... 0x....      BL       strcpy
   \   000040C2   0xE019             B.N      ??RoadBrd_ParseString_617
   \                     ??RoadBrd_ParseString_542:
   \   000040C4   0x........         DC32     ?_244
   \   000040C8   0x........         DC32     ?_245
   3773                                            }
   3774                                            else
   3775                                            {
   3776                                              // Time to set new Road Sound Sample Rate.
   3777                                              RoadBrd_Set_RdSndTickCnt( new_value );
   \                     ??RoadBrd_ParseString_625: (+1)
   \   000040CC   0x982F             LDR      R0,[SP, #+188]
   \   000040CE   0x.... 0x....      BL       RoadBrd_Set_RdSndTickCnt
   3778                                              // NOW, Build Data String..
   3779                                              // Is this a BLE Operation?
   3780                                              if ( BLE_Flag )
   \   000040D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040D4   0x2D00             CMP      R5,#+0
   \   000040D6   0xD00A             BEQ.N    ??RoadBrd_ParseString_627
   3781                                              {
   3782                                                // Yes...Build and Send BLE Response NOW.
   3783                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSR_ACK</STATUS>");
   \   000040D8   0x.... 0x....      LDR.W    R1,??DataTable4
   \   000040DC   0xA80B             ADD      R0,SP,#+44
   \   000040DE   0x.... 0x....      BL       strcpy
   3784                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040E2   0xA80B             ADD      R0,SP,#+44
   \   000040E4   0x.... 0x....      BL       strlen
   \   000040E8   0xA90B             ADD      R1,SP,#+44
   \   000040EA   0x.... 0x....      BL       BGM111_Transmit
   3785                                              }
   3786                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_627: (+1)
   \   000040EE   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   000040F2   0xA80B             ADD      R0,SP,#+44
   \   000040F4   0x.... 0x....      BL       sprintf
   3787                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3788                                          } // EndElse (flag == 0)
   3789                                        } // EndElse (tempBffr[4]!=':')
   3790                                        break;
   \                     ??RoadBrd_ParseString_617: (+1)
   \   000040F8   0xE19E             B.N      ??RoadBrd_ParseString_628
   3791          //------------------
   3792                                      case 'S':
   3793                                        //Key Flash Variable Set Sensor Sample Rate Command.
   3794                                        // Step 1. Validate format.
   3795                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_612: (+1)
   \   000040FA   0x7920             LDRB     R0,[R4, #+4]
   \   000040FC   0x283A             CMP      R0,#+58
   \   000040FE   0xD019             BEQ.N    ??RoadBrd_ParseString_629
   3796                                        {
   3797                                          // Is this a BLE Operation?
   3798                                          if ( BLE_Flag )
   \   00004100   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004102   0x2D00             CMP      R5,#+0
   \   00004104   0xD00A             BEQ.N    ??RoadBrd_ParseString_630
   3799                                          {
   3800                                            // Yes...Build and Send BLE Response NOW.
   3801                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_SYNTAX</STATUS>");
   \   00004106   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   0000410A   0xA80B             ADD      R0,SP,#+44
   \   0000410C   0x.... 0x....      BL       strcpy
   3802                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004110   0xA80B             ADD      R0,SP,#+44
   \   00004112   0x.... 0x....      BL       strlen
   \   00004116   0xA90B             ADD      R1,SP,#+44
   \   00004118   0x.... 0x....      BL       BGM111_Transmit
   3803                                          }
   3804                                          strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_630: (+1)
   \   0000411C   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \   00004120   0xA80B             ADD      R0,SP,#+44
   \   00004122   0x.... 0x....      BL       strcpy
   \   00004126   0xE06F             B.N      ??RoadBrd_ParseString_631
   \                     ??RoadBrd_ParseString_544:
   \   00004128   0x........         DC32     ?_246
   \   0000412C   0x........         DC32     ?_247
   \   00004130   0x........         DC32     ?_248
   3805                                        } // Endif (tempBffr[4]!=':')
   3806                                        else
   3807                                        {
   3808                                          // 2. Verify if remaining string is digits
   3809                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_629: (+1)
   \   00004134   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004138   0x2806             CMP      R0,#+6
   \   0000413A   0xDB10             BLT.N    ??RoadBrd_ParseString_632
   3810                                          {
   3811                                            flag = 1;
   \   0000413C   0x2001             MOVS     R0,#+1
   \   0000413E   0x902E             STR      R0,[SP, #+184]
   3812                                            for (x=5; x< Size; x++)
   \   00004140   0x2005             MOVS     R0,#+5
   \   00004142   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_633: (+1)
   \   00004144   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004148   0x4287             CMP      R7,R0
   \   0000414A   0xDA0A             BGE.N    ??RoadBrd_ParseString_634
   3813                                            {
   3814                                              if (isdigit(tempBffr[x]) == 0)
   \   0000414C   0x5DE0             LDRB     R0,[R4, R7]
   \   0000414E   0x.... 0x....      BL       isdigit
   \   00004152   0x2800             CMP      R0,#+0
   \   00004154   0xD101             BNE.N    ??RoadBrd_ParseString_635
   3815                                                flag = 0;
   \   00004156   0x2000             MOVS     R0,#+0
   \   00004158   0x902E             STR      R0,[SP, #+184]
   3816                                            }
   \                     ??RoadBrd_ParseString_635: (+1)
   \   0000415A   0x1C7F             ADDS     R7,R7,#+1
   \   0000415C   0xE7F2             B.N      ??RoadBrd_ParseString_633
   3817                                          } // EndIf (Size > 5)
   3818                                          else
   3819                                            flag = 0;
   \                     ??RoadBrd_ParseString_632: (+1)
   \   0000415E   0x2000             MOVS     R0,#+0
   \   00004160   0x902E             STR      R0,[SP, #+184]
   3820                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_634: (+1)
   \   00004162   0x982E             LDR      R0,[SP, #+184]
   \   00004164   0x2800             CMP      R0,#+0
   \   00004166   0xD113             BNE.N    ??RoadBrd_ParseString_636
   3821                                          {
   3822                                            // Is this a BLE Operation?
   3823                                            if ( BLE_Flag )
   \   00004168   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000416A   0x2D00             CMP      R5,#+0
   \   0000416C   0xD00A             BEQ.N    ??RoadBrd_ParseString_637
   3824                                            {
   3825                                              // Yes...Build and Send BLE Response NOW.
   3826                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   0000416E   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \   00004172   0xA80B             ADD      R0,SP,#+44
   \   00004174   0x.... 0x....      BL       strcpy
   3827                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004178   0xA80B             ADD      R0,SP,#+44
   \   0000417A   0x.... 0x....      BL       strlen
   \   0000417E   0xA90B             ADD      R1,SP,#+44
   \   00004180   0x.... 0x....      BL       BGM111_Transmit
   3828                                            }
   3829                                            strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_637: (+1)
   \   00004184   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   00004188   0xA80B             ADD      R0,SP,#+44
   \   0000418A   0x.... 0x....      BL       strcpy
   \   0000418E   0xE03B             B.N      ??RoadBrd_ParseString_631
   3830                                          }
   3831                                          else
   3832                                          {
   3833                                            // 3. Grab remaining string and convert to integer.
   3834                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_636: (+1)
   \   00004190   0x1D60             ADDS     R0,R4,#+5
   \   00004192   0x9030             STR      R0,[SP, #+192]
   3835                                            strcpy(tempstr, tempPstr);
   \   00004194   0x9930             LDR      R1,[SP, #+192]
   \   00004196   0xA852             ADD      R0,SP,#+328
   \   00004198   0x.... 0x....      BL       strcpy
   3836                                            new_value = atoi( tempstr );
   \   0000419C   0xA852             ADD      R0,SP,#+328
   \   0000419E   0x.... 0x....      BL       atoi
   \   000041A2   0x902F             STR      R0,[SP, #+188]
   3837                                            if((new_value > 9999) ||
   3838                                               (new_value < 0))
   \   000041A4   0x982F             LDR      R0,[SP, #+188]
   \   000041A6   0xF242 0x7110      MOVW     R1,#+10000
   \   000041AA   0x4288             CMP      R0,R1
   \   000041AC   0xDA02             BGE.N    ??RoadBrd_ParseString_638
   \   000041AE   0x982F             LDR      R0,[SP, #+188]
   \   000041B0   0x2800             CMP      R0,#+0
   \   000041B2   0xD513             BPL.N    ??RoadBrd_ParseString_639
   3839                                            {
   3840                                              // Is this a BLE Operation?
   3841                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_638: (+1)
   \   000041B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041B6   0x2D00             CMP      R5,#+0
   \   000041B8   0xD00A             BEQ.N    ??RoadBrd_ParseString_640
   3842                                              {
   3843                                                // Yes...Build and Send BLE Response NOW.
   3844                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   000041BA   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \   000041BE   0xA80B             ADD      R0,SP,#+44
   \   000041C0   0x.... 0x....      BL       strcpy
   3845                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000041C4   0xA80B             ADD      R0,SP,#+44
   \   000041C6   0x.... 0x....      BL       strlen
   \   000041CA   0xA90B             ADD      R1,SP,#+44
   \   000041CC   0x.... 0x....      BL       BGM111_Transmit
   3846                                              }
   3847                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_640: (+1)
   \   000041D0   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   000041D4   0xA80B             ADD      R0,SP,#+44
   \   000041D6   0x.... 0x....      BL       strcpy
   \   000041DA   0xE015             B.N      ??RoadBrd_ParseString_631
   3848                                            }
   3849                                            else
   3850                                            {
   3851                                              // Time to set new Road Sound Sample Rate.
   3852                                              RoadBrd_Set_SnsrTickCnt( new_value );
   \                     ??RoadBrd_ParseString_639: (+1)
   \   000041DC   0x982F             LDR      R0,[SP, #+188]
   \   000041DE   0x.... 0x....      BL       RoadBrd_Set_SnsrTickCnt
   3853                                              // Is this a BLE Operation?
   3854                                              if ( BLE_Flag )
   \   000041E2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041E4   0x2D00             CMP      R5,#+0
   \   000041E6   0xD00A             BEQ.N    ??RoadBrd_ParseString_641
   3855                                              {
   3856                                                // Yes...Build and Send BLE Response NOW.
   3857                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSS_ACK</STATUS>");
   \   000041E8   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   000041EC   0xA80B             ADD      R0,SP,#+44
   \   000041EE   0x.... 0x....      BL       strcpy
   3858                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000041F2   0xA80B             ADD      R0,SP,#+44
   \   000041F4   0x.... 0x....      BL       strlen
   \   000041F8   0xA90B             ADD      R1,SP,#+44
   \   000041FA   0x.... 0x....      BL       BGM111_Transmit
   3859                                              }
   3860                                              // NOW, Build Data String..
   3861                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_641: (+1)
   \   000041FE   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00004202   0xA80B             ADD      R0,SP,#+44
   \   00004204   0x.... 0x....      BL       sprintf
   3862                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3863                                          } // EndElse (flag == 0)
   3864                                        } // EndElse (tempBffr[4]!=':')
   3865                                        break;
   \                     ??RoadBrd_ParseString_631: (+1)
   \   00004208   0xE116             B.N      ??RoadBrd_ParseString_628
   3866          //------------------
   3867                                      case 'T':
   3868                                        //Key Flash Variable Set TACK Limit(Multiple of Road Sound Throttles).
   3869                                        // Step 1. Validate format.
   3870                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_613: (+1)
   \   0000420A   0x7920             LDRB     R0,[R4, #+4]
   \   0000420C   0x283A             CMP      R0,#+58
   \   0000420E   0xD017             BEQ.N    ??RoadBrd_ParseString_642
   3871                                        {
   3872                                          // Is this a BLE Operation?
   3873                                          if ( BLE_Flag )
   \   00004210   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004212   0x2D00             CMP      R5,#+0
   \   00004214   0xD00A             BEQ.N    ??RoadBrd_ParseString_643
   3874                                          {
   3875                                            // Yes...Build and Send BLE Response NOW.
   3876                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_SYNTAX</STATUS>");
   \   00004216   0x.... 0x....      LDR.W    R1,??DataTable4_7
   \   0000421A   0xA80B             ADD      R0,SP,#+44
   \   0000421C   0x.... 0x....      BL       strcpy
   3877                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004220   0xA80B             ADD      R0,SP,#+44
   \   00004222   0x.... 0x....      BL       strlen
   \   00004226   0xA90B             ADD      R1,SP,#+44
   \   00004228   0x.... 0x....      BL       BGM111_Transmit
   3878                                          }
   3879                                          strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_643: (+1)
   \   0000422C   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   00004230   0xA80B             ADD      R0,SP,#+44
   \   00004232   0x.... 0x....      BL       strcpy
   \   00004236   0xE071             B.N      ??RoadBrd_ParseString_644
   \                     ??RoadBrd_ParseString_547:
   \   00004238   0x........         DC32     ?_249
   \   0000423C   0x........         DC32     ?_250
   3880                                        } // Endif (tempBffr[4]!=':')
   3881                                        else
   3882                                        {
   3883                                          // 2. Verify if remaining string is digits
   3884                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_642: (+1)
   \   00004240   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004244   0x2806             CMP      R0,#+6
   \   00004246   0xDB10             BLT.N    ??RoadBrd_ParseString_645
   3885                                          {
   3886                                            flag = 1;
   \   00004248   0x2001             MOVS     R0,#+1
   \   0000424A   0x902E             STR      R0,[SP, #+184]
   3887                                            for (x=5; x< Size; x++)
   \   0000424C   0x2005             MOVS     R0,#+5
   \   0000424E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_646: (+1)
   \   00004250   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004254   0x4287             CMP      R7,R0
   \   00004256   0xDA0A             BGE.N    ??RoadBrd_ParseString_647
   3888                                            {
   3889                                              if (isdigit(tempBffr[x]) == 0)
   \   00004258   0x5DE0             LDRB     R0,[R4, R7]
   \   0000425A   0x.... 0x....      BL       isdigit
   \   0000425E   0x2800             CMP      R0,#+0
   \   00004260   0xD101             BNE.N    ??RoadBrd_ParseString_648
   3890                                                flag = 0;
   \   00004262   0x2000             MOVS     R0,#+0
   \   00004264   0x902E             STR      R0,[SP, #+184]
   3891                                            }
   \                     ??RoadBrd_ParseString_648: (+1)
   \   00004266   0x1C7F             ADDS     R7,R7,#+1
   \   00004268   0xE7F2             B.N      ??RoadBrd_ParseString_646
   3892                                          } // EndIf (Size > 5)
   3893                                          else
   3894                                            flag = 0;
   \                     ??RoadBrd_ParseString_645: (+1)
   \   0000426A   0x2000             MOVS     R0,#+0
   \   0000426C   0x902E             STR      R0,[SP, #+184]
   3895                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_647: (+1)
   \   0000426E   0x982E             LDR      R0,[SP, #+184]
   \   00004270   0x2800             CMP      R0,#+0
   \   00004272   0xD115             BNE.N    ??RoadBrd_ParseString_649
   3896                                          {
   3897                                            // Is this a BLE Operation?
   3898                                            if ( BLE_Flag )
   \   00004274   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004276   0x2D00             CMP      R5,#+0
   \   00004278   0xD00A             BEQ.N    ??RoadBrd_ParseString_650
   3899                                            {
   3900                                              // Yes...Build and Send BLE Response NOW.
   3901                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   0000427A   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   0000427E   0xA80B             ADD      R0,SP,#+44
   \   00004280   0x.... 0x....      BL       strcpy
   3902                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004284   0xA80B             ADD      R0,SP,#+44
   \   00004286   0x.... 0x....      BL       strlen
   \   0000428A   0xA90B             ADD      R1,SP,#+44
   \   0000428C   0x.... 0x....      BL       BGM111_Transmit
   3903                                            }
   3904                                            strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_650: (+1)
   \   00004290   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \   00004294   0xA80B             ADD      R0,SP,#+44
   \   00004296   0x.... 0x....      BL       strcpy
   \   0000429A   0xE03F             B.N      ??RoadBrd_ParseString_644
   \                     ??RoadBrd_ParseString_549:
   \   0000429C   0x........         DC32     ?_251
   3905                                          }
   3906                                          else
   3907                                          {
   3908                                            // 3. Grab remaining string and convert to integer.
   3909                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_649: (+1)
   \   000042A0   0x1D60             ADDS     R0,R4,#+5
   \   000042A2   0x9030             STR      R0,[SP, #+192]
   3910                                            strcpy(tempstr, tempPstr);
   \   000042A4   0x9930             LDR      R1,[SP, #+192]
   \   000042A6   0xA852             ADD      R0,SP,#+328
   \   000042A8   0x.... 0x....      BL       strcpy
   3911                                            new_value = atoi( tempstr );
   \   000042AC   0xA852             ADD      R0,SP,#+328
   \   000042AE   0x.... 0x....      BL       atoi
   \   000042B2   0x902F             STR      R0,[SP, #+188]
   3912                                            if((new_value > 9999) ||
   3913                                               (new_value < 0))
   \   000042B4   0x982F             LDR      R0,[SP, #+188]
   \   000042B6   0xF242 0x7110      MOVW     R1,#+10000
   \   000042BA   0x4288             CMP      R0,R1
   \   000042BC   0xDA02             BGE.N    ??RoadBrd_ParseString_651
   \   000042BE   0x982F             LDR      R0,[SP, #+188]
   \   000042C0   0x2800             CMP      R0,#+0
   \   000042C2   0xD515             BPL.N    ??RoadBrd_ParseString_652
   3914                                            {
   3915                                              // Is this a BLE Operation?
   3916                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_651: (+1)
   \   000042C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000042C6   0x2D00             CMP      R5,#+0
   \   000042C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_653
   3917                                              {
   3918                                                // Yes...Build and Send BLE Response NOW.
   3919                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   000042CA   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   000042CE   0xA80B             ADD      R0,SP,#+44
   \   000042D0   0x.... 0x....      BL       strcpy
   3920                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000042D4   0xA80B             ADD      R0,SP,#+44
   \   000042D6   0x.... 0x....      BL       strlen
   \   000042DA   0xA90B             ADD      R1,SP,#+44
   \   000042DC   0x.... 0x....      BL       BGM111_Transmit
   3921                                              }
   3922                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_653: (+1)
   \   000042E0   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   000042E4   0xA80B             ADD      R0,SP,#+44
   \   000042E6   0x.... 0x....      BL       strcpy
   \   000042EA   0xE017             B.N      ??RoadBrd_ParseString_644
   \                     ??RoadBrd_ParseString_550:
   \   000042EC   0x........         DC32     ?_252
   3923                                            }
   3924                                            else
   3925                                            {
   3926                                              // Time to set new TACK Limit.
   3927                                              RoadBrd_Set_TackLimit( new_value );
   \                     ??RoadBrd_ParseString_652: (+1)
   \   000042F0   0x982F             LDR      R0,[SP, #+188]
   \   000042F2   0x.... 0x....      BL       RoadBrd_Set_TackLimit
   3928                                              // Is this a BLE Operation?
   3929                                              if ( BLE_Flag )
   \   000042F6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000042F8   0x2D00             CMP      R5,#+0
   \   000042FA   0xD00A             BEQ.N    ??RoadBrd_ParseString_654
   3930                                              {
   3931                                                // Yes...Build and Send BLE Response NOW.
   3932                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKST_ACK</STATUS>");
   \   000042FC   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   00004300   0xA80B             ADD      R0,SP,#+44
   \   00004302   0x.... 0x....      BL       strcpy
   3933                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004306   0xA80B             ADD      R0,SP,#+44
   \   00004308   0x.... 0x....      BL       strlen
   \   0000430C   0xA90B             ADD      R1,SP,#+44
   \   0000430E   0x.... 0x....      BL       BGM111_Transmit
   3934                                              }
   3935                                              // NOW, Build Data String..
   3936                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_654: (+1)
   \   00004312   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00004316   0xA80B             ADD      R0,SP,#+44
   \   00004318   0x.... 0x....      BL       sprintf
   3937                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3938                                          } // EndElse (flag == 0)
   3939                                        } // EndElse (tempBffr[4]!=':')
   3940                                        break;
   \                     ??RoadBrd_ParseString_644: (+1)
   \   0000431C   0xE08C             B.N      ??RoadBrd_ParseString_628
   3941                                      case 'B':
   3942                                        //Key Flash Variable Set Boot Delay(Seconds).
   3943                                        // Step 1. Validate format.
   3944                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_610: (+1)
   \   0000431E   0x7920             LDRB     R0,[R4, #+4]
   \   00004320   0x283A             CMP      R0,#+58
   \   00004322   0xD017             BEQ.N    ??RoadBrd_ParseString_655
   3945                                        {
   3946                                          // Is this a BLE Operation?
   3947                                          if ( BLE_Flag )
   \   00004324   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004326   0x2D00             CMP      R5,#+0
   \   00004328   0xD00A             BEQ.N    ??RoadBrd_ParseString_656
   3948                                          {
   3949                                            // Yes...Build and Send BLE Response NOW.
   3950                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_SYNTAX</STATUS>");
   \   0000432A   0x.... 0x....      LDR.W    R1,??DataTable4_12
   \   0000432E   0xA80B             ADD      R0,SP,#+44
   \   00004330   0x.... 0x....      BL       strcpy
   3951                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004334   0xA80B             ADD      R0,SP,#+44
   \   00004336   0x.... 0x....      BL       strlen
   \   0000433A   0xA90B             ADD      R1,SP,#+44
   \   0000433C   0x.... 0x....      BL       BGM111_Transmit
   3952                                          }
   3953                                          strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_656: (+1)
   \   00004340   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   00004344   0xA80B             ADD      R0,SP,#+44
   \   00004346   0x.... 0x....      BL       strcpy
   \   0000434A   0xE06F             B.N      ??RoadBrd_ParseString_657
   \                     ??RoadBrd_ParseString_552:
   \   0000434C   0x........         DC32     ?_253
   \   00004350   0x........         DC32     ?_254
   3954                                        } // Endif (tempBffr[4]!=':')
   3955                                        else
   3956                                        {
   3957                                          // 2. Verify if remaining string is digits
   3958                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_655: (+1)
   \   00004354   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004358   0x2806             CMP      R0,#+6
   \   0000435A   0xDB10             BLT.N    ??RoadBrd_ParseString_658
   3959                                          {
   3960                                            flag = 1;
   \   0000435C   0x2001             MOVS     R0,#+1
   \   0000435E   0x902E             STR      R0,[SP, #+184]
   3961                                            for (x=5; x< Size; x++)
   \   00004360   0x2005             MOVS     R0,#+5
   \   00004362   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_659: (+1)
   \   00004364   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004368   0x4287             CMP      R7,R0
   \   0000436A   0xDA0A             BGE.N    ??RoadBrd_ParseString_660
   3962                                            {
   3963                                              if (isdigit(tempBffr[x]) == 0)
   \   0000436C   0x5DE0             LDRB     R0,[R4, R7]
   \   0000436E   0x.... 0x....      BL       isdigit
   \   00004372   0x2800             CMP      R0,#+0
   \   00004374   0xD101             BNE.N    ??RoadBrd_ParseString_661
   3964                                                flag = 0;
   \   00004376   0x2000             MOVS     R0,#+0
   \   00004378   0x902E             STR      R0,[SP, #+184]
   3965                                            }
   \                     ??RoadBrd_ParseString_661: (+1)
   \   0000437A   0x1C7F             ADDS     R7,R7,#+1
   \   0000437C   0xE7F2             B.N      ??RoadBrd_ParseString_659
   3966                                          } // EndIf (Size > 5)
   3967                                          else
   3968                                            flag = 0;
   \                     ??RoadBrd_ParseString_658: (+1)
   \   0000437E   0x2000             MOVS     R0,#+0
   \   00004380   0x902E             STR      R0,[SP, #+184]
   3969                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_660: (+1)
   \   00004382   0x982E             LDR      R0,[SP, #+184]
   \   00004384   0x2800             CMP      R0,#+0
   \   00004386   0xD113             BNE.N    ??RoadBrd_ParseString_662
   3970                                          {
   3971                                            // Is this a BLE Operation?
   3972                                            if ( BLE_Flag )
   \   00004388   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000438A   0x2D00             CMP      R5,#+0
   \   0000438C   0xD00A             BEQ.N    ??RoadBrd_ParseString_663
   3973                                            {
   3974                                              // Yes...Build and Send BLE Response NOW.
   3975                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   0000438E   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   00004392   0xA80B             ADD      R0,SP,#+44
   \   00004394   0x.... 0x....      BL       strcpy
   3976                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004398   0xA80B             ADD      R0,SP,#+44
   \   0000439A   0x.... 0x....      BL       strlen
   \   0000439E   0xA90B             ADD      R1,SP,#+44
   \   000043A0   0x.... 0x....      BL       BGM111_Transmit
   3977                                            }
   3978                                            strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_663: (+1)
   \   000043A4   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   000043A8   0xA80B             ADD      R0,SP,#+44
   \   000043AA   0x.... 0x....      BL       strcpy
   \   000043AE   0xE03D             B.N      ??RoadBrd_ParseString_657
   3979                                          }
   3980                                          else
   3981                                          {
   3982                                            // 3. Grab remaining string and convert to integer.
   3983                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_662: (+1)
   \   000043B0   0x1D60             ADDS     R0,R4,#+5
   \   000043B2   0x9030             STR      R0,[SP, #+192]
   3984                                            strcpy(tempstr, tempPstr);
   \   000043B4   0x9930             LDR      R1,[SP, #+192]
   \   000043B6   0xA852             ADD      R0,SP,#+328
   \   000043B8   0x.... 0x....      BL       strcpy
   3985                                            new_value = atoi( tempstr );
   \   000043BC   0xA852             ADD      R0,SP,#+328
   \   000043BE   0x.... 0x....      BL       atoi
   \   000043C2   0x902F             STR      R0,[SP, #+188]
   3986                                            if((new_value > 999) ||
   3987                                               (new_value < 0))
   \   000043C4   0x982F             LDR      R0,[SP, #+188]
   \   000043C6   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000043CA   0xDA02             BGE.N    ??RoadBrd_ParseString_664
   \   000043CC   0x982F             LDR      R0,[SP, #+188]
   \   000043CE   0x2800             CMP      R0,#+0
   \   000043D0   0xD516             BPL.N    ??RoadBrd_ParseString_665
   3988                                            {
   3989                                              // Is this a BLE Operation?
   3990                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_664: (+1)
   \   000043D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000043D4   0x2D00             CMP      R5,#+0
   \   000043D6   0xD00A             BEQ.N    ??RoadBrd_ParseString_666
   3991                                              {
   3992                                                // Yes...Build and Send BLE Response NOW.
   3993                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   000043D8   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   000043DC   0xA80B             ADD      R0,SP,#+44
   \   000043DE   0x.... 0x....      BL       strcpy
   3994                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000043E2   0xA80B             ADD      R0,SP,#+44
   \   000043E4   0x.... 0x....      BL       strlen
   \   000043E8   0xA90B             ADD      R1,SP,#+44
   \   000043EA   0x.... 0x....      BL       BGM111_Transmit
   3995                                              }
   3996                                              strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_666: (+1)
   \   000043EE   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   000043F2   0xA80B             ADD      R0,SP,#+44
   \   000043F4   0x.... 0x....      BL       strcpy
   \   000043F8   0xE018             B.N      ??RoadBrd_ParseString_657
   \   000043FA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_554:
   \   000043FC   0x........         DC32     ?_255
   3997                                            }
   3998                                            else
   3999                                            {
   4000                                              // Time to set new Boot Delay.
   4001                                              RoadBrd_Set_BootDelay( new_value );
   \                     ??RoadBrd_ParseString_665: (+1)
   \   00004400   0x982F             LDR      R0,[SP, #+188]
   \   00004402   0x.... 0x....      BL       RoadBrd_Set_BootDelay
   4002                                              // Is this a BLE Operation?
   4003                                              if ( BLE_Flag )
   \   00004406   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004408   0x2D00             CMP      R5,#+0
   \   0000440A   0xD00A             BEQ.N    ??RoadBrd_ParseString_667
   4004                                              {
   4005                                                // Yes...Build and Send BLE Response NOW.
   4006                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSB_ACK</STATUS>");
   \   0000440C   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   00004410   0xA80B             ADD      R0,SP,#+44
   \   00004412   0x.... 0x....      BL       strcpy
   4007                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004416   0xA80B             ADD      R0,SP,#+44
   \   00004418   0x.... 0x....      BL       strlen
   \   0000441C   0xA90B             ADD      R1,SP,#+44
   \   0000441E   0x.... 0x....      BL       BGM111_Transmit
   4008                                              }
   4009                                              // NOW, Build Data String..
   4010                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_667: (+1)
   \   00004422   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00004426   0xA80B             ADD      R0,SP,#+44
   \   00004428   0x.... 0x....      BL       sprintf
   4011                                            } // EndElse ((new_value > 999) || (new_value < 0))
   4012                                          } // EndElse (flag == 0)
   4013                                        } // EndElse (tempBffr[4]!=':')
   4014                                        break;
   \                     ??RoadBrd_ParseString_657: (+1)
   \   0000442C   0xE004             B.N      ??RoadBrd_ParseString_628
   4015                                      default:
   4016                                        strcpy( (char *)tempBffr2, "TKS ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_614: (+1)
   \   0000442E   0x.... 0x....      LDR.W    R1,??DataTable4_17
   \   00004432   0xA80B             ADD      R0,SP,#+44
   \   00004434   0x.... 0x....      BL       strcpy
   4017                                        break;
   4018                                    } // EndSwitch ( tempBffr[3] )
   4019                                    break;
   \                     ??RoadBrd_ParseString_628: (+1)
   \   00004438   0xE0CB             B.N      ??RoadBrd_ParseString_606
   \   0000443A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_555:
   \   0000443C   0x........         DC32     ?_256
   \   00004440   0x........         DC32     ?_257
   4020          //------------------
   4021                                  case 'R':
   4022                                    //Key Flash Variable Read Command
   4023                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_607: (+1)
   \   00004444   0x78E0             LDRB     R0,[R4, #+3]
   \   00004446   0x2842             CMP      R0,#+66
   \   00004448   0xF000 0x807E      BEQ.W    ??RoadBrd_ParseString_668
   \   0000444C   0x2852             CMP      R0,#+82
   \   0000444E   0xD004             BEQ.N    ??RoadBrd_ParseString_669
   \   00004450   0x2853             CMP      R0,#+83
   \   00004452   0xD031             BEQ.N    ??RoadBrd_ParseString_670
   \   00004454   0x2854             CMP      R0,#+84
   \   00004456   0xD05D             BEQ.N    ??RoadBrd_ParseString_671
   \   00004458   0xE092             B.N      ??RoadBrd_ParseString_672
   4024                                    {
   4025          //------------------
   4026                                      case 'R':
   4027                                        //Key Flash Variable Read Road Sound Sample Rate Command.
   4028                                        // Is this a BLE Operation?
   4029                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_669: (+1)
   \   0000445A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000445C   0x2D00             CMP      R5,#+0
   \   0000445E   0xD016             BEQ.N    ??RoadBrd_ParseString_673
   4030                                        {
   4031                                          // Yes...Build and Send BLE Response NOW.
   4032                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRR:%3.1f</STATUS>", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \   00004460   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00004464   0x.... 0x....      BL       __aeabi_ui2f
   \   00004468   0x.... 0x....      LDR.W    R1,??DataTable4_18  ;; 0x41200000
   \   0000446C   0x.... 0x....      BL       __aeabi_fdiv
   \   00004470   0x.... 0x....      BL       __aeabi_f2d
   \   00004474   0x0002             MOVS     R2,R0
   \   00004476   0x000B             MOVS     R3,R1
   \   00004478   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   0000447C   0xA80B             ADD      R0,SP,#+44
   \   0000447E   0x.... 0x....      BL       sprintf
   4033                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004482   0xA80B             ADD      R0,SP,#+44
   \   00004484   0x.... 0x....      BL       strlen
   \   00004488   0xA90B             ADD      R1,SP,#+44
   \   0000448A   0x.... 0x....      BL       BGM111_Transmit
   4034                                        }
   4035                                        sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??RoadBrd_ParseString_673: (+1)
   \   0000448E   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00004492   0x.... 0x....      BL       __aeabi_ui2f
   \   00004496   0x.... 0x....      LDR.W    R1,??DataTable4_18  ;; 0x41200000
   \   0000449A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000449E   0x.... 0x....      BL       __aeabi_f2d
   \   000044A2   0x0002             MOVS     R2,R0
   \   000044A4   0x000B             MOVS     R3,R1
   \   000044A6   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   000044AA   0xA80B             ADD      R0,SP,#+44
   \   000044AC   0x.... 0x....      BL       sprintf
   4036                                        break;
   \   000044B0   0xE079             B.N      ??RoadBrd_ParseString_674
   \   000044B2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_557:
   \   000044B4   0x........         DC32     ?_258
   4037          //------------------
   4038                                      case 'S':
   4039                                        //Key Flash Variable Read Sensor Sample Rate Command.
   4040                                        // Is this a BLE Operation?
   4041                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_670: (+1)
   \   000044B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000044BA   0x2D00             CMP      R5,#+0
   \   000044BC   0xD016             BEQ.N    ??RoadBrd_ParseString_675
   4042                                        {
   4043                                          // Yes...Build and Send BLE Response NOW.
   4044                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRS:%3.1f</STATUS>", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \   000044BE   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   000044C2   0x.... 0x....      BL       __aeabi_ui2f
   \   000044C6   0x.... 0x....      LDR.W    R1,??DataTable4_18  ;; 0x41200000
   \   000044CA   0x.... 0x....      BL       __aeabi_fdiv
   \   000044CE   0x.... 0x....      BL       __aeabi_f2d
   \   000044D2   0x0002             MOVS     R2,R0
   \   000044D4   0x000B             MOVS     R3,R1
   \   000044D6   0x.... 0x....      LDR.W    R1,??DataTable4_21
   \   000044DA   0xA80B             ADD      R0,SP,#+44
   \   000044DC   0x.... 0x....      BL       sprintf
   4045                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000044E0   0xA80B             ADD      R0,SP,#+44
   \   000044E2   0x.... 0x....      BL       strlen
   \   000044E6   0xA90B             ADD      R1,SP,#+44
   \   000044E8   0x.... 0x....      BL       BGM111_Transmit
   4046                                        }
   4047                                        sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??RoadBrd_ParseString_675: (+1)
   \   000044EC   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   000044F0   0x.... 0x....      BL       __aeabi_ui2f
   \   000044F4   0x.... 0x....      LDR.W    R1,??DataTable4_18  ;; 0x41200000
   \   000044F8   0x.... 0x....      BL       __aeabi_fdiv
   \   000044FC   0x.... 0x....      BL       __aeabi_f2d
   \   00004500   0x0002             MOVS     R2,R0
   \   00004502   0x000B             MOVS     R3,R1
   \   00004504   0x.... 0x....      LDR.W    R1,??DataTable4_22
   \   00004508   0xA80B             ADD      R0,SP,#+44
   \   0000450A   0x.... 0x....      BL       sprintf
   4048                                        break;
   \   0000450E   0xE04A             B.N      ??RoadBrd_ParseString_674
   \                     ??RoadBrd_ParseString_559:
   \   00004510   0x........         DC32     ?_259
   4049          //------------------
   4050                                      case 'T':
   4051                                        //Key Flash Variable Read TACK Limit(Multiple of Road Sound Throttles).
   4052                                        // Is this a BLE Operation?
   4053                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_671: (+1)
   \   00004514   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004516   0x2D00             CMP      R5,#+0
   \   00004518   0xD00D             BEQ.N    ??RoadBrd_ParseString_676
   4054                                        {
   4055                                          // Yes...Build and Send BLE Response NOW.
   4056                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRT:%d</STATUS>", RoadBrd_Get_TackLimit());
   \   0000451A   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   0000451E   0x0002             MOVS     R2,R0
   \   00004520   0x.... 0x....      LDR.W    R1,??DataTable4_23
   \   00004524   0xA80B             ADD      R0,SP,#+44
   \   00004526   0x.... 0x....      BL       sprintf
   4057                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000452A   0xA80B             ADD      R0,SP,#+44
   \   0000452C   0x.... 0x....      BL       strlen
   \   00004530   0xA90B             ADD      R1,SP,#+44
   \   00004532   0x.... 0x....      BL       BGM111_Transmit
   4058                                        }
   4059                                        sprintf( (char *)tempBffr2, "TACK Limit: %d.\r\n\r\n> ", RoadBrd_Get_TackLimit());
   \                     ??RoadBrd_ParseString_676: (+1)
   \   00004536   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   0000453A   0x0002             MOVS     R2,R0
   \   0000453C   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   00004540   0xA80B             ADD      R0,SP,#+44
   \   00004542   0x.... 0x....      BL       sprintf
   4060                                        break;
   \   00004546   0xE02E             B.N      ??RoadBrd_ParseString_674
   4061          //------------------
   4062                                      case 'B':
   4063                                        //Key Flash Variable Read Boot Delay.(Seconds).
   4064                                        // Is this a BLE Operation?
   4065                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_668: (+1)
   \   00004548   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000454A   0x2D00             CMP      R5,#+0
   \   0000454C   0xD00D             BEQ.N    ??RoadBrd_ParseString_677
   4066                                        {
   4067                                          // Yes...Build and Send BLE Response NOW.
   4068                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRB:%d</STATUS>", RoadBrd_Get_BootDelay());
   \   0000454E   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   00004552   0x0002             MOVS     R2,R0
   \   00004554   0x.... 0x....      LDR.W    R1,??DataTable4_25
   \   00004558   0xA80B             ADD      R0,SP,#+44
   \   0000455A   0x.... 0x....      BL       sprintf
   4069                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000455E   0xA80B             ADD      R0,SP,#+44
   \   00004560   0x.... 0x....      BL       strlen
   \   00004564   0xA90B             ADD      R1,SP,#+44
   \   00004566   0x.... 0x....      BL       BGM111_Transmit
   4070                                        }
   4071                                        sprintf( (char *)tempBffr2, "Boot Delay: %d Seconds.\r\n\r\n> ", RoadBrd_Get_BootDelay());
   \                     ??RoadBrd_ParseString_677: (+1)
   \   0000456A   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   0000456E   0x0002             MOVS     R2,R0
   \   00004570   0x.... 0x....      LDR.W    R1,??DataTable4_26
   \   00004574   0xA80B             ADD      R0,SP,#+44
   \   00004576   0x.... 0x....      BL       sprintf
   4072                                        break;
   \   0000457A   0xE014             B.N      ??RoadBrd_ParseString_674
   \                     ??RoadBrd_ParseString_560:
   \   0000457C   0x........         DC32     ?_260
   4073                                      default:
   4074                                        // Is this a BLE Operation?
   4075                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_672: (+1)
   \   00004580   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004582   0x2D00             CMP      R5,#+0
   \   00004584   0xD00A             BEQ.N    ??RoadBrd_ParseString_678
   4076                                        {
   4077                                          // Yes...Build and Send BLE Response NOW.
   4078                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TKR_SYNTAX</STATUS>");
   \   00004586   0x.... 0x....      LDR.W    R1,??DataTable4_27
   \   0000458A   0xA80B             ADD      R0,SP,#+44
   \   0000458C   0x.... 0x....      BL       strcpy
   4079                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004590   0xA80B             ADD      R0,SP,#+44
   \   00004592   0x.... 0x....      BL       strlen
   \   00004596   0xA90B             ADD      R1,SP,#+44
   \   00004598   0x.... 0x....      BL       BGM111_Transmit
   4080                                        }
   4081                                        strcpy( (char *)tempBffr2, "TKR ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_678: (+1)
   \   0000459C   0x.... 0x....      LDR.W    R1,??DataTable4_28
   \   000045A0   0xA80B             ADD      R0,SP,#+44
   \   000045A2   0x.... 0x....      BL       strcpy
   4082                                        break;
   4083                                    } // EndSwitch ( tempBffr[3] )
   4084                                    break;
   \                     ??RoadBrd_ParseString_674: (+1)
   \   000045A6   0xE014             B.N      ??RoadBrd_ParseString_606
   \                     ??RoadBrd_ParseString_562:
   \   000045A8   0x........         DC32     ?_261
   4085                                    // Is this a BLE Operation?
   4086                                  default:
   4087                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_608: (+1)
   \   000045AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045AE   0x2D00             CMP      R5,#+0
   \   000045B0   0xD00A             BEQ.N    ??RoadBrd_ParseString_679
   4088                                    {
   4089                                      // Yes...Build and Send BLE Response NOW.
   4090                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   000045B2   0x.... 0x....      LDR.W    R1,??DataTable3_9
   \   000045B6   0xA80B             ADD      R0,SP,#+44
   \   000045B8   0x.... 0x....      BL       strcpy
   4091                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045BC   0xA80B             ADD      R0,SP,#+44
   \   000045BE   0x.... 0x....      BL       strlen
   \   000045C2   0xA90B             ADD      R1,SP,#+44
   \   000045C4   0x.... 0x....      BL       BGM111_Transmit
   4092                                    }
   4093                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_679: (+1)
   \   000045C8   0x.... 0x....      LDR.W    R1,??DataTable4_29
   \   000045CC   0xA80B             ADD      R0,SP,#+44
   \   000045CE   0x.... 0x....      BL       strcpy
   4094                                    break;
   4095                                } //EndSwitch ( tempBffr[2] )
   4096                              } //EndElse (Size < 3)
   4097                              break;
   \                     ??RoadBrd_ParseString_606: (+1)
   \   000045D2   0xE23E             B.N      ??RoadBrd_ParseString_289
   4098          //++++++++++++++++++++++++++++++++++++++++++  Units Enable/Disable Commands.
   4099                            case 'U':
   4100                              // Key Flash Variable Commands.
   4101                              // Test Size to make sure we have enough Characters for this operation
   4102                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_299: (+1)
   \   000045D4   0x2000             MOVS     R0,#+0
   \   000045D6   0x0006             MOVS     R6,R0
   4103                              if (Size < 3)
   \   000045D8   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000045DC   0x2803             CMP      R0,#+3
   \   000045DE   0xDA15             BGE.N    ??RoadBrd_ParseString_680
   4104                              {
   4105                                // Is this a BLE Operation?
   4106                                if ( BLE_Flag )
   \   000045E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045E2   0x2D00             CMP      R5,#+0
   \   000045E4   0xD00A             BEQ.N    ??RoadBrd_ParseString_681
   4107                                {
   4108                                  // Yes...Build and Send BLE Response NOW.
   4109                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   000045E6   0x.... 0x....      LDR.W    R1,??DataTable4_30
   \   000045EA   0xA80B             ADD      R0,SP,#+44
   \   000045EC   0x.... 0x....      BL       strcpy
   4110                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045F0   0xA80B             ADD      R0,SP,#+44
   \   000045F2   0x.... 0x....      BL       strlen
   \   000045F6   0xA90B             ADD      R1,SP,#+44
   \   000045F8   0x.... 0x....      BL       BGM111_Transmit
   4111                                }
   4112                                strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_681: (+1)
   \   000045FC   0x.... 0x....      LDR.W    R1,??DataTable4_31
   \   00004600   0xA80B             ADD      R0,SP,#+44
   \   00004602   0x.... 0x....      BL       strcpy
   \   00004606   0xE04C             B.N      ??RoadBrd_ParseString_682
   \                     ??RoadBrd_ParseString_563:
   \   00004608   0x........         DC32     ?_262
   4113                              }
   4114                              else
   4115                              {
   4116                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_680: (+1)
   \   0000460C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000460E   0x2844             CMP      R0,#+68
   \   00004610   0xD01C             BEQ.N    ??RoadBrd_ParseString_683
   \   00004612   0x2845             CMP      R0,#+69
   \   00004614   0xD132             BNE.N    ??RoadBrd_ParseString_684
   4117                                {
   4118          //------------------
   4119                                  case 'E':
   4120                                    //Units Enable Command.
   4121                                    // Is this a BLE Operation?
   4122                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_685: (+1)
   \   00004616   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004618   0x2D00             CMP      R5,#+0
   \   0000461A   0xD00A             BEQ.N    ??RoadBrd_ParseString_686
   4123                                    {
   4124                                      // Yes...Build and Send BLE Response NOW.
   4125                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUE_ACK</STATUS>");
   \   0000461C   0x.... 0x....      LDR.W    R1,??DataTable4_32
   \   00004620   0xA80B             ADD      R0,SP,#+44
   \   00004622   0x.... 0x....      BL       strcpy
   4126                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004626   0xA80B             ADD      R0,SP,#+44
   \   00004628   0x.... 0x....      BL       strlen
   \   0000462C   0xA90B             ADD      R1,SP,#+44
   \   0000462E   0x.... 0x....      BL       BGM111_Transmit
   4127                                    }
   4128                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: ENABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_686: (+1)
   \   00004632   0x.... 0x....      LDR.W    R1,??DataTable4_33
   \   00004636   0xA80B             ADD      R0,SP,#+44
   \   00004638   0x.... 0x....      BL       sprintf
   4129                                    Status = RoadBrd_Set_UnitsFlag( true );
   \   0000463C   0x2001             MOVS     R0,#+1
   \   0000463E   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00004642   0x0006             MOVS     R6,R0
   4130                                    break;
   \   00004644   0xE02D             B.N      ??RoadBrd_ParseString_682
   \   00004646   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_565:
   \   00004648   0x........         DC32     ?_263
   4131          //------------------
   4132                                  case 'D':
   4133                                    //Units Disable Command
   4134                                    // Is this a BLE Operation?
   4135                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_683: (+1)
   \   0000464C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000464E   0x2D00             CMP      R5,#+0
   \   00004650   0xD00A             BEQ.N    ??RoadBrd_ParseString_687
   4136                                    {
   4137                                      // Yes...Build and Send BLE Response NOW.
   4138                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUD_ACK</STATUS>");
   \   00004652   0x.... 0x....      LDR.W    R1,??DataTable4_34
   \   00004656   0xA80B             ADD      R0,SP,#+44
   \   00004658   0x.... 0x....      BL       strcpy
   4139                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000465C   0xA80B             ADD      R0,SP,#+44
   \   0000465E   0x.... 0x....      BL       strlen
   \   00004662   0xA90B             ADD      R1,SP,#+44
   \   00004664   0x.... 0x....      BL       BGM111_Transmit
   4140                                    }
   4141                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: DISABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_687: (+1)
   \   00004668   0x.... 0x....      LDR.W    R1,??DataTable4_35
   \   0000466C   0xA80B             ADD      R0,SP,#+44
   \   0000466E   0x.... 0x....      BL       sprintf
   4142                                    Status = RoadBrd_Set_UnitsFlag( false );
   \   00004672   0x2000             MOVS     R0,#+0
   \   00004674   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00004678   0x0006             MOVS     R6,R0
   4143                                    break;
   \   0000467A   0xE012             B.N      ??RoadBrd_ParseString_682
   4144                                  default:
   4145                                    // Is this a BLE Operation?
   4146                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_684: (+1)
   \   0000467C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000467E   0x2D00             CMP      R5,#+0
   \   00004680   0xD00A             BEQ.N    ??RoadBrd_ParseString_688
   4147                                    {
   4148                                      // Yes...Build and Send BLE Response NOW.
   4149                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   00004682   0x.... 0x....      LDR.W    R1,??DataTable4_30
   \   00004686   0xA80B             ADD      R0,SP,#+44
   \   00004688   0x.... 0x....      BL       strcpy
   4150                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000468C   0xA80B             ADD      R0,SP,#+44
   \   0000468E   0x.... 0x....      BL       strlen
   \   00004692   0xA90B             ADD      R1,SP,#+44
   \   00004694   0x.... 0x....      BL       BGM111_Transmit
   4151                                    }
   4152                                    strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_688: (+1)
   \   00004698   0x.... 0x....      LDR.W    R1,??DataTable4_36
   \   0000469C   0xA80B             ADD      R0,SP,#+44
   \   0000469E   0x.... 0x....      BL       strcpy
   4153                                    break;
   4154                                } //EndSwitch ( tempBffr[2] )
   4155                              } //EndElse (Size < 3)
   4156                              break;
   \                     ??RoadBrd_ParseString_682: (+1)
   \   000046A2   0xE1D6             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_566:
   \   000046A4   0x........         DC32     ?_264
   4157          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   4158                            case 'M':
   4159                              // Is this a BLE Operation?
   4160                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_296: (+1)
   \   000046A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000046AA   0x2D00             CMP      R5,#+0
   \   000046AC   0xD00A             BEQ.N    ??RoadBrd_ParseString_689
   4161                              {
   4162                                // Yes...Build and Send BLE Response NOW.
   4163                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000046AE   0x.... 0x....      LDR.W    R1,??DataTable4_37
   \   000046B2   0xA80B             ADD      R0,SP,#+44
   \   000046B4   0x.... 0x....      BL       strcpy
   4164                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046B8   0xA80B             ADD      R0,SP,#+44
   \   000046BA   0x.... 0x....      BL       strlen
   \   000046BE   0xA90B             ADD      R1,SP,#+44
   \   000046C0   0x.... 0x....      BL       BGM111_Transmit
   4165                              }
   4166                              
   4167                              strcpy( (char *)tempBffr2, "BGM111 MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_689: (+1)
   \   000046C4   0x.... 0x....      LDR.W    R1,??DataTable4_38
   \   000046C8   0xA80B             ADD      R0,SP,#+44
   \   000046CA   0x.... 0x....      BL       strcpy
   4168          #ifdef NUCLEO
   4169                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4170          #else
   4171                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000046CE   0xA90B             ADD      R1,SP,#+44
   \   000046D0   0x2000             MOVS     R0,#+0
   \   000046D2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000046D6   0x0006             MOVS     R6,R0
   4172          #endif
   4173                              if (Status != HAL_OK)
   \   000046D8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000046DA   0x2E00             CMP      R6,#+0
   \   000046DC   0xD002             BEQ.N    ??RoadBrd_ParseString_690
   4174                                return Status;
   \   000046DE   0x0030             MOVS     R0,R6
   \   000046E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000046E2   0xE247             B.N      ??RoadBrd_ParseString_4
   4175                              strcpy( (char *)tempBffr2, "Use <ESC> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_690: (+1)
   \   000046E4   0x.... 0x....      LDR.W    R1,??DataTable4_39
   \   000046E8   0xA80B             ADD      R0,SP,#+44
   \   000046EA   0x.... 0x....      BL       strcpy
   4176                              // Set Bypass Flag
   4177                              Bypass = true;
   \   000046EE   0x2001             MOVS     R0,#+1
   \   000046F0   0x.... 0x....      LDR.W    R1,??DataTable4_40
   \   000046F4   0x7008             STRB     R0,[R1, #+0]
   4178                              break;
   \   000046F6   0xE1AC             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_568:
   \   000046F8   0x........         DC32     ?_265
   4179          //++++++++++++++++++++++++++++++++++++++++++  Reset Flash Frame Variables(Factory).
   4180                            case 'F':
   4181                              // Reset Flash Frame Variables.
   4182                              RoadBrd_WWDG_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_292: (+1)
   \   000046FC   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   4183                              // Is this a BLE Operation?
   4184                              if ( BLE_Flag )
   \   00004700   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004702   0x2D00             CMP      R5,#+0
   \   00004704   0xD00A             BEQ.N    ??RoadBrd_ParseString_691
   4185                              {
   4186                                // Yes...Build and Send BLE Response NOW.
   4187                                sprintf( (char *)tempBffr2, "<STATUS>TF_ACK</STATUS>" );
   \   00004706   0x.... 0x....      LDR.W    R1,??DataTable4_41
   \   0000470A   0xA80B             ADD      R0,SP,#+44
   \   0000470C   0x.... 0x....      BL       sprintf
   4188                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004710   0xA80B             ADD      R0,SP,#+44
   \   00004712   0x.... 0x....      BL       strlen
   \   00004716   0xA90B             ADD      R1,SP,#+44
   \   00004718   0x.... 0x....      BL       BGM111_Transmit
   4189                              }
   4190                              
   4191                              sprintf( (char *)tempBffr2, "Flash Frame Variables Reset to Factory Values.\r\n" );
   \                     ??RoadBrd_ParseString_691: (+1)
   \   0000471C   0x.... 0x....      LDR.W    R1,??DataTable4_42
   \   00004720   0xA80B             ADD      R0,SP,#+44
   \   00004722   0x.... 0x....      BL       sprintf
   4192                              break;
   \   00004726   0xE194             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_569:
   \   00004728   0x........         DC32     ?_266
   4193          //++++++++++++++++++++++++++++++++++++++++++  Lock Code to allow stable Program of BLE Module.
   4194                            case 'L':
   4195                              // Is this a BLE Operation?
   4196                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_295: (+1)
   \   0000472C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000472E   0x2D00             CMP      R5,#+0
   \   00004730   0xD00B             BEQ.N    ??RoadBrd_ParseString_692
   4197                              {
   4198                                // Yes...Build and Send BLE Response NOW.
   4199                                sprintf( (char *)tempBffr2, "<STATUS>TL_ERROR</STATUS>" );
   \   00004732   0x.... 0x....      LDR.W    R1,??DataTable4_43
   \   00004736   0xA80B             ADD      R0,SP,#+44
   \   00004738   0x.... 0x....      BL       sprintf
   4200                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000473C   0xA80B             ADD      R0,SP,#+44
   \   0000473E   0x.... 0x....      BL       strlen
   \   00004742   0xA90B             ADD      R1,SP,#+44
   \   00004744   0x.... 0x....      BL       BGM111_Transmit
   4201                              }
   4202                              else
   4203                              {
   4204                                sprintf( (char *)tempBffr2, "Code Locked for Programming!\r\n\r\n" );
   4205          #ifdef NUCLEO
   4206                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4207          #else
   4208                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4209          #endif
   4210                                if (Status != HAL_OK)
   4211                                  return Status;
   4212                                sprintf( (char *)tempBffr2, "   HARD RESET NEEDED TO EXIT MODE\r\n" );
   4213          #ifdef NUCLEO
   4214                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4215          #else
   4216                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4217          #endif
   4218                                if (Status != HAL_OK)
   4219                                  return Status;
   4220                                // Start Hard Loop
   4221                                for (;;)
   4222                                {
   4223                                }
   4224                              }
   4225                              break;
   \   00004748   0xE183             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_692: (+1)
   \   0000474A   0x.... 0x....      LDR.W    R1,??DataTable4_44
   \   0000474E   0xA80B             ADD      R0,SP,#+44
   \   00004750   0x.... 0x....      BL       sprintf
   \   00004754   0xA90B             ADD      R1,SP,#+44
   \   00004756   0x2000             MOVS     R0,#+0
   \   00004758   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000475C   0x0006             MOVS     R6,R0
   \   0000475E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004760   0x2E00             CMP      R6,#+0
   \   00004762   0xD002             BEQ.N    ??RoadBrd_ParseString_693
   \   00004764   0x0030             MOVS     R0,R6
   \   00004766   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004768   0xE204             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_693: (+1)
   \   0000476A   0x.... 0x....      LDR.W    R1,??DataTable4_45
   \   0000476E   0xA80B             ADD      R0,SP,#+44
   \   00004770   0x.... 0x....      BL       sprintf
   \   00004774   0xA90B             ADD      R1,SP,#+44
   \   00004776   0x2000             MOVS     R0,#+0
   \   00004778   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000477C   0x0006             MOVS     R6,R0
   \   0000477E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004780   0x2E00             CMP      R6,#+0
   \   00004782   0xD007             BEQ.N    ??RoadBrd_ParseString_694
   \   00004784   0x0030             MOVS     R0,R6
   \   00004786   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004788   0xE1F4             B.N      ??RoadBrd_ParseString_4
   \   0000478A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_571:
   \   0000478C   0x........         DC32     ?_267
   \   00004790   0x........         DC32     ?_268
   \                     ??RoadBrd_ParseString_694: (+1)
   \   00004794   0xE7FE             B.N      ??RoadBrd_ParseString_694
   4226          
   4227          //++++++++++++++++++++++++++++++++++++++++++  S-Record Test Monitor.
   4228                            case 'S':
   4229                              // S-Record Test Monitor.
   4230                              // Is this a BLE Operation?
   4231                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_298: (+1)
   \   00004796   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004798   0x2D00             CMP      R5,#+0
   \   0000479A   0xD00D             BEQ.N    ??RoadBrd_ParseString_695
   4232                              {
   4233                                // Yes...Build and Send BLE Response NOW.
   4234                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000479C   0x.... 0x....      LDR.W    R1,??DataTable4_37
   \   000047A0   0xA80B             ADD      R0,SP,#+44
   \   000047A2   0x.... 0x....      BL       strcpy
   4235                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000047A6   0xA80B             ADD      R0,SP,#+44
   \   000047A8   0x.... 0x....      BL       strlen
   \   000047AC   0xA90B             ADD      R1,SP,#+44
   \   000047AE   0x.... 0x....      BL       BGM111_Transmit
   4236                                HAL_Delay(100);           // Wait 100ms
   \   000047B2   0x2064             MOVS     R0,#+100
   \   000047B4   0x.... 0x....      BL       HAL_Delay
   4237                              }
   4238                              // Parse Data and extract S-Record.
   4239                              Numbr_Rcrds = sscanf (tempBffr, "%s %s", s_cmd, s_recrd);
   \                     ??RoadBrd_ParseString_695: (+1)
   \   000047B8   0xF50D 0x6397      ADD      R3,SP,#+1208
   \   000047BC   0xAAD5             ADD      R2,SP,#+852
   \   000047BE   0x.... 0x....      LDR.W    R1,??DataTable4_46
   \   000047C2   0x0020             MOVS     R0,R4
   \   000047C4   0x.... 0x....      BL       sscanf
   \   000047C8   0x9047             STR      R0,[SP, #+284]
   4240          //                    if (sscanf (tempBffr, "%s %s", s_cmd, s_recrd) == 2)
   4241                              if (Numbr_Rcrds == 2)
   \   000047CA   0x9847             LDR      R0,[SP, #+284]
   \   000047CC   0x2802             CMP      R0,#+2
   \   000047CE   0xF040 0x8124      BNE.W    ??RoadBrd_ParseString_696
   4242                              {
   4243                                sprintf( (char *)tempBffr2, "TS: %s\r\n", s_recrd );
   \   000047D2   0xF50D 0x6297      ADD      R2,SP,#+1208
   \   000047D6   0x.... 0x....      LDR.W    R1,??DataTable4_47
   \   000047DA   0xA80B             ADD      R0,SP,#+44
   \   000047DC   0x.... 0x....      BL       sprintf
   4244          #ifdef NUCLEO
   4245                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4246          #else
   4247                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000047E0   0xA90B             ADD      R1,SP,#+44
   \   000047E2   0x2000             MOVS     R0,#+0
   \   000047E4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000047E8   0x0006             MOVS     R6,R0
   4248          #endif
   4249                                if (Status != HAL_OK)
   \   000047EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000047EC   0x2E00             CMP      R6,#+0
   \   000047EE   0xD005             BEQ.N    ??RoadBrd_ParseString_697
   4250                                  return Status;
   \   000047F0   0x0030             MOVS     R0,R6
   \   000047F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000047F4   0xE1BE             B.N      ??RoadBrd_ParseString_4
   \   000047F6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_573:
   \   000047F8   0x........         DC32     ?_269
   4251                                // Pass to S-Record Parser..
   4252                                Status = Parse_srecord( (char *)s_recrd, &Srec_Elem );
   \                     ??RoadBrd_ParseString_697: (+1)
   \   000047FC   0xA9FF             ADD      R1,SP,#+1020
   \   000047FE   0x3168             ADDS     R1,R1,#+104
   \   00004800   0xF50D 0x6097      ADD      R0,SP,#+1208
   \   00004804   0x.... 0x....      BL       Parse_srecord
   \   00004808   0x0006             MOVS     R6,R0
   4253                                if (Status != HAL_OK)
   \   0000480A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000480C   0x2E00             CMP      R6,#+0
   \   0000480E   0xD041             BEQ.N    ??RoadBrd_ParseString_698
   4254                                {
   4255                                  // Report Failed Parse Operation
   4256                                  switch(Srec_Elem.Srec_Err)
   \   00004810   0xF89D 0x0465      LDRB     R0,[SP, #+1125]
   \   00004814   0x2800             CMP      R0,#+0
   \   00004816   0xD009             BEQ.N    ??RoadBrd_ParseString_699
   \   00004818   0x2802             CMP      R0,#+2
   \   0000481A   0xD013             BEQ.N    ??RoadBrd_ParseString_700
   \   0000481C   0xD30C             BCC.N    ??RoadBrd_ParseString_701
   \   0000481E   0x2804             CMP      R0,#+4
   \   00004820   0xD01C             BEQ.N    ??RoadBrd_ParseString_702
   \   00004822   0xD315             BCC.N    ??RoadBrd_ParseString_703
   \   00004824   0x2806             CMP      R0,#+6
   \   00004826   0xD027             BEQ.N    ??RoadBrd_ParseString_704
   \   00004828   0xD320             BCC.N    ??RoadBrd_ParseString_705
   \   0000482A   0xE02B             B.N      ??RoadBrd_ParseString_706
   4257                                  {
   4258                                    case NO_ERROR:
   4259                                      sprintf( (char *)tempBffr2, "NO ERROR FOUND.\r\n" );
   \                     ??RoadBrd_ParseString_699: (+1)
   \   0000482C   0x.... 0x....      LDR.W    R1,??DataTable4_48
   \   00004830   0xA80B             ADD      R0,SP,#+44
   \   00004832   0x.... 0x....      BL       sprintf
   4260                                      break;
   \   00004836   0xE0F5             B.N      ??RoadBrd_ParseString_707
   4261                                    case ILLEGAL_SREC:
   4262                                      sprintf( (char *)tempBffr2, "ERROR: ILLEGAL S-Record.\r\n" );
   \                     ??RoadBrd_ParseString_701: (+1)
   \   00004838   0x.... 0x....      LDR.W    R1,??DataTable4_49
   \   0000483C   0xA80B             ADD      R0,SP,#+44
   \   0000483E   0x.... 0x....      BL       sprintf
   4263                                      break;
   \   00004842   0xE0EF             B.N      ??RoadBrd_ParseString_707
   4264                                    case ILLEGAL_RECORD:
   4265                                      sprintf( (char *)tempBffr2, "ERROR: ILLEGAL Record.\r\n" );
   \                     ??RoadBrd_ParseString_700: (+1)
   \   00004844   0x.... 0x....      LDR.W    R1,??DataTable4_50
   \   00004848   0xA80B             ADD      R0,SP,#+44
   \   0000484A   0x.... 0x....      BL       sprintf
   4266                                      break;
   \   0000484E   0xE0E9             B.N      ??RoadBrd_ParseString_707
   4267                                    case RESERVED_RECORD:
   4268                                      sprintf( (char *)tempBffr2, "ERROR: Reserved S-Record Type.\r\n" );
   \                     ??RoadBrd_ParseString_703: (+1)
   \   00004850   0x.... 0x....      LDR.W    R1,??DataTable4_51
   \   00004854   0xA80B             ADD      R0,SP,#+44
   \   00004856   0x.... 0x....      BL       sprintf
   4269                                      break;
   \   0000485A   0xE0E3             B.N      ??RoadBrd_ParseString_707
   4270                                    case ILLEGAL_BYTE_CNT:
   4271                                      sprintf( (char *)tempBffr2, "ERROR: Illegal Byte Count.\r\n" );
   \                     ??RoadBrd_ParseString_702: (+1)
   \   0000485C   0x.... 0x....      LDR.W    R1,??DataTable4_52
   \   00004860   0xA80B             ADD      R0,SP,#+44
   \   00004862   0x.... 0x....      BL       sprintf
   4272                                      break;
   \   00004866   0xE0DD             B.N      ??RoadBrd_ParseString_707
   \                     ??RoadBrd_ParseString_574:
   \   00004868   0x........         DC32     ?_270
   4273                                    case ILLEGAL_BYTE_DATA:
   4274                                      sprintf( (char *)tempBffr2, "ERROR: Reserved S-Record Type.\r\n" );
   \                     ??RoadBrd_ParseString_705: (+1)
   \   0000486C   0x.... 0x....      LDR.W    R1,??DataTable4_51
   \   00004870   0xA80B             ADD      R0,SP,#+44
   \   00004872   0x.... 0x....      BL       sprintf
   4275                                      break;
   \   00004876   0xE0D5             B.N      ??RoadBrd_ParseString_707
   4276                                    case BAD_CHECKSUM:
   4277                                      sprintf( (char *)tempBffr2, "ERROR: Illegal Byte Data.\r\n" );
   \                     ??RoadBrd_ParseString_704: (+1)
   \   00004878   0x.... 0x....      LDR.W    R1,??DataTable4_53
   \   0000487C   0xA80B             ADD      R0,SP,#+44
   \   0000487E   0x.... 0x....      BL       sprintf
   4278                                      break;
   \   00004882   0xE0CF             B.N      ??RoadBrd_ParseString_707
   4279                                    default:
   4280                                      sprintf( (char *)tempBffr2, "ERROR: Checksum did not match data.\r\n" );
   \                     ??RoadBrd_ParseString_706: (+1)
   \   00004884   0x.... 0x....      LDR.W    R1,??DataTable4_54
   \   00004888   0xA80B             ADD      R0,SP,#+44
   \   0000488A   0x.... 0x....      BL       sprintf
   4281                                      break;
   \   0000488E   0xE0C9             B.N      ??RoadBrd_ParseString_707
   \                     ??RoadBrd_ParseString_576:
   \   00004890   0x........         DC32     ?_271
   4282                                  } // EndSwitch (Srec_Elem.Srec_Err)
   4283                                } // EndIf (Status != HAL_OK)..Parse_srecord
   4284                                else
   4285                                {
   4286                                  // Display Type of S-Record
   4287                                  switch(Srec_Elem.RecordType)
   \                     ??RoadBrd_ParseString_698: (+1)
   \   00004894   0xF89D 0x0464      LDRB     R0,[SP, #+1124]
   \   00004898   0x2800             CMP      R0,#+0
   \   0000489A   0xD00E             BEQ.N    ??RoadBrd_ParseString_708
   \   0000489C   0x2802             CMP      R0,#+2
   \   0000489E   0xD018             BEQ.N    ??RoadBrd_ParseString_709
   \   000048A0   0xD311             BCC.N    ??RoadBrd_ParseString_710
   \   000048A2   0x2804             CMP      R0,#+4
   \   000048A4   0xD024             BEQ.N    ??RoadBrd_ParseString_711
   \   000048A6   0xD31D             BCC.N    ??RoadBrd_ParseString_712
   \   000048A8   0x2806             CMP      R0,#+6
   \   000048AA   0xD02D             BEQ.N    ??RoadBrd_ParseString_713
   \   000048AC   0xD326             BCC.N    ??RoadBrd_ParseString_714
   \   000048AE   0x2808             CMP      R0,#+8
   \   000048B0   0xD036             BEQ.N    ??RoadBrd_ParseString_715
   \   000048B2   0xD32F             BCC.N    ??RoadBrd_ParseString_716
   \   000048B4   0x2809             CMP      R0,#+9
   \   000048B6   0xD03B             BEQ.N    ??RoadBrd_ParseString_717
   \   000048B8   0xE040             B.N      ??RoadBrd_ParseString_718
   4288                                  {
   4289                                    case S0_HEADER:
   4290                                      sprintf( (char *)tempBffr2, "Record Type: S0_HEADER: Vendor specific ASCII text.\r\n" );
   \                     ??RoadBrd_ParseString_708: (+1)
   \   000048BA   0x.... 0x....      LDR.W    R1,??DataTable4_55
   \   000048BE   0xA80B             ADD      R0,SP,#+44
   \   000048C0   0x.... 0x....      BL       sprintf
   4291                                      break;
   \   000048C4   0xE03F             B.N      ??RoadBrd_ParseString_719
   4292                                    case S1_DATA:
   4293                                      sprintf( (char *)tempBffr2, "Record Type: S1_DATA: Data that starts at the 16-bit address field.\r\n" );
   \                     ??RoadBrd_ParseString_710: (+1)
   \   000048C6   0x.... 0x....      LDR.W    R1,??DataTable4_56
   \   000048CA   0xA80B             ADD      R0,SP,#+44
   \   000048CC   0x.... 0x....      BL       sprintf
   4294                                      break;
   \   000048D0   0xE039             B.N      ??RoadBrd_ParseString_719
   4295                                    case S2_DATA:
   4296                                      sprintf( (char *)tempBffr2, "Record Type: S2_DATA: Data that starts at the 24-bit address field.\r\n" );
   \                     ??RoadBrd_ParseString_709: (+1)
   \   000048D2   0x.... 0x....      LDR.W    R1,??DataTable4_57
   \   000048D6   0xA80B             ADD      R0,SP,#+44
   \   000048D8   0x.... 0x....      BL       sprintf
   4297                                      break;
   \   000048DC   0xE033             B.N      ??RoadBrd_ParseString_719
   \   000048DE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_577:
   \   000048E0   0x........         DC32     ?_272
   4298                                    case S3_DATA:
   4299                                      sprintf( (char *)tempBffr2, "Record Type: S3_DATA: Data that starts at the 32-bit address field.\r\n" );
   \                     ??RoadBrd_ParseString_712: (+1)
   \   000048E4   0x.... 0x....      LDR.W    R1,??DataTable4_58
   \   000048E8   0xA80B             ADD      R0,SP,#+44
   \   000048EA   0x.... 0x....      BL       sprintf
   4300                                      break;
   \   000048EE   0xE02A             B.N      ??RoadBrd_ParseString_719
   4301                                    case S4_RESERVED:
   4302                                      sprintf( (char *)tempBffr2, "Record Type: S4_RESERVED\r\n" );
   \                     ??RoadBrd_ParseString_711: (+1)
   \   000048F0   0x.... 0x....      LDR.W    R1,??DataTable4_59
   \   000048F4   0xA80B             ADD      R0,SP,#+44
   \   000048F6   0x.... 0x....      BL       sprintf
   4303                                      break;
   \   000048FA   0xE024             B.N      ??RoadBrd_ParseString_719
   4304                                    case S5_COUNT:
   4305                                      sprintf( (char *)tempBffr2, "Record Type: S5_COUNT: 16-bit count of S1 / S2 / S3 records.\r\n" );
   \                     ??RoadBrd_ParseString_714: (+1)
   \   000048FC   0x.... 0x....      LDR.W    R1,??DataTable4_60
   \   00004900   0xA80B             ADD      R0,SP,#+44
   \   00004902   0x.... 0x....      BL       sprintf
   4306                                      break;
   \   00004906   0xE01E             B.N      ??RoadBrd_ParseString_719
   4307                                    case S6_COUNT:
   4308                                      sprintf( (char *)tempBffr2, "Record Type: S6_COUNT: 24-bit count of S1 / S2 / S3 records.\r\n" );
   \                     ??RoadBrd_ParseString_713: (+1)
   \   00004908   0x.... 0x....      LDR.W    R1,??DataTable4_61
   \   0000490C   0xA80B             ADD      R0,SP,#+44
   \   0000490E   0x.... 0x....      BL       sprintf
   4309                                      break;
   \   00004912   0xE018             B.N      ??RoadBrd_ParseString_719
   4310                                    case S7_START:
   4311                                      sprintf( (char *)tempBffr2, "Record Type: S7_START: Starting execution location at a 32-bit address.\r\n" );
   \                     ??RoadBrd_ParseString_716: (+1)
   \   00004914   0x.... 0x....      LDR.W    R1,??DataTable4_62
   \   00004918   0xA80B             ADD      R0,SP,#+44
   \   0000491A   0x.... 0x....      BL       sprintf
   4312                                      break;
   \   0000491E   0xE012             B.N      ??RoadBrd_ParseString_719
   4313                                    case S8_START:
   4314                                      sprintf( (char *)tempBffr2, "Record Type: S8_START: Starting execution location at a 24-bit address.\r\n" );
   \                     ??RoadBrd_ParseString_715: (+1)
   \   00004920   0x.... 0x....      LDR.W    R1,??DataTable4_63
   \   00004924   0xA80B             ADD      R0,SP,#+44
   \   00004926   0x.... 0x....      BL       sprintf
   4315                                      break;
   \   0000492A   0xE00C             B.N      ??RoadBrd_ParseString_719
   \                     ??RoadBrd_ParseString_579:
   \   0000492C   0x........         DC32     ?_273
   4316                                    case S9_START:
   4317                                      sprintf( (char *)tempBffr2, "Record Type: S9_START: Starting execution location at a 16-bit address.\r\n" );
   \                     ??RoadBrd_ParseString_717: (+1)
   \   00004930   0x.... 0x....      LDR.W    R1,??DataTable4_64
   \   00004934   0xA80B             ADD      R0,SP,#+44
   \   00004936   0x.... 0x....      BL       sprintf
   4318                                      break;
   \   0000493A   0xE004             B.N      ??RoadBrd_ParseString_719
   4319                                    default:
   4320                                      sprintf( (char *)tempBffr2, "Record Type: UNKNOWN.\r\n" );
   \                     ??RoadBrd_ParseString_718: (+1)
   \   0000493C   0x.... 0x....      LDR.W    R1,??DataTable4_65
   \   00004940   0xA80B             ADD      R0,SP,#+44
   \   00004942   0x.... 0x....      BL       sprintf
   4321                                      break;
   4322                                  } // EndSwitch (Srec_Elem.RecordType)
   4323          #ifdef NUCLEO
   4324                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4325          #else
   4326                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_719: (+1)
   \   00004946   0xA90B             ADD      R1,SP,#+44
   \   00004948   0x2000             MOVS     R0,#+0
   \   0000494A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000494E   0x0006             MOVS     R6,R0
   4327          #endif
   4328                                  if (Status != HAL_OK)
   \   00004950   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004952   0x2E00             CMP      R6,#+0
   \   00004954   0xD008             BEQ.N    ??RoadBrd_ParseString_720
   4329                                    return Status;
   \   00004956   0x0030             MOVS     R0,R6
   \   00004958   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000495A   0xE10B             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_580:
   \   0000495C   0x........         DC32     ?_274
   \   00004960   0x........         DC32     ?_275
   \   00004964   0x........         DC32     ?_276
   4330                                  // Display Byte Count Field.
   4331                                  sprintf( (char *)tempBffr2, "Byte Count: %08x\r\n", Srec_Elem.ByteCount );
   \                     ??RoadBrd_ParseString_720: (+1)
   \   00004968   0xF8DD 0x2468      LDR      R2,[SP, #+1128]
   \   0000496C   0x.... 0x....      LDR.W    R1,??DataTable4_66
   \   00004970   0xA80B             ADD      R0,SP,#+44
   \   00004972   0x.... 0x....      BL       sprintf
   4332          #ifdef NUCLEO
   4333                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4334          #else
   4335                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004976   0xA90B             ADD      R1,SP,#+44
   \   00004978   0x2000             MOVS     R0,#+0
   \   0000497A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000497E   0x0006             MOVS     R6,R0
   4336          #endif
   4337                                  if (Status != HAL_OK)
   \   00004980   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004982   0x2E00             CMP      R6,#+0
   \   00004984   0xD002             BEQ.N    ??RoadBrd_ParseString_721
   4338                                    return Status;
   \   00004986   0x0030             MOVS     R0,R6
   \   00004988   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000498A   0xE0F3             B.N      ??RoadBrd_ParseString_4
   4339                                  // Display Address Field.
   4340                                  sprintf( (char *)tempBffr2, "Address: %08x\r\n", Srec_Elem.Address );
   \                     ??RoadBrd_ParseString_721: (+1)
   \   0000498C   0xF8DD 0x246C      LDR      R2,[SP, #+1132]
   \   00004990   0x.... 0x....      LDR.W    R1,??DataTable4_67
   \   00004994   0xA80B             ADD      R0,SP,#+44
   \   00004996   0x.... 0x....      BL       sprintf
   4341          #ifdef NUCLEO
   4342                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4343          #else
   4344                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000499A   0xA90B             ADD      R1,SP,#+44
   \   0000499C   0x2000             MOVS     R0,#+0
   \   0000499E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000049A2   0x0006             MOVS     R6,R0
   4345          #endif
   4346                                  // Dump Buffer of S-Record.
   4347                                  y=0;
   \   000049A4   0x2000             MOVS     R0,#+0
   \   000049A6   0x4680             MOV      R8,R0
   4348                                  sprintf( (char *)tempBffr2, "" );
   \   000049A8   0x....             ADR.N    R1,??DataTable3_8  ;; ""
   \   000049AA   0xA80B             ADD      R0,SP,#+44
   \   000049AC   0x.... 0x....      BL       sprintf
   4349                                  for (x=0; x<BYTE_BFFR_SIZE; x++)
   \   000049B0   0x2000             MOVS     R0,#+0
   \   000049B2   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_722: (+1)
   \   000049B4   0x2F2D             CMP      R7,#+45
   \   000049B6   0xDA28             BGE.N    ??RoadBrd_ParseString_723
   4350                                  {
   4351                                    sprintf( (char *)tempBffr3, "%02x ", Srec_Elem.Data[x]);
   \   000049B8   0xA8FF             ADD      R0,SP,#+1020
   \   000049BA   0x3068             ADDS     R0,R0,#+104
   \   000049BC   0x4438             ADD      R0,R0,R7
   \   000049BE   0x7B42             LDRB     R2,[R0, #+13]
   \   000049C0   0x.... 0x....      LDR.W    R1,??DataTable4_68
   \   000049C4   0xA82B             ADD      R0,SP,#+172
   \   000049C6   0x.... 0x....      BL       sprintf
   4352                                    strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000049CA   0xA92B             ADD      R1,SP,#+172
   \   000049CC   0xA80B             ADD      R0,SP,#+44
   \   000049CE   0x.... 0x....      BL       strcat
   4353                                    y++;
   \   000049D2   0xF118 0x0801      ADDS     R8,R8,#+1
   4354                                    if (y>=16)
   \   000049D6   0xF1B8 0x0F10      CMP      R8,#+16
   \   000049DA   0xDB14             BLT.N    ??RoadBrd_ParseString_724
   4355                                    {
   4356                                      strcat( (char *)tempBffr2, "\r\n" );
   \   000049DC   0x....             ADR.N    R1,??DataTable3_10  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000049DE   0xA80B             ADD      R0,SP,#+44
   \   000049E0   0x.... 0x....      BL       strcat
   4357                                      y=0;
   \   000049E4   0x2000             MOVS     R0,#+0
   \   000049E6   0x4680             MOV      R8,R0
   4358           #ifdef NUCLEO
   4359                                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4360          #else
   4361                                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000049E8   0xA90B             ADD      R1,SP,#+44
   \   000049EA   0x2000             MOVS     R0,#+0
   \   000049EC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000049F0   0x0006             MOVS     R6,R0
   4362          #endif
   4363                                      if (Status != HAL_OK)
   \   000049F2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000049F4   0x2E00             CMP      R6,#+0
   \   000049F6   0xD002             BEQ.N    ??RoadBrd_ParseString_725
   4364                                        return Status;
   \   000049F8   0x0030             MOVS     R0,R6
   \   000049FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000049FC   0xE0BA             B.N      ??RoadBrd_ParseString_4
   4365                                      sprintf( (char *)tempBffr2, "" );
   \                     ??RoadBrd_ParseString_725: (+1)
   \   000049FE   0x....             ADR.N    R1,??DataTable3_8  ;; ""
   \   00004A00   0xA80B             ADD      R0,SP,#+44
   \   00004A02   0x.... 0x....      BL       sprintf
   4366                                    }
   4367                                  }
   \                     ??RoadBrd_ParseString_724: (+1)
   \   00004A06   0x1C7F             ADDS     R7,R7,#+1
   \   00004A08   0xE7D4             B.N      ??RoadBrd_ParseString_722
   4368                                  // Finally Display Checksum.
   4369                                  sprintf( (char *)tempBffr2, "Checksum: %02x\r\n", Srec_Elem.Checksum );
   \                     ??RoadBrd_ParseString_723: (+1)
   \   00004A0A   0xF89D 0x2470      LDRB     R2,[SP, #+1136]
   \   00004A0E   0x.... 0x....      LDR.W    R1,??DataTable4_69
   \   00004A12   0xA80B             ADD      R0,SP,#+44
   \   00004A14   0x.... 0x....      BL       sprintf
   \   00004A18   0xE004             B.N      ??RoadBrd_ParseString_707
   4370                                }// EndElse (Status != HAL_OK)..Parse_srecord
   4371                              } // EndIf (Numbr_Rcrds == 2)
   4372                              else
   4373                              {
   4374                                strcpy( (char *)tempBffr2, "TS SYNTAX ERROR: Too many parameters.\r\n");
   \                     ??RoadBrd_ParseString_696: (+1)
   \   00004A1A   0x.... 0x....      LDR.W    R1,??DataTable4_70
   \   00004A1E   0xA80B             ADD      R0,SP,#+44
   \   00004A20   0x.... 0x....      BL       strcpy
   4375                              } // EndElse (Numbr_Rcrds == 2)
   4376                              break;
   \                     ??RoadBrd_ParseString_707: (+1)
   \   00004A24   0xE015             B.N      ??RoadBrd_ParseString_289
   \   00004A26   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_583:
   \   00004A28   0x........         DC32     ?_277
   \   00004A2C   0x........         DC32     ?_278
   4377          //**************************************************************************************************
   4378                            default:
   4379                              // Is this a BLE Operation?
   4380                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_300: (+1)
   \   00004A30   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004A32   0x2D00             CMP      R5,#+0
   \   00004A34   0xD009             BEQ.N    ??RoadBrd_ParseString_726
   4381                              {
   4382                                // Yes...Build and Send BLE Response NOW.
   4383                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00004A36   0x....             LDR.N    R1,??DataTable4_37
   \   00004A38   0xA80B             ADD      R0,SP,#+44
   \   00004A3A   0x.... 0x....      BL       strcpy
   4384                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004A3E   0xA80B             ADD      R0,SP,#+44
   \   00004A40   0x.... 0x....      BL       strlen
   \   00004A44   0xA90B             ADD      R1,SP,#+44
   \   00004A46   0x.... 0x....      BL       BGM111_Transmit
   4385                              }
   4386                              
   4387                              // ERROR if we get here.. 
   4388                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_726: (+1)
   \   00004A4A   0x....             LDR.N    R1,??DataTable4_29
   \   00004A4C   0xA80B             ADD      R0,SP,#+44
   \   00004A4E   0x.... 0x....      BL       strcpy
   4389                              break;
   4390                           
   4391                          } //EndSwitch ( tempBffr[1] )
   4392                        } //EndElse (Size <= 1)
   4393                        break;
   \                     ??RoadBrd_ParseString_289: (+1)
   \   00004A52   0xE010             B.N      ??RoadBrd_ParseString_26
   4394          #if 0
   4395          //**************************************************************************************************
   4396                      case 'S':
   4397                        // Sleep Mode. 
   4398                        switch( tempBffr[1] )
   4399                        {
   4400          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   4401                          case 'S':
   4402                            // Is this a BLE Operation?
   4403                            if ( BLE_Flag )
   4404                            {
   4405                              // Yes...Build and Send BLE Response NOW.
   4406                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4407                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4408                            }
   4409                            
   4410                            strcpy( (char *)tempBffr2, "Micro in Sleep Mode NOW.\r\n");
   4411          #ifdef NUCLEO
   4412                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4413          #else
   4414                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4415          #endif
   4416                            if (Status != HAL_OK)
   4417                              return Status;
   4418                            // Sleep Micro NOW!
   4419                            //sleep();
   4420                            break;
   4421                          case 'D':
   4422                            // Is this a BLE Operation?
   4423                            if ( BLE_Flag )
   4424                            {
   4425                              // Yes...Build and Send BLE Response NOW.
   4426                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4427                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4428                            }
   4429                            
   4430                            // Turn off 5V Power Supply.
   4431                            strcpy( (char *)tempBffr2, "Micro in Deep Sleep Mode NOW.\r\n");
   4432          #ifdef NUCLEO
   4433                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4434          #else
   4435                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4436          #endif
   4437                            if (Status != HAL_OK)
   4438                              return Status;
   4439                            // Sleep Micro NOW!
   4440                            //deepsleep();
   4441                            break;
   4442                        }
   4443                        break;
   4444          #endif
   4445          //++++++++++++++++++++++++++++++++++++++++++  Unknown Command.
   4446                      default:
   4447                        // Is this a BLE Operation?
   4448                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_22: (+1)
   \   00004A54   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004A56   0x2D00             CMP      R5,#+0
   \   00004A58   0xD009             BEQ.N    ??RoadBrd_ParseString_727
   4449                        {
   4450                          // Yes...Build and Send BLE Response NOW.
   4451                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00004A5A   0x....             LDR.N    R1,??DataTable4_37
   \   00004A5C   0xA80B             ADD      R0,SP,#+44
   \   00004A5E   0x.... 0x....      BL       strcpy
   4452                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004A62   0xA80B             ADD      R0,SP,#+44
   \   00004A64   0x.... 0x....      BL       strlen
   \   00004A68   0xA90B             ADD      R1,SP,#+44
   \   00004A6A   0x.... 0x....      BL       BGM111_Transmit
   4453                        }
   4454                        
   4455                        // ERROR if we get here.. 
   4456                        strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_727: (+1)
   \   00004A6E   0x....             LDR.N    R1,??DataTable4_29
   \   00004A70   0xA80B             ADD      R0,SP,#+44
   \   00004A72   0x.... 0x....      BL       strcpy
   4457                        break;
   4458                      } // EndSwitch
   4459                      
   4460          
   4461                      // Test last I2C Status to determine next msg.
   4462                      switch( Status )
   \                     ??RoadBrd_ParseString_26: (+1)
   \   00004A76   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004A78   0x2E00             CMP      R6,#+0
   \   00004A7A   0xD005             BEQ.N    ??RoadBrd_ParseString_728
   \   00004A7C   0x2E02             CMP      R6,#+2
   \   00004A7E   0xD040             BEQ.N    ??RoadBrd_ParseString_729
   \   00004A80   0xD303             BCC.N    ??RoadBrd_ParseString_730
   \   00004A82   0x2E03             CMP      R6,#+3
   \   00004A84   0xD044             BEQ.N    ??RoadBrd_ParseString_731
   \   00004A86   0xE053             B.N      ??RoadBrd_ParseString_732
   4463                      {
   4464                        case HAL_OK:
   4465                          break;
   \                     ??RoadBrd_ParseString_728: (+1)
   \   00004A88   0xE058             B.N      ??RoadBrd_ParseString_733
   4466                        case HAL_ERROR:
   4467                          // Determine what kind of error.
   4468                          Err_code = RoadBrd_I2C_GetError();
   \                     ??RoadBrd_ParseString_730: (+1)
   \   00004A8A   0x.... 0x....      BL       RoadBrd_I2C_GetError
   \   00004A8E   0x9046             STR      R0,[SP, #+280]
   4469                          switch( Err_code )
   \   00004A90   0x9846             LDR      R0,[SP, #+280]
   \   00004A92   0x2801             CMP      R0,#+1
   \   00004A94   0xD00A             BEQ.N    ??RoadBrd_ParseString_734
   \   00004A96   0x2802             CMP      R0,#+2
   \   00004A98   0xD00D             BEQ.N    ??RoadBrd_ParseString_735
   \   00004A9A   0x2804             CMP      R0,#+4
   \   00004A9C   0xD010             BEQ.N    ??RoadBrd_ParseString_736
   \   00004A9E   0x2808             CMP      R0,#+8
   \   00004AA0   0xD016             BEQ.N    ??RoadBrd_ParseString_737
   \   00004AA2   0x2810             CMP      R0,#+16
   \   00004AA4   0xD019             BEQ.N    ??RoadBrd_ParseString_738
   \   00004AA6   0x2820             CMP      R0,#+32
   \   00004AA8   0xD01C             BEQ.N    ??RoadBrd_ParseString_739
   \   00004AAA   0xE023             B.N      ??RoadBrd_ParseString_740
   4470                          {
   4471                            case HAL_I2C_ERROR_BERR:
   4472                              strcpy( (char *)tempBffr2, "I2C ERROR: BERR: Bus Error reported.\r\n");
   \                     ??RoadBrd_ParseString_734: (+1)
   \   00004AAC   0x....             LDR.N    R1,??DataTable4_71
   \   00004AAE   0xA80B             ADD      R0,SP,#+44
   \   00004AB0   0x.... 0x....      BL       strcpy
   4473                              break;
   \   00004AB4   0xE022             B.N      ??RoadBrd_ParseString_741
   4474                            case HAL_I2C_ERROR_ARLO:
   4475                              strcpy( (char *)tempBffr2, "I2C ERROR: ARLO: Arbitration lost reported.\r\n");
   \                     ??RoadBrd_ParseString_735: (+1)
   \   00004AB6   0x....             LDR.N    R1,??DataTable4_72
   \   00004AB8   0xA80B             ADD      R0,SP,#+44
   \   00004ABA   0x.... 0x....      BL       strcpy
   4476                              break;
   \   00004ABE   0xE01D             B.N      ??RoadBrd_ParseString_741
   4477                            case HAL_I2C_ERROR_AF:
   4478                              strcpy( (char *)tempBffr2, "I2C ERROR: AF: Acknowledge failure reported.\r\n");
   \                     ??RoadBrd_ParseString_736: (+1)
   \   00004AC0   0x....             LDR.N    R1,??DataTable4_73
   \   00004AC2   0xA80B             ADD      R0,SP,#+44
   \   00004AC4   0x.... 0x....      BL       strcpy
   4479                              break;
   \   00004AC8   0xE018             B.N      ??RoadBrd_ParseString_741
   \   00004ACA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_585:
   \   00004ACC   0x........         DC32     ?_279
   4480                            case HAL_I2C_ERROR_OVR:
   4481                              strcpy( (char *)tempBffr2, "I2C ERROR: OVR: Overrun/Underrun reported.\r\n");
   \                     ??RoadBrd_ParseString_737: (+1)
   \   00004AD0   0x....             LDR.N    R1,??DataTable4_74
   \   00004AD2   0xA80B             ADD      R0,SP,#+44
   \   00004AD4   0x.... 0x....      BL       strcpy
   4482                              break;
   \   00004AD8   0xE010             B.N      ??RoadBrd_ParseString_741
   4483                            case HAL_I2C_ERROR_DMA:
   4484                              strcpy( (char *)tempBffr2, "I2C ERROR: DMA: DMA Error reported.\r\n");
   \                     ??RoadBrd_ParseString_738: (+1)
   \   00004ADA   0x....             LDR.N    R1,??DataTable4_75
   \   00004ADC   0xA80B             ADD      R0,SP,#+44
   \   00004ADE   0x.... 0x....      BL       strcpy
   4485                              break;
   \   00004AE2   0xE00B             B.N      ??RoadBrd_ParseString_741
   4486                            case HAL_I2C_ERROR_TIMEOUT:
   4487                              strcpy( (char *)tempBffr2, "I2C ERROR: TIMEOUT: Timeout Error reported.\r\n");
   \                     ??RoadBrd_ParseString_739: (+1)
   \   00004AE4   0x....             LDR.N    R1,??DataTable4_76
   \   00004AE6   0xA80B             ADD      R0,SP,#+44
   \   00004AE8   0x.... 0x....      BL       strcpy
   4488                              break;
   \   00004AEC   0xE006             B.N      ??RoadBrd_ParseString_741
   \   00004AEE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_586:
   \   00004AF0   0x........         DC32     ?_280
   4489                            default:
   4490                              strcpy( (char *)tempBffr2, "I2C ERROR: Unknown Error reported.\r\n");
   \                     ??RoadBrd_ParseString_740: (+1)
   \   00004AF4   0x....             LDR.N    R1,??DataTable4_77
   \   00004AF6   0xA80B             ADD      R0,SP,#+44
   \   00004AF8   0x.... 0x....      BL       strcpy
   4491                              break;
   4492                           
   4493                          }
   4494                          // Re-Initialize I2C....It has been corrupted.
   4495                          MX_I2C1_Reset();
   \                     ??RoadBrd_ParseString_741: (+1)
   \   00004AFC   0x.... 0x....      BL       MX_I2C1_Reset
   4496                          break;
   \   00004B00   0xE01C             B.N      ??RoadBrd_ParseString_733
   4497                        case HAL_BUSY:
   4498                          strcpy( (char *)tempBffr2, "I2C BUSY: I2C reported BUSY error.\r\n");
   \                     ??RoadBrd_ParseString_729: (+1)
   \   00004B02   0x....             LDR.N    R1,??DataTable4_78
   \   00004B04   0xA80B             ADD      R0,SP,#+44
   \   00004B06   0x.... 0x....      BL       strcpy
   4499                          // Re-Initialize I2C....It has been corrupted.
   4500                          MX_I2C1_Reset();
   \   00004B0A   0x.... 0x....      BL       MX_I2C1_Reset
   4501                          break;
   \   00004B0E   0xE015             B.N      ??RoadBrd_ParseString_733
   4502                        case HAL_TIMEOUT:
   4503                          strcpy( (char *)tempBffr2, "I2C TIMEOUT: I2C reported TIMEOUT.\r\n");
   \                     ??RoadBrd_ParseString_731: (+1)
   \   00004B10   0x....             LDR.N    R1,??DataTable4_79
   \   00004B12   0xA80B             ADD      R0,SP,#+44
   \   00004B14   0x.... 0x....      BL       strcpy
   4504                          // Re-Initialize I2C....It has been corrupted.
   4505                          MX_I2C1_Reset();
   \   00004B18   0x.... 0x....      BL       MX_I2C1_Reset
   4506                          break;
   \   00004B1C   0xE00E             B.N      ??RoadBrd_ParseString_733
   \   00004B1E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_589:
   \   00004B20   0x........         DC32     ?_20
   \   00004B24   0x........         DC32     ?_281
   \   00004B28   0x........         DC32     ?_282
   \   00004B2C   0x........         DC32     ?_283
   4507                        default:  
   4508                          strcpy( (char *)tempBffr2, "I2C ERROR: I2C reported unnown error.\r\n");
   \                     ??RoadBrd_ParseString_732: (+1)
   \   00004B30   0x....             LDR.N    R1,??DataTable4_80
   \   00004B32   0xA80B             ADD      R0,SP,#+44
   \   00004B34   0x.... 0x....      BL       strcpy
   4509                          // Re-Initialize I2C....It has been corrupted.
   4510                          MX_I2C1_Reset();
   \   00004B38   0x.... 0x....      BL       MX_I2C1_Reset
   4511                          break;
   4512                      }
   4513                      // Send string to UART..
   4514          #ifdef NUCLEO
   4515                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4516          #else
   4517                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_733: (+1)
   \   00004B3C   0xA90B             ADD      R1,SP,#+44
   \   00004B3E   0x2000             MOVS     R0,#+0
   \   00004B40   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004B44   0x0006             MOVS     R6,R0
   4518          #endif
   4519                     if (Status != HAL_OK)
   \   00004B46   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004B48   0x2E00             CMP      R6,#+0
   \   00004B4A   0xD002             BEQ.N    ??RoadBrd_ParseString_742
   4520                        return Status;
   \   00004B4C   0x0030             MOVS     R0,R6
   \   00004B4E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004B50   0xE010             B.N      ??RoadBrd_ParseString_4
   4521                      // Send Prompt to UART..
   4522                      strcpy( (char *)tempBffr2, "\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_742: (+1)
   \   00004B52   0x....             LDR.N    R1,??DataTable4_81
   \   00004B54   0xA80B             ADD      R0,SP,#+44
   \   00004B56   0x.... 0x....      BL       strcpy
   4523          #ifdef NUCLEO
   4524                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4525          #else
   4526                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004B5A   0xA90B             ADD      R1,SP,#+44
   \   00004B5C   0x2000             MOVS     R0,#+0
   \   00004B5E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004B62   0x0006             MOVS     R6,R0
   4527          #endif
   4528                      if (Status != HAL_OK)
   \   00004B64   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004B66   0x2E00             CMP      R6,#+0
   \   00004B68   0xD002             BEQ.N    ??RoadBrd_ParseString_3
   4529                        return Status;
   \   00004B6A   0x0030             MOVS     R0,R6
   \   00004B6C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004B6E   0xE001             B.N      ??RoadBrd_ParseString_4
   4530              } // EndElse ( Bypass )
   4531            return Status;
   \                     ??RoadBrd_ParseString_3: (+1)
   \   00004B70   0x0030             MOVS     R0,R6
   \   00004B72   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ParseString_4: (+1)
   \   00004B74   0xF50D 0x6DA0      ADD      SP,SP,#+1280
   \   00004B78   0xB00D             ADD      SP,SP,#+52
   \   00004B7A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   00004B7E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_595:
   \   00004B80   0x........         DC32     ?_284
   \   00004B84   0x........         DC32     ?_285
   4532          }
   4533          
   4534          /**
   4535            * @brief  This function tests the passed string to make sure it is Hex format.
   4536            * @param  char *ptr: Ptr to string to be tested. NULL terminated
   4537            * @retval int: 1: String is HEX.
   4538            *              0:   String is not HEX.
   4539            */

   \                                 In section .text, align 2, keep-with-next
   4540          int isHexNum(char *ptr)
   4541          {
   \                     isHexNum: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   4542            int Size, x, test1;
   4543            
   4544            Size = strlen(ptr);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0x0005             MOVS     R5,R0
   4545            test1 = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0007             MOVS     R7,R0
   4546            for (x=0; x<Size; x++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??isHexNum_0: (+1)
   \   00000014   0x42AE             CMP      R6,R5
   \   00000016   0xDA16             BGE.N    ??isHexNum_1
   4547            {
   4548              if (((ptr[x] <= '9') && (ptr[x] >= '0')) ||
   4549                  ((ptr[x] <= 'F') && (ptr[x] >= 'A')))
   \   00000018   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001A   0x283A             CMP      R0,#+58
   \   0000001C   0xDA02             BGE.N    ??isHexNum_2
   \   0000001E   0x5DA0             LDRB     R0,[R4, R6]
   \   00000020   0x2830             CMP      R0,#+48
   \   00000022   0xDA05             BGE.N    ??isHexNum_3
   \                     ??isHexNum_2: (+1)
   \   00000024   0x5DA0             LDRB     R0,[R4, R6]
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0xDA05             BGE.N    ??isHexNum_4
   \   0000002A   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002C   0x2841             CMP      R0,#+65
   \   0000002E   0xDB02             BLT.N    ??isHexNum_4
   4550                test1 = 0;
   \                     ??isHexNum_3: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0xE001             B.N      ??isHexNum_5
   4551              else
   4552                test1 = 1;
   \                     ??isHexNum_4: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x0007             MOVS     R7,R0
   4553              if (test1 == 1)
   \                     ??isHexNum_5: (+1)
   \   0000003A   0x2F01             CMP      R7,#+1
   \   0000003C   0xD101             BNE.N    ??isHexNum_6
   4554                return 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE002             B.N      ??isHexNum_7
   4555            }
   \                     ??isHexNum_6: (+1)
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xE7E6             B.N      ??isHexNum_0
   4556            return 1;
   \                     ??isHexNum_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \                     ??isHexNum_7: (+1)
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   4557          }
   4558          
   4559          /**
   4560            * @brief  This function converts the passed Hex String to an Integer value.
   4561            * @param  char *ptr: Ptr to string to be converted. NULL terminated
   4562            * @retval int: -1: Error in String
   4563            *              Value converted returned.
   4564            */

   \                                 In section .text, align 2, keep-with-next
   4565          int hatoi( char *ptr )
   4566          {
   \                     hatoi: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   4567            int Size, x;
   4568            int Value = 0;
   \   00000006   0x2700             MOVS     R7,#+0
   4569            int FinalValue = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
   4570            
   4571            Size = strlen(ptr);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x0005             MOVS     R5,R0
   4572            for (x=0; x<Size; x++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0006             MOVS     R6,R0
   \                     ??hatoi_0: (+1)
   \   00000018   0x42AE             CMP      R6,R5
   \   0000001A   0xDA1A             BGE.N    ??hatoi_1
   4573            {
   4574              if ((ptr[x] <= '9') && (ptr[x] >= '0'))
   \   0000001C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001E   0x283A             CMP      R0,#+58
   \   00000020   0xDA06             BGE.N    ??hatoi_2
   \   00000022   0x5DA0             LDRB     R0,[R4, R6]
   \   00000024   0x2830             CMP      R0,#+48
   \   00000026   0xDB03             BLT.N    ??hatoi_2
   4575                Value = ptr[x] - '0';
   \   00000028   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002A   0x3830             SUBS     R0,R0,#+48
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0xE00C             B.N      ??hatoi_3
   4576              else if((ptr[x] <= 'F') && (ptr[x] >= 'A'))
   \                     ??hatoi_2: (+1)
   \   00000030   0x5DA0             LDRB     R0,[R4, R6]
   \   00000032   0x2847             CMP      R0,#+71
   \   00000034   0xDA06             BGE.N    ??hatoi_4
   \   00000036   0x5DA0             LDRB     R0,[R4, R6]
   \   00000038   0x2841             CMP      R0,#+65
   \   0000003A   0xDB03             BLT.N    ??hatoi_4
   4577                Value = ptr[x] - 'A' + 10;
   \   0000003C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000003E   0x3837             SUBS     R0,R0,#+55
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0xE002             B.N      ??hatoi_3
   4578              else
   4579                return -1;
   \                     ??hatoi_4: (+1)
   \   00000044   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000048   0xE004             B.N      ??hatoi_5
   4580              FinalValue = FinalValue*16 + Value;
   \                     ??hatoi_3: (+1)
   \   0000004A   0xEB17 0x1808      ADDS     R8,R7,R8, LSL #+4
   4581            }
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xE7E2             B.N      ??hatoi_0
   4582            return FinalValue;
   \                     ??hatoi_1: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \                     ??hatoi_5: (+1)
   \   00000054   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   4583          }
   4584          
   4585          

   \                                 In section .text, align 2, keep-with-next
   4586          bool Tst_Bypass( void)
   4587          {
   4588            return Bypass;
   \                     Tst_Bypass: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_40
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   4589          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ParseString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_286

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ?_287

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ?_288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ?_289

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ?_290

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ?_291

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ?_292

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     ?_293

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     ?_294

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     ?_295

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     ?_296

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     ?_297

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     ?_298

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     ?_299

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_127

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ?_301

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_302

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_303

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_305

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_306

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_307

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_308

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ?_309

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     ?_310

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     ?_311

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     ?_312

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     ?_313

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     ?_314

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     ?_315

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     ?_316

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     ?_317

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     ?_318

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     ?_319

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     ?_320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     ?_321

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     ?_322

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     ?_323

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     ?_324

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     ?_325

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   0x........         DC32     ?_326

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   0x........         DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   0x........         DC32     ?_327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   0x........         DC32     ?_328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   0x........         DC32     ?_329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   0x........         DC32     ?_330

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   0x........         DC32     ?_331

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_35:
   \   00000000   0x........         DC32     ?_332

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_36:
   \   00000000   0x........         DC32     ?_333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_37:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_38:
   \   00000000   0x........         DC32     ?_334

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_39:
   \   00000000   0x........         DC32     ?_335

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_40:
   \   00000000   0x........         DC32     Bypass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_41:
   \   00000000   0x........         DC32     ?_336

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_42:
   \   00000000   0x........         DC32     ?_337

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_43:
   \   00000000   0x........         DC32     ?_338

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_44:
   \   00000000   0x........         DC32     ?_339

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_45:
   \   00000000   0x........         DC32     ?_340

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_46:
   \   00000000   0x........         DC32     ?_341

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_47:
   \   00000000   0x........         DC32     ?_342

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_48:
   \   00000000   0x........         DC32     ?_343

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_49:
   \   00000000   0x........         DC32     ?_344

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_50:
   \   00000000   0x........         DC32     ?_345

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_51:
   \   00000000   0x........         DC32     ?_346

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_52:
   \   00000000   0x........         DC32     ?_347

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_53:
   \   00000000   0x........         DC32     ?_348

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_54:
   \   00000000   0x........         DC32     ?_349

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_55:
   \   00000000   0x........         DC32     ?_350

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_56:
   \   00000000   0x........         DC32     ?_351

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_57:
   \   00000000   0x........         DC32     ?_352

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_58:
   \   00000000   0x........         DC32     ?_353

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_59:
   \   00000000   0x........         DC32     ?_354

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_60:
   \   00000000   0x........         DC32     ?_355

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_61:
   \   00000000   0x........         DC32     ?_356

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_62:
   \   00000000   0x........         DC32     ?_357

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_63:
   \   00000000   0x........         DC32     ?_358

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_64:
   \   00000000   0x........         DC32     ?_359

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_65:
   \   00000000   0x........         DC32     ?_360

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_66:
   \   00000000   0x........         DC32     ?_361

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_67:
   \   00000000   0x........         DC32     ?_362

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_68:
   \   00000000   0x........         DC32     ?_363

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_69:
   \   00000000   0x........         DC32     ?_364

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_70:
   \   00000000   0x........         DC32     ?_365

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_71:
   \   00000000   0x........         DC32     ?_366

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_72:
   \   00000000   0x........         DC32     ?_367

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_73:
   \   00000000   0x........         DC32     ?_368

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_74:
   \   00000000   0x........         DC32     ?_369

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_75:
   \   00000000   0x........         DC32     ?_370

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_76:
   \   00000000   0x........         DC32     ?_371

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_77:
   \   00000000   0x........         DC32     ?_372

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_78:
   \   00000000   0x........         DC32     ?_373

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_79:
   \   00000000   0x........         DC32     ?_374

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_80:
   \   00000000   0x........         DC32     ?_375

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_81:
   \   00000000   0x........         DC32     ?_376

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 0DH, 0AH, 20H, 54H, 2EH, 2EH
   \              0x0D 0x0A    
   \              0x20 0x54    
   \              0x2E 0x2E    
   \   00000008   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 54H, 45H
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x54 0x45    
   \   00000010   0x52 0x4D          DC8 52H, 4DH, 49H, 4EH, 41H, 54H, 49H, 4EH
   \              0x49 0x4E    
   \              0x41 0x54    
   \              0x49 0x4E    
   \   00000018   0x47 0x20          DC8 47H, 20H, 4DH, 4FH, 4EH, 49H, 54H, 4FH
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \   00000020   0x52 0x20          DC8 52H, 20H, 4DH, 4FH, 44H, 45H, 2EH, 2EH
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x2E    
   \   00000028   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 0DH
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \   00000030   0x0A 0x0D          DC8 0AH, 0DH, 0AH, 3EH, 20H, 0
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x52 0x44    
   \              0x53 0x4E    
   \              0x44 0x42    
   \              0x46 0x46    
   \              0x52 0x5F    
   \              0x46 0x49    
   \              0x4C 0x4C    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x52 0x6F          DC8 52H, 6FH, 61H, 64H, 20H, 53H, 6FH, 75H
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \   00000008   0x6E 0x64          DC8 6EH, 64H, 3AH, 20H, 52H, 6FH, 61H, 64H
   \              0x3A 0x20    
   \              0x52 0x6F    
   \              0x61 0x64    
   \   00000010   0x20 0x53          DC8 20H, 53H, 6FH, 75H, 6EH, 64H, 20H, 6CH
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x6C    
   \   00000018   0x6F 0x61          DC8 6FH, 61H, 64H, 65H, 64H, 2CH, 20H, 70H
   \              0x64 0x65    
   \              0x64 0x2C    
   \              0x20 0x70    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 65H, 64H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 61H, 6EH, 64H, 20H, 73H, 65H
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000030   0x6E 0x74          DC8 6EH, 74H, 20H, 74H, 6FH, 20H, 46H, 46H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x46 0x46    
   \   00000038   0x54 0x20          DC8 54H, 20H, 42H, 69H, 6EH, 73H, 2EH, 0DH
   \              0x42 0x69    
   \              0x6E 0x73    
   \              0x2E 0x0D    
   \   00000040   0x0A 0x00          DC8 0AH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 0-15.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x30    
   \              0x2D 0x31    
   \              0x35 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT0-15:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 0-15: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 16-31.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x31    
   \              0x36 0x2D    
   \              0x33 0x31    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT16-31:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 16-31: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 32-47.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x33    
   \              0x32 0x2D    
   \              0x34 0x37    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT32-47:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 32-47: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 48-63.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x34    
   \              0x38 0x2D    
   \              0x36 0x33    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT48-63:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 48-63: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x52 0x6F          DC8 "Road Sound: Results of save Buffer.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x42 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTBFFR_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x42 0x46    
   \              0x46 0x52    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x25 0x30          DC8 "%04d "
   \              0x34 0x64    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x3C 0x2F          DC8 "</STATUS>"
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x20 0x20          DC8 "     ---COMPLETE---"
   \              0x20 0x20    
   \              0x20 0x2D    
   \              0x2D 0x2D    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTCLR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x43 0x4C    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x52 0x6F          DC8 "Road Sound: All buffers cleared.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x41 0x6C    
   \              0x6C 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x73 0x20    
   \              0x63 0x6C    
   \              0x65 0x61    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_NOSUPPORT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x4E 0x4F    
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor Passed.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor FAILED.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x20 0x50          DC8 20H, 50H, 52H, 45H, 53H, 53H, 55H, 52H
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \   00000008   0x45 0x28          DC8 45H, 28H, 50H, 52H, 45H, 53H, 53H, 5FH
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x5F    
   \   00000010   0x4F 0x55          DC8 4FH, 55H, 54H, 5FH, 48H, 2EH, 2EH, 2EH
   \              0x54 0x5F    
   \              0x48 0x2E    
   \              0x2E 0x2E    
   \   00000018   0x50 0x52          DC8 50H, 52H, 45H, 53H, 53H, 5FH, 4FH, 55H
   \              0x45 0x53    
   \              0x53 0x5F    
   \              0x4F 0x55    
   \   00000020   0x54 0x5F          DC8 54H, 5FH, 4CH, 2EH, 2EH, 2EH, 50H, 52H
   \              0x4C 0x2E    
   \              0x2E 0x2E    
   \              0x50 0x52    
   \   00000028   0x45 0x53          DC8 45H, 53H, 53H, 5FH, 4FH, 55H, 54H, 5FH
   \              0x53 0x5F    
   \              0x4F 0x55    
   \              0x54 0x5F    
   \   00000030   0x58 0x4C          DC8 58H, 4CH, 29H, 0DH, 0AH, 0
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x20 0x50          DC8 " PRESSURE: %s/%s\015\012"
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x3C 0x53          DC8 "<STATUS>PRESSURE: %s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x55    
   \              0x52 0x45    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x20 0x50          DC8 " PRESSURE:  "
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x20 0x20          DC8 "  -  %08x\015\012"
   \              0x2D 0x20    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure FAILED.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x41 0x38          DC8 "A8 Command...Read Temperature Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x20 0x20          DC8 "     TempC: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x20 0x20          DC8 "     TempF: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x46    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_39:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I Passed.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_40:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I FAILED.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_41:
   \   00000000   0x45 0x52          DC8 "ERROR: Not a legal command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_42:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_THERMAL_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x41 0x4C    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_43:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Shunt Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x56 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_44:
   \   00000000   0x20 0x20          DC8 "     Thermistor DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_45:
   \   00000000   0x20 0x20          DC8 "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x33 0x33    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_46:
   \   00000000   0x20 0x20          DC8 "     SHNT VLTG DATA: "
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x48 0x4E    
   \              0x54 0x20    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_47:
   \   00000000   0x20 0x20          DC8 "     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_48:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6FH, 6CH, 20H, 45H, 79H, 65H
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \   00000008   0x2F 0x47          DC8 2FH, 47H, 72H, 69H, 64H, 20H, 45H, 79H
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \   00000010   0x65 0x20          DC8 65H, 20H, 53H, 65H, 6EH, 73H, 6FH, 72H
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 49H, 6EH, 69H, 74H, 69H, 61H
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \   00000020   0x6C 0x69          DC8 6CH, 69H, 7AH, 61H, 74H, 69H, 6FH, 6EH
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000028   0x20 0x43          DC8 20H, 43H, 6FH, 6DH, 70H, 6CH, 65H, 74H
   \              0x6F 0x6D    
   \              0x70 0x6C    
   \              0x65 0x74    
   \   00000030   0x65 0x2E          DC8 65H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_49:
   \   00000000   0x43 0x6F          DC8 "Cool Eye/Grid Eye Sensor: Reset Complete.\015\012"
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \              0x2F 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_50:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Bus Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_51:
   \   00000000   0x20 0x20          DC8 "     BUS VOLTAGE DATA: "
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x20 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_52:
   \   00000000   0x3C 0x53          DC8 "<STATUS>BUS_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x42 0x55    
   \              0x53 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_53:
   \   00000000   0x20 0x20          DC8 "     Bus Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_54:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor: Initialization Complete.\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_55:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x56    
   \              0x4C 0x54    
   \              0x47 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_56:
   \   00000000   0x20 0x20          DC8 "     Shunt Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x68 0x75    
   \              0x6E 0x74    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_57:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Current...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_58:
   \   00000000   0x20 0x20          DC8 "     CURRENT DATA: "
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_59:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_CRNT:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x43    
   \              0x52 0x4E    
   \              0x54 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_60:
   \   00000000   0x20 0x20          DC8 "     Current: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_61:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Power...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_62:
   \   00000000   0x20 0x20          DC8 "     POWER DATA: "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_63:
   \   00000000   0x3C 0x53          DC8 "<STATUS>POWER:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x4F    
   \              0x57 0x45    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_64:
   \   00000000   0x20 0x20          DC8 "     Power: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_65:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_C_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x43 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_66:
   \   00000000   0x48 0x75          DC8 "Humidity SENSOR...\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_67:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_68:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_69:
   \   00000000   0x3C 0x53          DC8 "<STATUS>HUMIDITY:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x48 0x55    
   \              0x4D 0x49    
   \              0x44 0x49    
   \              0x54 0x59    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_70:
   \   00000000   0x20 0x20          DC8 "     Humidity: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_71:
   \   00000000   0x48 0x75          DC8 "Humidity Sensor: Initialization Complete.\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_72:
   \   00000000   0x20 0x20          DC8 "     Humidity: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_73:
   \   00000000   0x54 0x42          DC8 "TBD: Read Temp and Pressure NOT IMPLEMENTED\015\012"
   \              0x44 0x3A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x49 0x4D    
   \              0x50 0x4C    
   \              0x45 0x4D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_74:
   \   00000000   0x4E 0x4F          DC8 "NO Action...(0x00).\015\012"
   \              0x20 0x41    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x2E 0x2E    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x30 0x29    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_75:
   \   00000000   0x54 0x45          DC8 "TEMP SENSOR...\015\012"
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_76:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x43 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x2F    
   \              0x2F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_77:
   \   00000000   0x20 0x20          DC8 "     TempC: %s/%s     TempF: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_78:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor...\015\012"
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_79:
   \   00000000   0x20 0x52          DC8 20H, 52H, 47H, 42H, 28H, 52H, 45H, 44H
   \              0x47 0x42    
   \              0x28 0x52    
   \              0x45 0x44    
   \   00000008   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 52H, 45H, 44H, 6CH
   \              0x62 0x2C    
   \              0x52 0x45    
   \              0x44 0x6C    
   \   00000010   0x73 0x62          DC8 73H, 62H, 2CH, 47H, 52H, 45H, 45H, 4EH
   \              0x2C 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \   00000018   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 47H, 52H, 45H, 45H
   \              0x62 0x2C    
   \              0x47 0x52    
   \              0x45 0x45    
   \   00000020   0x4E 0x6C          DC8 4EH, 6CH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000028   0x45 0x6D          DC8 45H, 6DH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000030   0x45 0x6C          DC8 45H, 6CH, 73H, 62H, 29H, 0DH, 0AH, 0
   \              0x73 0x62    
   \              0x29 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_80:
   \   00000000   0x20 0x20          DC8 "       DATA: "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_81:
   \   00000000   0x3C 0x53          DC8 "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x52 0x45    
   \              0x44 0x3A    
   \              0x25 0x73    
   \              0x2F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x42 0x4C    
   \              0x55 0x45    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_82:
   \   00000000   0x20 0x20          DC8 "    Red: "
   \              0x20 0x20    
   \              0x52 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_83:
   \   00000000   0x20 0x20          DC8 "    Green: "
   \              0x20 0x20    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_84:
   \   00000000   0x20 0x20          DC8 "    Blue: "
   \              0x20 0x20    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_85:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 44H, 45H, 46H
   \              0x74 0x68    
   \              0x20 0x44    
   \              0x45 0x46    
   \   00000038   0x41 0x55          DC8 41H, 55H, 4CH, 54H, 20H, 56H, 61H, 6CH
   \              0x4C 0x54    
   \              0x20 0x56    
   \              0x61 0x6C    
   \   00000040   0x75 0x65          DC8 75H, 65H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000047   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_86:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x53 0x59          DC8 53H, 59H, 4EH, 54H, 41H, 58H, 20H, 45H
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \   00000020   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 20H, 50H, 61H
   \              0x6F 0x72    
   \              0x2E 0x20    
   \              0x50 0x61    
   \   00000028   0x72 0x61          DC8 72H, 61H, 6DH, 65H, 74H, 65H, 72H, 73H
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \   00000030   0x20 0x61          DC8 20H, 61H, 72H, 65H, 20H, 6EH, 6FH, 74H
   \              0x72 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_87:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 4EH, 6FH, 74H
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \   00000028   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000030   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 6DH, 61H, 74H, 2EH
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \   00000038   0x20 0x50          DC8 20H, 50H, 75H, 6EH, 63H, 74H, 75H, 61H
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000040   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0DH, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_88:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 50H, 61H, 72H, 61H
   \              0x52 0x3A    
   \              0x50 0x61    
   \              0x72 0x61    
   \   00000028   0x6D 0x65          DC8 6DH, 65H, 74H, 65H, 72H, 73H, 20H, 6EH
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x6E    
   \   00000030   0x6F 0x74          DC8 6FH, 74H, 20H, 48H, 45H, 58H, 20H, 56H
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \   00000038   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 2EH, 0DH, 0AH, 0
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_89:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x4F 0x50          DC8 4FH, 50H, 5FH, 4DH, 4FH, 44H, 45H, 2EH
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_90:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x44 0x53          DC8 44H, 53H, 5FH, 52H, 41H, 4EH, 47H, 45H
   \              0x5F 0x52    
   \              0x41 0x4E    
   \              0x47 0x45    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_91:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x41 0x44          DC8 41H, 44H, 43H, 5FH, 52H, 53H, 4CH, 2EH
   \              0x43 0x5F    
   \              0x52 0x53    
   \              0x4C 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_92:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 2EH, 0DH, 0AH, 0
   \              0x4E 0x43    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_93:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 41H, 44H, 4AH, 53H
   \              0x50 0x5F    
   \              0x41 0x44    
   \              0x4A 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_94:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 4FH, 46H, 46H, 53H
   \              0x50 0x5F    
   \              0x4F 0x46    
   \              0x46 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_95:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 41H, 53H, 53H, 47H
   \              0x54 0x5F    
   \              0x41 0x53    
   \              0x53 0x47    
   \   00000038   0x4E 0x2E          DC8 4EH, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_96:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 50H, 45H, 52H, 53H
   \              0x54 0x5F    
   \              0x50 0x45    
   \              0x52 0x53    
   \   00000038   0x49 0x53          DC8 49H, 53H, 54H, 2EH, 0DH, 0AH, 0
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_97:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4E          DC8 43H, 4EH, 56H, 52H, 53H, 4EH, 5FH, 49H
   \              0x56 0x52    
   \              0x53 0x4E    
   \              0x5F 0x49    
   \   00000038   0x4E 0x54          DC8 4EH, 54H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_98:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 55H, 53H, 45H
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x45    
   \   00000038   0x52 0x20          DC8 52H, 20H, 56H, 61H, 6CH, 75H, 65H, 73H
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x73    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_99:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor Status: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_100:
   \   00000000   0x25 0x30          DC8 "%02x / "
   \              0x32 0x78    
   \              0x20 0x2F    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_101:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x52 0x45          DC8 52H, 45H, 53H, 45H, 54H, 20H, 43H, 4DH
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x4D    
   \   00000020   0x44 0x20          DC8 44H, 20H, 53H, 65H, 6EH, 74H, 20H, 53H
   \              0x53 0x65    
   \              0x6E 0x74    
   \              0x20 0x53    
   \   00000028   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 66H, 75H, 6CH
   \              0x63 0x65    
   \              0x73 0x66    
   \              0x75 0x6C    
   \   00000030   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_102:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor ID Code: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_103:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered UP.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x55    
   \              0x50 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_104:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered DOWN.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_105:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal 5V Power Plane Command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x35    
   \              0x56 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x50 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_106:
   \   00000000   0x54 0x20          DC8 "T ERROR: Not a legal command.\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_107:
   \   00000000   0x54 0x49          DC8 "TI SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_108:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_109:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_110:
   \   00000000   0x54 0x49          DC8 54H, 49H, 53H, 20H, 53H, 59H, 4EH, 54H
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_111:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x.\015\012"
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_112:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x."
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x78          DC8 "%x."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_114:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Not correct format.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_115:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_116:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_117:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 52H, 45H, 43H, 45H, 49H, 56H
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \   00000028   0x45 0x44          DC8 45H, 44H, 20H, 6EH, 6FH, 74H, 20H, 48H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \   00000030   0x45 0x58          DC8 45H, 58H, 20H, 56H, 61H, 6CH, 75H, 65H
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_118:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x.\015\012"
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_119:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Data not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_120:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x."
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_121:
   \   00000000   0x20 0x20          DC8 "     DATA: "
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_122:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Not correct format.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_123:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_124:
   \   00000000   0x54 0x49          DC8 54H, 49H, 51H, 20H, 53H, 59H, 4EH, 54H
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_125:
   \   00000000   0x3C 0x53          DC8 3CH, 53H, 54H, 41H, 54H, 55H, 53H, 3EH
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \   00000008   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000010   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000018   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000020   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000028   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000030   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 3CH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \   00000038   0x53 0x54          DC8 53H, 54H, 41H, 54H, 55H, 53H, 3EH, 0
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_126:
   \   00000000   0x25 0x73          DC8 "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\015\012"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_127:
   \   00000000   0x43 0x4F          DC8 "COMPLETE"
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_128:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_129:
   \   00000000   0x50 0x72          DC8 "Pressure TASKING ERROR!"
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_130:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_131:
   \   00000000   0x48 0x75          DC8 "Humidity TASKING ERROR!"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_132:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x45    
   \              0x52 0x41    
   \              0x54 0x55    
   \              0x52 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_133:
   \   00000000   0x41 0x4D          DC8 "AMBIENT TEMPERATURE TASKING ERROR!"
   \              0x42 0x49    
   \              0x45 0x4E    
   \              0x54 0x20    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x45 0x52    
   \              0x41 0x54    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_134:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x49    
   \              0x52 0x54    
   \              0x45 0x4D    
   \              0x50 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_135:
   \   00000000   0x47 0x52          DC8 "GRID EYE/COOL EYE TASKING ERROR!"
   \              0x49 0x44    
   \              0x20 0x45    
   \              0x59 0x45    
   \              0x2F 0x43    
   \              0x4F 0x4F    
   \              0x4C 0x20    
   \              0x45 0x59    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_136:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_137:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_138:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_139:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_140:
   \   00000000   0x25 0x73          DC8 "%s %f %f"
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_141:
   \   00000000   0x50 0x61          DC8 "Parms: %s, %f, %f.\015\012"
   \              0x72 0x6D    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x73 0x2C    
   \              0x20 0x25    
   \              0x66 0x2C    
   \              0x20 0x25    
   \              0x66 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_142:
   \   00000000   0x30 0x30          DC8 "0002"
   \              0x30 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_143:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_144:
   \   00000000   0x53 0x68          DC8 "Shnt_Vltg Set COMPLETE.\015\012"
   \              0x6E 0x74    
   \              0x5F 0x56    
   \              0x6C 0x74    
   \              0x67 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_145:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_146:
   \   00000000   0x54 0x43          DC8 "TCS SET ERROR: FAILED.\015\012"
   \              0x53 0x20    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_147:
   \   00000000   0x30 0x30          DC8 "0004"
   \              0x30 0x34    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_148:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_149:
   \   00000000   0x43 0x75          DC8 "Current Set COMPLETE."
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_150:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_151:
   \   00000000   0x30 0x30          DC8 "0006"
   \              0x30 0x36    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_152:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_153:
   \   00000000   0x50 0x6F          DC8 "Power Set COMPLETE."
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_154:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_155:
   \   00000000   0x30 0x30          DC8 "0008"
   \              0x30 0x38    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_156:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_157:
   \   00000000   0x56 0x6F          DC8 "Voltage Set COMPLETE."
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_158:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_159:
   \   00000000   0x30 0x30          DC8 "000A"
   \              0x30 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_160:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_161:
   \   00000000   0x54 0x65          DC8 "TempC Set COMPLETE."
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_162:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_163:
   \   00000000   0x30 0x30          DC8 "000B"
   \              0x30 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_164:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_165:
   \   00000000   0x54 0x65          DC8 "TempF Set COMPLETE."
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_166:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_167:
   \   00000000   0x30 0x30          DC8 "0011"
   \              0x31 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_168:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_169:
   \   00000000   0x50 0x72          DC8 "Pressure Set COMPLETE."
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_170:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_171:
   \   00000000   0x30 0x30          DC8 "0030"
   \              0x33 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_172:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_173:
   \   00000000   0x48 0x75          DC8 "Humidity Set COMPLETE."
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_174:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_175:
   \   00000000   0x30 0x30          DC8 "0032"
   \              0x33 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_176:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_177:
   \   00000000   0x48 0x75          DC8 "Hum_TempC Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_178:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_179:
   \   00000000   0x30 0x30          DC8 "0033"
   \              0x33 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_180:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_181:
   \   00000000   0x48 0x75          DC8 "Hum_TempF Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_182:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_183:
   \   00000000   0x30 0x30          DC8 "000D"
   \              0x30 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_184:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_185:
   \   00000000   0x52 0x47          DC8 "RGB_Red Set COMPLETE."
   \              0x42 0x5F    
   \              0x52 0x65    
   \              0x64 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_186:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_187:
   \   00000000   0x30 0x30          DC8 "000E"
   \              0x30 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_188:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_189:
   \   00000000   0x52 0x47          DC8 "RGB_Green Set COMPLETE."
   \              0x42 0x5F    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_190:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_191:
   \   00000000   0x30 0x30          DC8 "000F"
   \              0x30 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_192:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_193:
   \   00000000   0x52 0x47          DC8 "RGB_Blue Set COMPLETE."
   \              0x42 0x5F    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_194:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_195:
   \   00000000   0x30 0x30          DC8 "0017"
   \              0x31 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_196:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_197:
   \   00000000   0x54 0x68          DC8 "Therm_C Set COMPLETE."
   \              0x65 0x72    
   \              0x6D 0x5F    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_198:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_199:
   \   00000000   0x30 0x30          DC8 "0019"
   \              0x31 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_200:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_201:
   \   00000000   0x52 0x6F          DC8 "RoadT_1C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x31 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_202:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_203:
   \   00000000   0x30 0x30          DC8 "001B"
   \              0x31 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_204:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_205:
   \   00000000   0x52 0x6F          DC8 "RoadT_2C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x32 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_206:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_207:
   \   00000000   0x30 0x30          DC8 "001D"
   \              0x31 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_208:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_209:
   \   00000000   0x52 0x6F          DC8 "RoadT_3C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x33 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_210:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_211:
   \   00000000   0x30 0x30          DC8 "001F"
   \              0x31 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_212:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_213:
   \   00000000   0x52 0x6F          DC8 "RoadT_4C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x34 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_214:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_215:
   \   00000000   0x30 0x30          DC8 "0021"
   \              0x32 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_216:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_217:
   \   00000000   0x52 0x6F          DC8 "RoadT_5C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x35 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_218:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_219:
   \   00000000   0x30 0x30          DC8 "0023"
   \              0x32 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_220:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_221:
   \   00000000   0x52 0x6F          DC8 "RoadT_6C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x36 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_222:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_223:
   \   00000000   0x30 0x30          DC8 "0025"
   \              0x32 0x35    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_224:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_225:
   \   00000000   0x52 0x6F          DC8 "RoadT_7C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x37 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_226:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_227:
   \   00000000   0x30 0x30          DC8 "0027"
   \              0x32 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_228:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_229:
   \   00000000   0x52 0x6F          DC8 "RoadT_8C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x38 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_230:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_231:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADUUID</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x55    
   \              0x55 0x49    
   \              0x44 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_232:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad UUID.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_233:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Wrong Number of Parameters.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x57 0x72    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_234:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TCR:%s\\"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x43    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x5C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_235:
   \   00000000   0x43 0x41          DC8 "CALIBRATION DATA\015\012Date: %s\015\012"
   \              0x4C 0x49    
   \              0x42 0x52    
   \              0x41 0x54    
   \              0x49 0x4F    
   \              0x4E 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x0D 0x0A    
   \              0x44 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_236:
   \   00000000   0x4E 0x61          DC8 "Name\t\t        UUID\t\tSlope\t\tOffset\015\012"
   \              0x6D 0x65    
   \              0x09 0x09    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x09 0x09    
   \              0x53 0x6C    
   \              0x6F 0x70    
   \              0x65 0x09    
   \              0x09 0x4F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_237:
   \   00000000   0x25 0x73          DC8 "%s:0002//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_238:
   \   00000000   0x25 0x73          DC8 "%s\t0002\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_239:
   \   00000000   0x25 0x73          DC8 "%s:0004//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x34 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_240:
   \   00000000   0x25 0x73          DC8 "%s\t        0004\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x34 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_241:
   \   00000000   0x25 0x73          DC8 "%s:0006//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x36 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_242:
   \   00000000   0x25 0x73          DC8 "%s\t0006\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x36 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_243:
   \   00000000   0x25 0x73          DC8 "%s:0008//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x38 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_244:
   \   00000000   0x25 0x73          DC8 "%s\t        0008\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x38 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_245:
   \   00000000   0x25 0x73          DC8 "%s:000A//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x41 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_246:
   \   00000000   0x25 0x73          DC8 "%s\t000A\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x41 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_247:
   \   00000000   0x25 0x73          DC8 "%s:000B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_248:
   \   00000000   0x25 0x73          DC8 "%s\t000B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_249:
   \   00000000   0x25 0x73          DC8 "%s:0011//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_250:
   \   00000000   0x25 0x73          DC8 "%s\t0011\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_251:
   \   00000000   0x25 0x73          DC8 "%s:0030//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x30 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_252:
   \   00000000   0x25 0x73          DC8 "%s\t0030\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x30 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_253:
   \   00000000   0x25 0x73          DC8 "%s:0032//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_254:
   \   00000000   0x25 0x73          DC8 "%s\t0032\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_255:
   \   00000000   0x25 0x73          DC8 "%s:0033//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_256:
   \   00000000   0x25 0x73          DC8 "%s\t0033\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_257:
   \   00000000   0x25 0x73          DC8 "%s:000D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_258:
   \   00000000   0x25 0x73          DC8 "%s\t        000D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_259:
   \   00000000   0x25 0x73          DC8 "%s:000E//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x45 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_260:
   \   00000000   0x25 0x73          DC8 "%s\t000E\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x45 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_261:
   \   00000000   0x25 0x73          DC8 "%s:000F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_262:
   \   00000000   0x25 0x73          DC8 "%s\t000F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_263:
   \   00000000   0x25 0x73          DC8 "%s:0017//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_264:
   \   00000000   0x25 0x73          DC8 "%s\t        0017\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x31    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_265:
   \   00000000   0x25 0x73          DC8 "%s:0019//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x39 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_266:
   \   00000000   0x25 0x73          DC8 "%s\t0019\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x39 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_267:
   \   00000000   0x25 0x73          DC8 "%s:001B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_268:
   \   00000000   0x25 0x73          DC8 "%s\t001B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_269:
   \   00000000   0x25 0x73          DC8 "%s:001D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_270:
   \   00000000   0x25 0x73          DC8 "%s\t001D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_271:
   \   00000000   0x25 0x73          DC8 "%s:001F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_272:
   \   00000000   0x25 0x73          DC8 "%s\t001F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_273:
   \   00000000   0x25 0x73          DC8 "%s:0021//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_274:
   \   00000000   0x25 0x73          DC8 "%s\t0021\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_275:
   \   00000000   0x25 0x73          DC8 "%s:0023//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_276:
   \   00000000   0x25 0x73          DC8 "%s\t0023\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_277:
   \   00000000   0x25 0x73          DC8 "%s:0025//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x35 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_278:
   \   00000000   0x25 0x73          DC8 "%s\t0025\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x35 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_279:
   \   00000000   0x25 0x73          DC8 "%s:0027//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_280:
   \   00000000   0x25 0x73          DC8 "%s\t0027\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_281:
   \   00000000   0x0D 0x0A          DC8 "\015\012     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_282:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_283:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Not correct format.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_284:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_285:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_286:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_287:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCT_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_288:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCI_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x49 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_289:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCI_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x49    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_290:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_DRIVER:%04x</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x44    
   \              0x52 0x49    
   \              0x56 0x45    
   \              0x52 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_291:
   \   00000000   0x44 0x72          DC8 "Driver Status: %04x\015\012"
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_292:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_RESET_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x52    
   \              0x45 0x53    
   \              0x45 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_293:
   \   00000000   0x52 0x45          DC8 "RESET CALLED BUT NO RESPONSE!!\015\012"
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x44    
   \              0x20 0x42    
   \              0x55 0x54    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x52 0x45    
   \              0x53 0x50    
   \              0x4F 0x4E    
   \              0x53 0x45    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_294:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TK_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_295:
   \   00000000   0x54 0x4B          DC8 "TK SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_296:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_297:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_298:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_299:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_300:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSR_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x52 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_301:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_302:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_303:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_304:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_305:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSS_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x53 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_306:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_307:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_308:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_309:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_310:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKST_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x54 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_311:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_312:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_313:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_314:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_315:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSB_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x42 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_316:
   \   00000000   0x54 0x4B          DC8 "TKS ERROR: Not a legal command.\015\012"
   \              0x53 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_317:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRR:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x52 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_318:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_319:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRS:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x53 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_320:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012\015\012> "
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_321:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRT:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x54 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_322:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d.\015\012\015\012> "
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_323:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRB:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x42 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_324:
   \   00000000   0x42 0x6F          DC8 "Boot Delay: %d Seconds.\015\012\015\012> "
   \              0x6F 0x74    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_325:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x52 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_326:
   \   00000000   0x54 0x4B          DC8 "TKR ERROR: Not a legal command.\015\012"
   \              0x52 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_327:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TU_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x55    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_328:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_329:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUE_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x45    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_330:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_331:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUD_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x44    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_332:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_333:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not a legal command.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_334:
   \   00000000   0x42 0x47          DC8 "BGM111 MONITOR MODE.\015\012\015\012"
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x20 0x4D    
   \              0x4F 0x4E    
   \              0x49 0x54    
   \              0x4F 0x52    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_335:
   \   00000000   0x55 0x73          DC8 "Use <ESC> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_336:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TF_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x46    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_337:
   \   00000000   0x46 0x6C          DC8 "Flash Frame Variables Reset to Factory Values.\015\012"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x56 0x61    
   \              0x72 0x69    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x73 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x46    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_338:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TL_ERROR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x4C    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_339:
   \   00000000   0x43 0x6F          DC8 "Code Locked for Programming!\015\012\015\012"
   \              0x64 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x50 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x6D    
   \              0x69 0x6E    
   \              0x67 0x21    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_340:
   \   00000000   0x20 0x20          DC8 "   HARD RESET NEEDED TO EXIT MODE\015\012"
   \              0x20 0x48    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x4E 0x45    
   \              0x45 0x44    
   \              0x45 0x44    
   \              0x20 0x54    
   \              0x4F 0x20    
   \              0x45 0x58    
   \              0x49 0x54    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_341:
   \   00000000   0x25 0x73          DC8 "%s %s"
   \              0x20 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_342:
   \   00000000   0x54 0x53          DC8 "TS: %s\015\012"
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_343:
   \   00000000   0x4E 0x4F          DC8 "NO ERROR FOUND.\015\012"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x20 0x46    
   \              0x4F 0x55    
   \              0x4E 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_344:
   \   00000000   0x45 0x52          DC8 "ERROR: ILLEGAL S-Record.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x4C 0x4C    
   \              0x45 0x47    
   \              0x41 0x4C    
   \              0x20 0x53    
   \              0x2D 0x52    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_345:
   \   00000000   0x45 0x52          DC8 "ERROR: ILLEGAL Record.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x4C 0x4C    
   \              0x45 0x47    
   \              0x41 0x4C    
   \              0x20 0x52    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_346:
   \   00000000   0x45 0x52          DC8 "ERROR: Reserved S-Record Type.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x64 0x20    
   \              0x53 0x2D    
   \              0x52 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_347:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal Byte Count.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x42    
   \              0x79 0x74    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_348:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal Byte Data.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x42    
   \              0x79 0x74    
   \              0x65 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_349:
   \   00000000   0x45 0x52          DC8 "ERROR: Checksum did not match data.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x43    
   \              0x68 0x65    
   \              0x63 0x6B    
   \              0x73 0x75    
   \              0x6D 0x20    
   \              0x64 0x69    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_350:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 30H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x30 0x5F    
   \   00000010   0x48 0x45          DC8 48H, 45H, 41H, 44H, 45H, 52H, 3AH, 20H
   \              0x41 0x44    
   \              0x45 0x52    
   \              0x3A 0x20    
   \   00000018   0x56 0x65          DC8 56H, 65H, 6EH, 64H, 6FH, 72H, 20H, 73H
   \              0x6E 0x64    
   \              0x6F 0x72    
   \              0x20 0x73    
   \   00000020   0x70 0x65          DC8 70H, 65H, 63H, 69H, 66H, 69H, 63H, 20H
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x63 0x20    
   \   00000028   0x41 0x53          DC8 41H, 53H, 43H, 49H, 49H, 20H, 74H, 65H
   \              0x43 0x49    
   \              0x49 0x20    
   \              0x74 0x65    
   \   00000030   0x78 0x74          DC8 78H, 74H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_351:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 31H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x31 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 31H, 36H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x31 0x36    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_352:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 32H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x32 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 32H, 34H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x32 0x34    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_353:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 33H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x33 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 33H, 32H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x33 0x32    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_354:
   \   00000000   0x52 0x65          DC8 "Record Type: S4_RESERVED\015\012"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x34 0x5F    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_355:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 35H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x35 0x5F    
   \   00000010   0x43 0x4F          DC8 43H, 4FH, 55H, 4EH, 54H, 3AH, 20H, 31H
   \              0x55 0x4E    
   \              0x54 0x3A    
   \              0x20 0x31    
   \   00000018   0x36 0x2D          DC8 36H, 2DH, 62H, 69H, 74H, 20H, 63H, 6FH
   \              0x62 0x69    
   \              0x74 0x20    
   \              0x63 0x6F    
   \   00000020   0x75 0x6E          DC8 75H, 6EH, 74H, 20H, 6FH, 66H, 20H, 53H
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \   00000028   0x31 0x20          DC8 31H, 20H, 2FH, 20H, 53H, 32H, 20H, 2FH
   \              0x2F 0x20    
   \              0x53 0x32    
   \              0x20 0x2F    
   \   00000030   0x20 0x53          DC8 20H, 53H, 33H, 20H, 72H, 65H, 63H, 6FH
   \              0x33 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \   00000038   0x72 0x64          DC8 72H, 64H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_356:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 36H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x36 0x5F    
   \   00000010   0x43 0x4F          DC8 43H, 4FH, 55H, 4EH, 54H, 3AH, 20H, 32H
   \              0x55 0x4E    
   \              0x54 0x3A    
   \              0x20 0x32    
   \   00000018   0x34 0x2D          DC8 34H, 2DH, 62H, 69H, 74H, 20H, 63H, 6FH
   \              0x62 0x69    
   \              0x74 0x20    
   \              0x63 0x6F    
   \   00000020   0x75 0x6E          DC8 75H, 6EH, 74H, 20H, 6FH, 66H, 20H, 53H
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \   00000028   0x31 0x20          DC8 31H, 20H, 2FH, 20H, 53H, 32H, 20H, 2FH
   \              0x2F 0x20    
   \              0x53 0x32    
   \              0x20 0x2F    
   \   00000030   0x20 0x53          DC8 20H, 53H, 33H, 20H, 72H, 65H, 63H, 6FH
   \              0x33 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \   00000038   0x72 0x64          DC8 72H, 64H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_357:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 37H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x37 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x33 0x32          DC8 33H, 32H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_358:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 38H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x38 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x32 0x34          DC8 32H, 34H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_359:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 39H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x39 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x31 0x36          DC8 31H, 36H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_360:
   \   00000000   0x52 0x65          DC8 "Record Type: UNKNOWN.\015\012"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x55    
   \              0x4E 0x4B    
   \              0x4E 0x4F    
   \              0x57 0x4E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_361:
   \   00000000   0x42 0x79          DC8 "Byte Count: %08x\015\012"
   \              0x74 0x65    
   \              0x20 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_362:
   \   00000000   0x41 0x64          DC8 "Address: %08x\015\012"
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_363:
   \   00000000   0x25 0x30          DC8 "%02x "
   \              0x32 0x78    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_364:
   \   00000000   0x43 0x68          DC8 "Checksum: %02x\015\012"
   \              0x65 0x63    
   \              0x6B 0x73    
   \              0x75 0x6D    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_365:
   \   00000000   0x54 0x53          DC8 "TS SYNTAX ERROR: Too many parameters.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x6F 0x6F    
   \              0x20 0x6D    
   \              0x61 0x6E    
   \              0x79 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_366:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: BERR: Bus Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_367:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: ARLO: Arbitration lost reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x52 0x4C    
   \              0x4F 0x3A    
   \              0x20 0x41    
   \              0x72 0x62    
   \              0x69 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x6F 0x73    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_368:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: AF: Acknowledge failure reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x46 0x3A    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6C    
   \              0x65 0x64    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_369:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: OVR: Overrun/Underrun reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4F    
   \              0x56 0x52    
   \              0x3A 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x6E 0x2F    
   \              0x55 0x6E    
   \              0x64 0x65    
   \              0x72 0x72    
   \              0x75 0x6E    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_370:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: DMA: DMA Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x3A 0x20    
   \              0x44 0x4D    
   \              0x41 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_371:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: TIMEOUT: Timeout Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x49 0x4D    
   \              0x45 0x4F    
   \              0x55 0x54    
   \              0x3A 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_372:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: Unknown Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x55    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_373:
   \   00000000   0x49 0x32          DC8 "I2C BUSY: I2C reported BUSY error.\015\012"
   \              0x43 0x20    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3A 0x20    
   \              0x49 0x32    
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x59 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_374:
   \   00000000   0x49 0x32          DC8 "I2C TIMEOUT: I2C reported TIMEOUT.\015\012"
   \              0x43 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_375:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: I2C reported unnown error.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_376:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012> "
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
   4590          
   4591          /*void sleep(void) {
   4592          //    TimMasterHandle.Instance = TIM5;
   4593           
   4594              // Disable HAL tick interrupt
   4595          //    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4596           
   4597              // Request to enter SLEEP mode
   4598              HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
   4599           
   4600              // Enable HAL tick interrupt
   4601          //    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4602          }*/
   4603           
   4604          /*void deepsleep(void) {
   4605              // Request to enter STOP mode with regulator in low power mode
   4606              HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
   4607           
   4608              // After wake-up from STOP reconfigure the PLL
   4609              //SetSysClock();
   4610              SystemClock_Config();
   4611          }*/
   4612          
   4613          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    1368   RoadBrd_ParseString
      1368   -> BGM111_Transmit
      1368   -> Get_DriverStates
      1368   -> Get_DriverStatus
      1368   -> HAL_Delay
      1368   -> HAL_NVIC_SystemReset
      1368   -> MX_I2C1_Reset
      1368   -> Parse_srecord
      1368   -> RdBrd_CAL_GetStr
      1368   -> RoadBrdSnd_ClrBffrs
      1368   -> RoadBrdSnd_DumpBin0
      1368   -> RoadBrdSnd_DumpBin16
      1368   -> RoadBrdSnd_DumpBin32
      1368   -> RoadBrdSnd_DumpBin48
      1368   -> RoadBrdSnd_ProcessSound
      1368   -> RoadBrdSnd_getSaveBffr
      1368   -> RoadBrd_Baro_ReadPressure
      1368   -> RoadBrd_Baro_ReadPressure_Scaled
      1368   -> RoadBrd_Baro_ReadTemp
      1368   -> RoadBrd_CAL_GetOffset
      1368   -> RoadBrd_CAL_GetSlope
      1368   -> RoadBrd_CAL_GetTimeString
      1368   -> RoadBrd_CAL_InitializeFrmFlash
      1368   -> RoadBrd_CAL_Set_CalItem
      1368   -> RoadBrd_CAL_Set_TimeString
      1368   -> RoadBrd_CoolEye_ReadValues
      1368   -> RoadBrd_CoolEye_ReadValues_Scaled
      1368   -> RoadBrd_Get_BootDelay
      1368   -> RoadBrd_Get_RdSndTickCnt
      1368   -> RoadBrd_Get_SnsrTickCnt
      1368   -> RoadBrd_Get_TackLimit
      1368   -> RoadBrd_GridEyeInit
      1368   -> RoadBrd_GridEyeReset
      1368   -> RoadBrd_GridEye_ReadValues
      1368   -> RoadBrd_GridEye_ReadValues_Scaled
      1368   -> RoadBrd_HumidityInit
      1368   -> RoadBrd_Humidity_ReadHumidity
      1368   -> RoadBrd_Humidity_ReadHumidity_Scaled
      1368   -> RoadBrd_Humidity_ReadTemperature
      1368   -> RoadBrd_I2C_GetError
      1368   -> RoadBrd_I2C_Master_Receive
      1368   -> RoadBrd_I2C_Master_Transmit
      1368   -> RoadBrd_Init_Barometer
      1368   -> RoadBrd_Init_VMonitor
      1368   -> RoadBrd_RGBFullInit
      1368   -> RoadBrd_RGBInit
      1368   -> RoadBrd_RGBReadID
      1368   -> RoadBrd_RGBReadStatus
      1368   -> RoadBrd_RGBReadValues
      1368   -> RoadBrd_RGBReset
      1368   -> RoadBrd_ReadTemp
      1368   -> RoadBrd_ReadTemp_Scaled
      1368   -> RoadBrd_Set_BootDelay
      1368   -> RoadBrd_Set_RdSndTickCnt
      1368   -> RoadBrd_Set_SnsrTickCnt
      1368   -> RoadBrd_Set_TackLimit
      1368   -> RoadBrd_Set_UnitsFlag
      1368   -> RoadBrd_TestandRead_Barometer
      1368   -> RoadBrd_UART_Transmit
      1368   -> RoadBrd_VMonitor_RdCurrent
      1368   -> RoadBrd_VMonitor_RdCurrent_Scaled
      1368   -> RoadBrd_VMonitor_RdPower
      1368   -> RoadBrd_VMonitor_RdPower_Scaled
      1368   -> RoadBrd_VMonitor_RdShntVltg
      1368   -> RoadBrd_VMonitor_RdShntVltg_Scaled
      1368   -> RoadBrd_VMonitor_RdVoltage
      1368   -> RoadBrd_VMonitor_RdVoltage_Scaled
      1368   -> RoadBrd_WWDG_InitializeFrmFlash
      1368   -> RoadBrd_WaitForState
      1368   -> RoadBrd_gpio_Off
      1368   -> RoadBrd_gpio_On
      1368   -> __aeabi_f2d
      1368   -> __aeabi_fdiv
      1368   -> __aeabi_ui2f
      1368   -> atoi
      1368   -> hatoi
      1368   -> isHexNum
      1368   -> isdigit
      1368   -> sprintf
      1368   -> sscanf
      1368   -> strcat
      1368   -> strcpy
      1368   -> strlen
      1368   -> strncmp
       0   RoadBrd_ParserInit
       8   RoadBrd_ParserTsk
         8   -> strcpy
         8   -> strlen
       8   RoadBrd_ProcessParserTsk
         8   -> RoadBrd_ParseString
       0   Tst_Bypass
      24   hatoi
        24   -> strlen
      24   isHexNum
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_28
       4  ??DataTable4_29
       4  ??DataTable4_3
       4  ??DataTable4_30
       4  ??DataTable4_31
       4  ??DataTable4_32
       4  ??DataTable4_33
       4  ??DataTable4_34
       4  ??DataTable4_35
       4  ??DataTable4_36
       4  ??DataTable4_37
       4  ??DataTable4_38
       4  ??DataTable4_39
       4  ??DataTable4_4
       4  ??DataTable4_40
       4  ??DataTable4_41
       4  ??DataTable4_42
       4  ??DataTable4_43
       4  ??DataTable4_44
       4  ??DataTable4_45
       4  ??DataTable4_46
       4  ??DataTable4_47
       4  ??DataTable4_48
       4  ??DataTable4_49
       4  ??DataTable4_5
       4  ??DataTable4_50
       4  ??DataTable4_51
       4  ??DataTable4_52
       4  ??DataTable4_53
       4  ??DataTable4_54
       4  ??DataTable4_55
       4  ??DataTable4_56
       4  ??DataTable4_57
       4  ??DataTable4_58
       4  ??DataTable4_59
       4  ??DataTable4_6
       4  ??DataTable4_60
       4  ??DataTable4_61
       4  ??DataTable4_62
       4  ??DataTable4_63
       4  ??DataTable4_64
       4  ??DataTable4_65
       4  ??DataTable4_66
       4  ??DataTable4_67
       4  ??DataTable4_68
       4  ??DataTable4_69
       4  ??DataTable4_7
       4  ??DataTable4_70
       4  ??DataTable4_71
       4  ??DataTable4_72
       4  ??DataTable4_73
       4  ??DataTable4_74
       4  ??DataTable4_75
       4  ??DataTable4_76
       4  ??DataTable4_77
       4  ??DataTable4_78
       4  ??DataTable4_79
       4  ??DataTable4_8
       4  ??DataTable4_80
       4  ??DataTable4_81
       4  ??DataTable4_9
      56  ?_0
      36  ?_1
      40  ?_10
       8  ?_100
      52  ?_101
      36  ?_102
      32  ?_103
      32  ?_104
      44  ?_105
      32  ?_106
      40  ?_107
      40  ?_108
      44  ?_109
      32  ?_11
      52  ?_110
      24  ?_111
      20  ?_112
       4  ?_113
      40  ?_114
      44  ?_115
      52  ?_116
      60  ?_117
      24  ?_118
      40  ?_119
      32  ?_12
      20  ?_120
      12  ?_121
      40  ?_122
      44  ?_123
      52  ?_124
      64  ?_125
      40  ?_126
      12  ?_127
      40  ?_128
      24  ?_129
      40  ?_13
      40  ?_130
      24  ?_131
      44  ?_132
      36  ?_133
      40  ?_134
      36  ?_135
      32  ?_136
      40  ?_137
      36  ?_138
      36  ?_139
      32  ?_14
      12  ?_140
      24  ?_141
       8  ?_142
      36  ?_143
      28  ?_144
      40  ?_145
      28  ?_146
       8  ?_147
      32  ?_148
      24  ?_149
      32  ?_15
      36  ?_150
       8  ?_151
      32  ?_152
      20  ?_153
      36  ?_154
       8  ?_155
      32  ?_156
      24  ?_157
      36  ?_158
       8  ?_159
      40  ?_16
      32  ?_160
      20  ?_161
      36  ?_162
       8  ?_163
      32  ?_164
      20  ?_165
      36  ?_166
       8  ?_167
      36  ?_168
      24  ?_169
      28  ?_17
      40  ?_170
       8  ?_171
      36  ?_172
      24  ?_173
      40  ?_174
       8  ?_175
      36  ?_176
      24  ?_177
      40  ?_178
       8  ?_179
       1  ?_18
      36  ?_180
      24  ?_181
      40  ?_182
       8  ?_183
      32  ?_184
      24  ?_185
      36  ?_186
       8  ?_187
      36  ?_188
      24  ?_189
       8  ?_19
      40  ?_190
       8  ?_191
      36  ?_192
      24  ?_193
      40  ?_194
       8  ?_195
      32  ?_196
      24  ?_197
      36  ?_198
       8  ?_199
      68  ?_2
      12  ?_20
      36  ?_200
      24  ?_201
      40  ?_202
       8  ?_203
      36  ?_204
      24  ?_205
      40  ?_206
       8  ?_207
      36  ?_208
      24  ?_209
      20  ?_21
      40  ?_210
       8  ?_211
      36  ?_212
      24  ?_213
      40  ?_214
       8  ?_215
      36  ?_216
      24  ?_217
      40  ?_218
       8  ?_219
      28  ?_22
      36  ?_220
      24  ?_221
      40  ?_222
       8  ?_223
      36  ?_224
      24  ?_225
      40  ?_226
       8  ?_227
      36  ?_228
      24  ?_229
      36  ?_23
      40  ?_230
      36  ?_231
      32  ?_232
      48  ?_233
      16  ?_234
      32  ?_235
      36  ?_236
      24  ?_237
      24  ?_238
      24  ?_239
      32  ?_24
      32  ?_240
      24  ?_241
      24  ?_242
      24  ?_243
      32  ?_244
      24  ?_245
      24  ?_246
      24  ?_247
      24  ?_248
      24  ?_249
      40  ?_25
      24  ?_250
      24  ?_251
      24  ?_252
      24  ?_253
      24  ?_254
      24  ?_255
      24  ?_256
      24  ?_257
      32  ?_258
      24  ?_259
      40  ?_26
      24  ?_260
      24  ?_261
      24  ?_262
      24  ?_263
      32  ?_264
      24  ?_265
      24  ?_266
      24  ?_267
      24  ?_268
      24  ?_269
      40  ?_27
      24  ?_270
      24  ?_271
      24  ?_272
      24  ?_273
      24  ?_274
      24  ?_275
      24  ?_276
      24  ?_277
      24  ?_278
      24  ?_279
      56  ?_28
      24  ?_280
      20  ?_281
      32  ?_282
      40  ?_283
      36  ?_284
      36  ?_285
      32  ?_286
      28  ?_287
      32  ?_288
      28  ?_289
      20  ?_29
      32  ?_290
      24  ?_291
      32  ?_292
      36  ?_293
      32  ?_294
      40  ?_295
      36  ?_296
      44  ?_297
      36  ?_298
      36  ?_299
      40  ?_3
      36  ?_30
      32  ?_300
      36  ?_301
      44  ?_302
      36  ?_303
      36  ?_304
      32  ?_305
      36  ?_306
      44  ?_307
      36  ?_308
      36  ?_309
      16  ?_31
      32  ?_310
      36  ?_311
      44  ?_312
      36  ?_313
      36  ?_314
      32  ?_315
      36  ?_316
      32  ?_317
      40  ?_318
      32  ?_319
      12  ?_32
      44  ?_320
      28  ?_321
      24  ?_322
      28  ?_323
      32  ?_324
      32  ?_325
      36  ?_326
      32  ?_327
      40  ?_328
      28  ?_329
      40  ?_33
      40  ?_330
      28  ?_331
      40  ?_332
      40  ?_333
      28  ?_334
      28  ?_335
      24  ?_336
      52  ?_337
      28  ?_338
      36  ?_339
      40  ?_34
      36  ?_340
       8  ?_341
      12  ?_342
      20  ?_343
      28  ?_344
      28  ?_345
      36  ?_346
      32  ?_347
      28  ?_348
      40  ?_349
      20  ?_35
      56  ?_350
      72  ?_351
      72  ?_352
      72  ?_353
      28  ?_354
      64  ?_355
      64  ?_356
      76  ?_357
      76  ?_358
      76  ?_359
      32  ?_36
      24  ?_360
      20  ?_361
      16  ?_362
       8  ?_363
      20  ?_364
      40  ?_365
      40  ?_366
      48  ?_367
      48  ?_368
      48  ?_369
      16  ?_37
      40  ?_370
      48  ?_371
      40  ?_372
      40  ?_373
      40  ?_374
      40  ?_375
       8  ?_376
      16  ?_38
      40  ?_39
      32  ?_4
      40  ?_40
      32  ?_41
      28  ?_42
      36  ?_43
      48  ?_44
      48  ?_45
      24  ?_46
      20  ?_47
      56  ?_48
      44  ?_49
      32  ?_5
      40  ?_50
      24  ?_51
      32  ?_52
      28  ?_53
      44  ?_54
      36  ?_55
      28  ?_56
      36  ?_57
      20  ?_58
      36  ?_59
       4  ?_6
      24  ?_60
      32  ?_61
      20  ?_62
      32  ?_63
      20  ?_64
      32  ?_65
      24  ?_66
      24  ?_67
      36  ?_68
      32  ?_69
      40  ?_7
      24  ?_70
      44  ?_71
      16  ?_72
      48  ?_73
      24  ?_74
      20  ?_75
      44  ?_76
      40  ?_77
      28  ?_78
      56  ?_79
      32  ?_8
      16  ?_80
      44  ?_81
      12  ?_82
      12  ?_83
      12  ?_84
      72  ?_85
      68  ?_86
      72  ?_87
      64  ?_88
      60  ?_89
      32  ?_9
      60  ?_90
      60  ?_91
      56  ?_92
      64  ?_93
      64  ?_94
      64  ?_95
      64  ?_96
      64  ?_97
      68  ?_98
      32  ?_99
       1  Bypass
      44  ParseString
   19336  RoadBrd_ParseString
      12  RoadBrd_ParserInit
      66  RoadBrd_ParserTsk
      40  RoadBrd_ProcessParserTsk
       6  Tst_Bypass
      88  hatoi
      74  isHexNum

 
     45 bytes in section .bss
 12 209 bytes in section .rodata
 20 018 bytes in section .text
 
 20 018 bytes of CODE  memory
 12 209 bytes of CONST memory
     45 bytes of DATA  memory

Errors: none
Warnings: none
