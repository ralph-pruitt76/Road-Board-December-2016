###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       20/Sep/2017  10:11:20
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\usbd_cdc_if.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\usbd_cdc_if.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\usbd_cdc_if.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\usbd_cdc_if.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\usbd_cdc_if.c
      1          /**
      2            ******************************************************************************
      3            * @file           : usbd_cdc_if.c
      4            * @brief          :
      5            ******************************************************************************
      6            * COPYRIGHT(c) 2016 STMicroelectronics
      7            *
      8            * Redistribution and use in source and binary forms, with or without modification,
      9            * are permitted provided that the following conditions are met:
     10            * 1. Redistributions of source code must retain the above copyright notice,
     11            * this list of conditions and the following disclaimer.
     12            * 2. Redistributions in binary form must reproduce the above copyright notice,
     13            * this list of conditions and the following disclaimer in the documentation
     14            * and/or other materials provided with the distribution.
     15            * 3. Neither the name of STMicroelectronics nor the names of its contributors
     16            * may be used to endorse or promote products derived from this software
     17            * without specific prior written permission.
     18            *
     19            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     20            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     21            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     23            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     24            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     25            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     26            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     27            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     28            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29            *
     30            ******************************************************************************
     31          */
     32          
     33          /* Includes ------------------------------------------------------------------*/
     34          #include "usbd_cdc_if.h"
     35          /* USER CODE BEGIN INCLUDE */
     36          /* USER CODE END INCLUDE */
     37          
     38          /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
     39            * @{
     40            */
     41          
     42          /** @defgroup USBD_CDC 
     43            * @brief usbd core module
     44            * @{
     45            */ 
     46          
     47          /** @defgroup USBD_CDC_Private_TypesDefinitions
     48            * @{
     49            */ 
     50          /* USER CODE BEGIN PRIVATE_TYPES */
     51          /* USER CODE END PRIVATE_TYPES */ 
     52          /**
     53            * @}
     54            */ 
     55          
     56          /** @defgroup USBD_CDC_Private_Defines
     57            * @{
     58            */ 
     59          /* USER CODE BEGIN PRIVATE_DEFINES */
     60          /* Define size for the receive and transmit buffer over CDC */
     61          /* It's up to user to redefine and/or remove those define */
     62          #define APP_RX_DATA_SIZE  4
     63          #define APP_TX_DATA_SIZE  4
     64          /* USER CODE END PRIVATE_DEFINES */
     65          /**
     66            * @}
     67            */ 
     68          
     69          /** @defgroup USBD_CDC_Private_Macros
     70            * @{
     71            */ 
     72          /* USER CODE BEGIN PRIVATE_MACRO */
     73          /* USER CODE END PRIVATE_MACRO */
     74          
     75          /**
     76            * @}
     77            */ 
     78            
     79          /** @defgroup USBD_CDC_Private_Variables
     80            * @{
     81            */
     82          /* Create buffer for reception and transmission           */
     83          /* It's up to user to redefine and/or remove those define */
     84          /* Received Data over USB are stored in this buffer       */

   \                                 In section .bss, align 4
     85          uint8_t UserRxBufferFS[APP_RX_DATA_SIZE];
   \                     UserRxBufferFS:
   \   00000000                      DS8 4
     86          
     87          /* Send Data over USB CDC are stored in this buffer       */

   \                                 In section .bss, align 4
     88          uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
   \                     UserTxBufferFS:
   \   00000000                      DS8 4
     89          
     90          /* USER CODE BEGIN PRIVATE_VARIABLES */
     91          /* USER CODE END PRIVATE_VARIABLES */
     92          
     93          /**
     94            * @}
     95            */ 
     96            
     97          /** @defgroup USBD_CDC_IF_Exported_Variables
     98            * @{
     99            */ 
    100            extern USBD_HandleTypeDef hUsbDeviceFS;
    101          /* USER CODE BEGIN EXPORTED_VARIABLES */
    102          /* USER CODE END EXPORTED_VARIABLES */
    103          
    104          /**
    105            * @}
    106            */ 
    107            
    108          /** @defgroup USBD_CDC_Private_FunctionPrototypes
    109            * @{
    110            */
    111          static int8_t CDC_Init_FS     (void);
    112          static int8_t CDC_DeInit_FS   (void);
    113          static int8_t CDC_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length);
    114          static int8_t CDC_Receive_FS  (uint8_t* pbuf, uint32_t *Len);
    115          
    116          /* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
    117          /* USER CODE END PRIVATE_FUNCTIONS_DECLARATION */
    118          
    119          /**
    120            * @}
    121            */ 
    122            

   \                                 In section .data, align 4
    123          USBD_CDC_ItfTypeDef USBD_Interface_fops_FS = 
   \                     USBD_Interface_fops_FS:
   \   00000000   0x........         DC32 CDC_Init_FS, CDC_DeInit_FS, CDC_Control_FS, CDC_Receive_FS
   \              0x........   
   \              0x........   
   \              0x........   
    124          {
    125            CDC_Init_FS,
    126            CDC_DeInit_FS,
    127            CDC_Control_FS,  
    128            CDC_Receive_FS
    129          };
    130          
    131          /* Private functions ---------------------------------------------------------*/
    132          /**
    133            * @brief  CDC_Init_FS
    134            *         Initializes the CDC media low layer over the FS USB IP
    135            * @param  None
    136            * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
    137            */

   \                                 In section .text, align 2, keep-with-next
    138          static int8_t CDC_Init_FS(void)
    139          { 
   \                     CDC_Init_FS: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    140            /* USER CODE BEGIN 3 */ 
    141            /* Set Application Buffers */
    142            USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable2
   \   00000006   0x....             LDR.N    R0,??DataTable2_1
   \   00000008   0x.... 0x....      BL       USBD_CDC_SetTxBuffer
    143            USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
   \   0000000C   0x....             LDR.N    R1,??DataTable2_2
   \   0000000E   0x....             LDR.N    R0,??DataTable2_1
   \   00000010   0x.... 0x....      BL       USBD_CDC_SetRxBuffer
    144            return (USBD_OK);
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    145            /* USER CODE END 3 */ 
    146          }
    147          
    148          /**
    149            * @brief  CDC_DeInit_FS
    150            *         DeInitializes the CDC media low layer
    151            * @param  None
    152            * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
    153            */

   \                                 In section .text, align 2, keep-with-next
    154          static int8_t CDC_DeInit_FS(void)
    155          {
    156            /* USER CODE BEGIN 4 */ 
    157            return (USBD_OK);
   \                     CDC_DeInit_FS: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    158            /* USER CODE END 4 */ 
    159          }
    160          
    161          /**
    162            * @brief  CDC_Control_FS
    163            *         Manage the CDC class requests
    164            * @param  cmd: Command code            
    165            * @param  pbuf: Buffer containing command data (request parameters)
    166            * @param  length: Number of data to be sent (in bytes)
    167            * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
    168            */

   \                                 In section .text, align 2, keep-with-next
    169          static int8_t CDC_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
    170          { 
   \                     CDC_Control_FS: (+1)
   \   00000000   0x0003             MOVS     R3,R0
    171            /* USER CODE BEGIN 5 */
    172            switch (cmd)
   \   00000002   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000004   0x0018             MOVS     R0,R3
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD010             BEQ.N    ??CDC_Control_FS_0
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD00F             BEQ.N    ??CDC_Control_FS_1
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD00E             BEQ.N    ??CDC_Control_FS_2
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD00D             BEQ.N    ??CDC_Control_FS_3
   \   00000016   0x2804             CMP      R0,#+4
   \   00000018   0xD00C             BEQ.N    ??CDC_Control_FS_4
   \   0000001A   0x2820             CMP      R0,#+32
   \   0000001C   0xD00B             BEQ.N    ??CDC_Control_FS_5
   \   0000001E   0x2821             CMP      R0,#+33
   \   00000020   0xD00A             BEQ.N    ??CDC_Control_FS_6
   \   00000022   0x2822             CMP      R0,#+34
   \   00000024   0xD009             BEQ.N    ??CDC_Control_FS_7
   \   00000026   0x2823             CMP      R0,#+35
   \   00000028   0xD008             BEQ.N    ??CDC_Control_FS_8
   \   0000002A   0xE008             B.N      ??CDC_Control_FS_9
    173            {
    174            case CDC_SEND_ENCAPSULATED_COMMAND:
    175           
    176              break;
   \                     ??CDC_Control_FS_0: (+1)
   \   0000002C   0xE007             B.N      ??CDC_Control_FS_10
    177          
    178            case CDC_GET_ENCAPSULATED_RESPONSE:
    179           
    180              break;
   \                     ??CDC_Control_FS_1: (+1)
   \   0000002E   0xE006             B.N      ??CDC_Control_FS_10
    181          
    182            case CDC_SET_COMM_FEATURE:
    183           
    184              break;
   \                     ??CDC_Control_FS_2: (+1)
   \   00000030   0xE005             B.N      ??CDC_Control_FS_10
    185          
    186            case CDC_GET_COMM_FEATURE:
    187          
    188              break;
   \                     ??CDC_Control_FS_3: (+1)
   \   00000032   0xE004             B.N      ??CDC_Control_FS_10
    189          
    190            case CDC_CLEAR_COMM_FEATURE:
    191          
    192              break;
   \                     ??CDC_Control_FS_4: (+1)
   \   00000034   0xE003             B.N      ??CDC_Control_FS_10
    193          
    194            /*******************************************************************************/
    195            /* Line Coding Structure                                                       */
    196            /*-----------------------------------------------------------------------------*/
    197            /* Offset | Field       | Size | Value  | Description                          */
    198            /* 0      | dwDTERate   |   4  | Number |Data terminal rate, in bits per second*/
    199            /* 4      | bCharFormat |   1  | Number | Stop bits                            */
    200            /*                                        0 - 1 Stop bit                       */
    201            /*                                        1 - 1.5 Stop bits                    */
    202            /*                                        2 - 2 Stop bits                      */
    203            /* 5      | bParityType |  1   | Number | Parity                               */
    204            /*                                        0 - None                             */
    205            /*                                        1 - Odd                              */ 
    206            /*                                        2 - Even                             */
    207            /*                                        3 - Mark                             */
    208            /*                                        4 - Space                            */
    209            /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    210            /*******************************************************************************/
    211            case CDC_SET_LINE_CODING:   
    212          	
    213              break;
   \                     ??CDC_Control_FS_5: (+1)
   \   00000036   0xE002             B.N      ??CDC_Control_FS_10
    214          
    215            case CDC_GET_LINE_CODING:     
    216          
    217              break;
   \                     ??CDC_Control_FS_6: (+1)
   \   00000038   0xE001             B.N      ??CDC_Control_FS_10
    218          
    219            case CDC_SET_CONTROL_LINE_STATE:
    220          
    221              break;
   \                     ??CDC_Control_FS_7: (+1)
   \   0000003A   0xE000             B.N      ??CDC_Control_FS_10
    222          
    223            case CDC_SEND_BREAK:
    224           
    225              break;    
   \                     ??CDC_Control_FS_8: (+1)
   \   0000003C   0xE7FF             B.N      ??CDC_Control_FS_10
    226              
    227            default:
    228              break;
    229            }
    230          
    231            return (USBD_OK);
   \                     ??CDC_Control_FS_9: (+1)
   \                     ??CDC_Control_FS_10: (+1)
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x4770             BX       LR               ;; return
    232            /* USER CODE END 5 */
    233          }
    234          
    235          /**
    236            * @brief  CDC_Receive_FS
    237            *         Data received over USB OUT endpoint are sent over CDC interface 
    238            *         through this function.
    239            *           
    240            *         @note
    241            *         This function will block any OUT packet reception on USB endpoint 
    242            *         untill exiting this function. If you exit this function before transfer
    243            *         is complete on CDC interface (ie. using DMA controller) it will result 
    244            *         in receiving more data while previous ones are still not sent.
    245            *                 
    246            * @param  Buf: Buffer of data to be received
    247            * @param  Len: Number of data received (in bytes)
    248            * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
    249            */

   \                                 In section .text, align 2, keep-with-next
    250          static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
    251          {
   \                     CDC_Receive_FS: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    252            /* USER CODE BEGIN 6 */
    253            USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0x....             LDR.N    R0,??DataTable2_1
   \   0000000A   0x.... 0x....      BL       USBD_CDC_SetRxBuffer
    254            USBD_CDC_ReceivePacket(&hUsbDeviceFS);
   \   0000000E   0x....             LDR.N    R0,??DataTable2_1
   \   00000010   0x.... 0x....      BL       USBD_CDC_ReceivePacket
    255            return (USBD_OK);
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    256            /* USER CODE END 6 */ 
    257          }
    258          
    259          /**
    260            * @brief  CDC_Transmit_FS
    261            *         Data send over USB IN endpoint are sent over CDC interface 
    262            *         through this function.           
    263            *         @note
    264            *         
    265            *                 
    266            * @param  Buf: Buffer of data to be send
    267            * @param  Len: Number of data to be send (in bytes)
    268            * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
    269            */

   \                                 In section .text, align 2, keep-with-next
    270          uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
    271          {
   \                     CDC_Transmit_FS: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    272            uint8_t result = USBD_OK;
   \   00000006   0x2600             MOVS     R6,#+0
    273            /* USER CODE BEGIN 7 */ 
    274            USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
   \   00000008   0x....             LDR.N    R0,??DataTable2_1
   \   0000000A   0xF8D0 0x7218      LDR      R7,[R0, #+536]
    275            if (hcdc->TxState != 0){
   \   0000000E   0xF8D7 0x0214      LDR      R0,[R7, #+532]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD001             BEQ.N    ??CDC_Transmit_FS_0
    276              return USBD_BUSY;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE00B             B.N      ??CDC_Transmit_FS_1
    277            }
    278            USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
   \                     ??CDC_Transmit_FS_0: (+1)
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0x....             LDR.N    R0,??DataTable2_1
   \   00000022   0x.... 0x....      BL       USBD_CDC_SetTxBuffer
    279            result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
   \   00000026   0x....             LDR.N    R0,??DataTable2_1
   \   00000028   0x.... 0x....      BL       USBD_CDC_TransmitPacket
   \   0000002C   0x0006             MOVS     R6,R0
    280            /* USER CODE END 7 */ 
    281            return result;
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??CDC_Transmit_FS_1: (+1)
   \   00000032   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    282          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     UserTxBufferFS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     hUsbDeviceFS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     UserRxBufferFS
    283          
    284          /* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
    285          /* USER CODE END PRIVATE_FUNCTIONS_IMPLEMENTATION */
    286          
    287          /**
    288            * @}
    289            */ 
    290          
    291          /**
    292            * @}
    293            */ 
    294          
    295          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    296          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CDC_Control_FS
       0   CDC_DeInit_FS
       8   CDC_Init_FS
         8   -> USBD_CDC_SetRxBuffer
         8   -> USBD_CDC_SetTxBuffer
      16   CDC_Receive_FS
        16   -> USBD_CDC_ReceivePacket
        16   -> USBD_CDC_SetRxBuffer
      24   CDC_Transmit_FS
        24   -> USBD_CDC_SetTxBuffer
        24   -> USBD_CDC_TransmitPacket


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      66  CDC_Control_FS
       4  CDC_DeInit_FS
      24  CDC_Init_FS
      24  CDC_Receive_FS
      52  CDC_Transmit_FS
      16  USBD_Interface_fops_FS
       4  UserRxBufferFS
       4  UserTxBufferFS

 
   8 bytes in section .bss
  16 bytes in section .data
 182 bytes in section .text
 
 182 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: none
