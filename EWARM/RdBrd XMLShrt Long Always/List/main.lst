###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       01/Feb/2018  14:51:06
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\main.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\main.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\main.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\main.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\main.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : main.c
      4            * Description        : Main program body
      5            ******************************************************************************
      6            *
      7            * COPYRIGHT(c) 2016 STMicroelectronics
      8            *
      9            * Redistribution and use in source and binary forms, with or without modification,
     10            * are permitted provided that the following conditions are met:
     11            *   1. Redistributions of source code must retain the above copyright notice,
     12            *      this list of conditions and the following disclaimer.
     13            *   2. Redistributions in binary form must reproduce the above copyright notice,
     14            *      this list of conditions and the following disclaimer in the documentation
     15            *      and/or other materials provided with the distribution.
     16            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     17            *      may be used to endorse or promote products derived from this software
     18            *      without specific prior written permission.
     19            *
     20            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     22            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     23            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     24            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     25            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     26            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     27            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     28            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     29            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     30            *
     31            ******************************************************************************
     32            */
     33          /* Includes ------------------------------------------------------------------*/
     34          #include "stm32l1xx_hal.h"
     35          #include "cmsis_os.h"
     36          #include "adc.h"
     37          #include "dma.h"
     38          #include "i2c.h"
     39          #include "tim.h"
     40          #include "usart.h"
     41          #include "usb_device.h"
     42          #include "wwdg.h"
     43          #include "Flash.h"
     44          
     45          /* USER CODE BEGIN Includes */
     46          #include "stm32l1xx_nucleo.h"
     47          #ifdef REV_L
     48            #include "bgm111.h"
     49            #include "app_data.h"
     50          #endif
     51          #include "gpio.h"
     52          #include "main.h"
     53          #include "parser.h"
     54          #include "BootMonitor.h"
     55          #include "stdbool.h"
     56          #include "ErrorCodes.h"
     57              
     58          /* USER CODE END Includes */
     59          
     60          /* Private variables ---------------------------------------------------------*/
     61          
     62          /* USER CODE BEGIN PV */
     63          /* Private variables ---------------------------------------------------------*/
     64          
     65          /* USER CODE END PV */
     66          
     67          /* Private function prototypes -----------------------------------------------*/
     68          void SystemClock_Config(void);
     69          void Error_Handler(void);
     70          void MX_FREERTOS_Init(void);
     71          
     72          /* USER CODE BEGIN PFP */
     73          /* Private function prototypes -----------------------------------------------*/
     74          
     75          /* USER CODE END PFP */
     76          
     77          /* USER CODE BEGIN 0 */
     78          
     79          /* USER CODE END 0 */

   \                                 In section .text, align 2, keep-with-next
     80          int main(void)
     81          {
   \                     main: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0BB             SUB      SP,SP,#+236
     82            /* USER CODE BEGIN 1 */
     83          #define TEMP_BUFF2_SZ 80
     84            int x;
     85          #ifdef TEST2
     86            #define RECEIVE_SZ      5
     87            uint8_t tempBffr[RECEIVE_SZ];
     88            char tempBffr2[5];
     89            HAL_StatusTypeDef Status;
     90          #else
     91            #ifdef TEST
     92              #define RECEIVE_SZ      5
     93            #else
     94          //HERE
     95              #define RECEIVE_SZ      125
     96              uint8_t tempBffr[RECEIVE_SZ];
     97              uint8_t tempBffr2[TEMP_BUFF2_SZ];
     98              HAL_StatusTypeDef Status;
     99            #endif
    100          #endif
    101          
    102          #ifdef REV_L
    103            //N uint16_t tmpSize = RECEIVE_SZ;
    104            //N uint8_t tmpData[2];
    105          //  uint8_t tmpData[RECEIVE_SZ];
    106            Temperature   Temp;
    107          #ifndef PATCH_UART
    108            bool firstTime = true;
   \   00000004   0x2601             MOVS     R6,#+1
    109          #endif
    110            //N uint8_t *pData = tempBffr;
    111          #endif
    112          
    113          //ITStatus PStatus;
    114          
    115            /* USER CODE END 1 */
    116          
    117            /* MCU Configuration----------------------------------------------------------*/
    118          
    119          #ifdef REV_L
    120            // Turn Off Power Supplies
    121            //RoadBrd_gpio_Off(gTAM_PWR);    // Turn Off 5V Power
    122            //RoadBrd_gpio_Off(gVDD_PWR);    // Turn Off 3.3V Power
    123          #endif
    124          
    125            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    126            HAL_Init();
   \   00000006   0x.... 0x....      BL       HAL_Init
    127          
    128            /* Configure the system clock */
    129            SystemClock_Config();
   \   0000000A   0x.... 0x....      BL       SystemClock_Config
    130          
    131            /* Initialize all configured peripherals */
    132            MX_GPIO_Init();
   \   0000000E   0x.... 0x....      BL       MX_GPIO_Init
    133            MX_DMA_Init();
   \   00000012   0x.... 0x....      BL       MX_DMA_Init
    134            MX_ADC_Init();
   \   00000016   0x.... 0x....      BL       MX_ADC_Init
    135            ADC_Config();
   \   0000001A   0x.... 0x....      BL       ADC_Config
    136            MX_USART2_UART_Init();
   \   0000001E   0x.... 0x....      BL       MX_USART2_UART_Init
    137            MX_USART3_UART_Init();
   \   00000022   0x.... 0x....      BL       MX_USART3_UART_Init
    138            MX_TIM2_Init();
   \   00000026   0x.... 0x....      BL       MX_TIM2_Init
    139            MX_TIM3_Init();
   \   0000002A   0x.... 0x....      BL       MX_TIM3_Init
    140          
    141            /* USER CODE BEGIN 2 */
    142          #ifdef REV_L
    143            // Wait for power to stabilize off...200msec
    144            //RoadBrd_Delay( 200 );
    145            // Turn on Power Supplies.
    146            RoadBrd_gpio_On(gTAM_PWR);    // Turn on 5V Power
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0x.... 0x....      BL       RoadBrd_gpio_On
    147            RoadBrd_gpio_On(gVDD_PWR);    // Turn on 3.3V Power
   \   00000034   0x2005             MOVS     R0,#+5
   \   00000036   0x.... 0x....      BL       RoadBrd_gpio_On
    148            // Wait for power to stabilize...200msec
    149            RoadBrd_Delay( 200 );
   \   0000003A   0x20C8             MOVS     R0,#+200
   \   0000003C   0x.... 0x....      BL       RoadBrd_Delay
    150            // Reset all Drivers to Off before starting init process.
    151            Reset_DriverStates();
   \   00000040   0x.... 0x....      BL       Reset_DriverStates
    152          
    153            // Enable Interrupts
    154            //---UART
    155            HAL_NVIC_EnableIRQ(USART2_IRQn);
   \   00000044   0x2026             MOVS     R0,#+38
   \   00000046   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    156            HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   0000004A   0x2027             MOVS     R0,#+39
   \   0000004C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    157          
    158            // Flush I2C Channel before testing...
    159            RoadBrd_I2CRepair();
   \   00000050   0x.... 0x....      BL       RoadBrd_I2CRepair
    160            
    161            // Test I2C Channel and see if we even have a working I2C.
    162            RoadBrd_TestI2C();
   \   00000054   0x.... 0x....      BL       RoadBrd_TestI2C
    163            
    164            // Test for I2C Failure then attempt a repair.
    165            if ( !(Get_DriverStates( I2C_STATE )) )
   \   00000058   0x2007             MOVS     R0,#+7
   \   0000005A   0x.... 0x....      BL       Get_DriverStates
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD117             BNE.N    ??main_0
    166            {
    167              if ((RoadBrd_I2CRepair()) == HAL_OK)
   \   00000062   0x.... 0x....      BL       RoadBrd_I2CRepair
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD10A             BNE.N    ??main_1
    168              {
    169                RdBrd_ErrCdLogErrCd( REPAIR_I2C, MODULE_main );
   \   0000006A   0x2101             MOVS     R1,#+1
   \   0000006C   0x2014             MOVS     R0,#+20
   \   0000006E   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    170                Set_DriverStates( I2C_STATE, DRIVER_ON );
   \   00000072   0x2101             MOVS     R1,#+1
   \   00000074   0x2007             MOVS     R0,#+7
   \   00000076   0x.... 0x....      BL       Set_DriverStates
    171                // Now..Initialize I2C and test Drivers.
    172                MX_I2C1_Init();
   \   0000007A   0x.... 0x....      BL       MX_I2C1_Init
   \   0000007E   0xE00A             B.N      ??main_2
    173              }
    174              else
    175              {
    176                // OK...It is hung.
    177                Set_DriverStates( I2C_STATE, DRIVER_OFF );
   \                     ??main_1: (+1)
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x2007             MOVS     R0,#+7
   \   00000084   0x.... 0x....      BL       Set_DriverStates
    178                RdBrd_ErrCdLogErrCd( ERROR_I2CBUSY, MODULE_main );
   \   00000088   0x2101             MOVS     R1,#+1
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
   \   00000090   0xE001             B.N      ??main_2
    179              }
    180            }
    181            else
    182            {
    183              // Now..Initialize I2C and test Drivers.
    184              MX_I2C1_Init();
   \                     ??main_0: (+1)
   \   00000092   0x.... 0x....      BL       MX_I2C1_Init
    185            }
    186            
    187            //---I2C1
    188            HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \                     ??main_2: (+1)
   \   00000096   0x201F             MOVS     R0,#+31
   \   00000098   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    189            HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
   \   0000009C   0x2020             MOVS     R0,#+32
   \   0000009E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    190            //---TIM
    191          #ifndef PATCH_UART
    192            HAL_TIM_StartTimer2();
   \   000000A2   0x.... 0x....      BL       HAL_TIM_StartTimer2
    193            HAL_TIM_StartTimer3();
   \   000000A6   0x.... 0x....      BL       HAL_TIM_StartTimer3
    194            HAL_NVIC_EnableIRQ(TIM2_IRQn);
   \   000000AA   0x201C             MOVS     R0,#+28
   \   000000AC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    195            HAL_NVIC_EnableIRQ(TIM3_IRQn);
   \   000000B0   0x201D             MOVS     R0,#+29
   \   000000B2   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    196          #endif
    197            // Test I2C State.
    198          
    199            // Test I2C Status and Task init I2C if Active driver.
    200            if ( !(Get_DriverStates( I2C_STATE )) )
   \   000000B6   0x2007             MOVS     R0,#+7
   \   000000B8   0x.... 0x....      BL       Get_DriverStates
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD11A             BNE.N    ??main_3
    201            {
    202              // Wait 35  ms. For Busy flag to drop.
    203              if(I2C_WaitBusyFlag() != HAL_OK)
   \   000000C0   0x.... 0x....      BL       I2C_WaitBusyFlag
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD016             BEQ.N    ??main_3
    204              {
    205                // One More try at repairing hung I2C Channel.
    206                if ((RoadBrd_I2CRepair()) == HAL_OK)
   \   000000C8   0x.... 0x....      BL       RoadBrd_I2CRepair
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD10A             BNE.N    ??main_4
    207                {
    208                  Set_DriverStates( I2C_STATE, DRIVER_ON );
   \   000000D0   0x2101             MOVS     R1,#+1
   \   000000D2   0x2007             MOVS     R0,#+7
   \   000000D4   0x.... 0x....      BL       Set_DriverStates
    209                  RdBrd_ErrCdLogErrCd( REPAIR_I2C, MODULE_main );
   \   000000D8   0x2101             MOVS     R1,#+1
   \   000000DA   0x2014             MOVS     R0,#+20
   \   000000DC   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    210                  // Now..Initialize I2C and test Drivers.
    211                  MX_I2C1_Init();
   \   000000E0   0x.... 0x....      BL       MX_I2C1_Init
   \   000000E4   0xE007             B.N      ??main_3
    212                }
    213                else
    214                {
    215                  // OK...It is hung.
    216                  Set_DriverStates( I2C_STATE, DRIVER_OFF );
   \                     ??main_4: (+1)
   \   000000E6   0x2100             MOVS     R1,#+0
   \   000000E8   0x2007             MOVS     R0,#+7
   \   000000EA   0x.... 0x....      BL       Set_DriverStates
    217                  RdBrd_ErrCdLogErrCd( ERROR_I2CBUSY, MODULE_main );
   \   000000EE   0x2101             MOVS     R1,#+1
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    218                }
    219              }
    220            }
    221          
    222            //BGM Initialization
    223          #ifndef TEST2
    224          #ifndef PATCH_UART
    225            BGM111_Init();
   \                     ??main_3: (+1)
   \   000000F6   0x.... 0x....      BL       BGM111_Init
    226          #else
    227            RoadBrd_gpio_Off(gRESET_BGM111);
    228          #endif
    229          #endif
    230            
    231            // Test I2C Status and Task init I2C if Active driver.
    232            if ( Get_DriverStates( I2C_STATE ) )
   \   000000FA   0x2007             MOVS     R0,#+7
   \   000000FC   0x.... 0x....      BL       Get_DriverStates
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xF000 0x8086      BEQ.W    ??main_5
    233            {
    234              Status = RoadBrd_RGBInit();
   \   00000106   0x.... 0x....      BL       RoadBrd_RGBInit
   \   0000010A   0x0005             MOVS     R5,R0
    235              if (Status == HAL_OK)
   \   0000010C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000010E   0x2D00             CMP      R5,#+0
   \   00000110   0xD104             BNE.N    ??main_6
    236              {
    237                Set_DriverStates( IRRADIANCE_MNTR_TASK, DRIVER_ON );
   \   00000112   0x2101             MOVS     R1,#+1
   \   00000114   0x2002             MOVS     R0,#+2
   \   00000116   0x.... 0x....      BL       Set_DriverStates
   \   0000011A   0xE007             B.N      ??main_7
    238              }
    239              else
    240              {
    241                RdBrd_ErrCdLogErrCd( ERROR_RGB_INIT, MODULE_main );
   \                     ??main_6: (+1)
   \   0000011C   0x2101             MOVS     R1,#+1
   \   0000011E   0x2008             MOVS     R0,#+8
   \   00000120   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    242                Set_DriverStates( IRRADIANCE_MNTR_TASK, DRIVER_OFF );
   \   00000124   0x2100             MOVS     R1,#+0
   \   00000126   0x2002             MOVS     R0,#+2
   \   00000128   0x.... 0x....      BL       Set_DriverStates
    243              }
    244          
    245              // Initialize Voltage Monitor Hardware
    246              Status = RoadBrd_Init_VMonitor();
   \                     ??main_7: (+1)
   \   0000012C   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   00000130   0x0005             MOVS     R5,R0
    247              if (Status == HAL_OK)
   \   00000132   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000134   0x2D00             CMP      R5,#+0
   \   00000136   0xD104             BNE.N    ??main_8
    248              {
    249                Set_DriverStates( VOLTAGE_MNTR_TASK, DRIVER_ON );
   \   00000138   0x2101             MOVS     R1,#+1
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x.... 0x....      BL       Set_DriverStates
   \   00000140   0xE007             B.N      ??main_9
    250              }
    251              else
    252              {
    253                RdBrd_ErrCdLogErrCd( ERROR_VMNTR_INIT, MODULE_main );
   \                     ??main_8: (+1)
   \   00000142   0x2101             MOVS     R1,#+1
   \   00000144   0x2002             MOVS     R0,#+2
   \   00000146   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    254                Set_DriverStates( VOLTAGE_MNTR_TASK, DRIVER_OFF );
   \   0000014A   0x2100             MOVS     R1,#+0
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0x.... 0x....      BL       Set_DriverStates
    255              }
    256          
    257              // Initialize Grid Eye Hardware
    258              Status = RoadBrd_GridEyeInit();
   \                     ??main_9: (+1)
   \   00000152   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   00000156   0x0005             MOVS     R5,R0
    259              if (Status == HAL_OK)
   \   00000158   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000015A   0x2D00             CMP      R5,#+0
   \   0000015C   0xD104             BNE.N    ??main_10
    260              {
    261                Set_DriverStates( GRIDEYE_MNTR_TASK, DRIVER_ON );
   \   0000015E   0x2101             MOVS     R1,#+1
   \   00000160   0x2005             MOVS     R0,#+5
   \   00000162   0x.... 0x....      BL       Set_DriverStates
   \   00000166   0xE01A             B.N      ??main_11
    262              }
    263              else
    264              {
    265                RdBrd_ErrCdLogErrCd( ERROR_GDEYE_INIT, MODULE_main );
   \                     ??main_10: (+1)
   \   00000168   0x2101             MOVS     R1,#+1
   \   0000016A   0x2004             MOVS     R0,#+4
   \   0000016C   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    266                Set_DriverStates( GRIDEYE_MNTR_TASK, DRIVER_OFF );
   \   00000170   0x2100             MOVS     R1,#+0
   \   00000172   0x2005             MOVS     R0,#+5
   \   00000174   0x.... 0x....      BL       Set_DriverStates
    267                // OK, We have no Grid Eye...Do we have a Cool Eye?
    268                Status = RoadBrd_CoolEyeInit();
   \   00000178   0x.... 0x....      BL       RoadBrd_CoolEyeInit
   \   0000017C   0x0005             MOVS     R5,R0
    269                if (Status == HAL_OK)
   \   0000017E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000180   0x2D00             CMP      R5,#+0
   \   00000182   0xD104             BNE.N    ??main_12
    270                {
    271                  Set_DriverStates( COOLEYE_MNTR_TASK, DRIVER_ON );
   \   00000184   0x2101             MOVS     R1,#+1
   \   00000186   0x2006             MOVS     R0,#+6
   \   00000188   0x.... 0x....      BL       Set_DriverStates
   \   0000018C   0xE007             B.N      ??main_11
    272                }
    273                else
    274                {
    275                  RdBrd_ErrCdLogErrCd( ERROR_CLEYE_INIT, MODULE_main );
   \                     ??main_12: (+1)
   \   0000018E   0x2101             MOVS     R1,#+1
   \   00000190   0x200A             MOVS     R0,#+10
   \   00000192   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    276                  Set_DriverStates( COOLEYE_MNTR_TASK, DRIVER_OFF );
   \   00000196   0x2100             MOVS     R1,#+0
   \   00000198   0x2006             MOVS     R0,#+6
   \   0000019A   0x.... 0x....      BL       Set_DriverStates
    277                }
    278            }
    279          
    280              // Initialize Pressure Sensor Hardware
    281              Status = RoadBrd_Init_Barometer();
   \                     ??main_11: (+1)
   \   0000019E   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   000001A2   0x0005             MOVS     R5,R0
    282              if (Status == HAL_OK)
   \   000001A4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001A6   0x2D00             CMP      R5,#+0
   \   000001A8   0xD104             BNE.N    ??main_13
    283              {
    284                Set_DriverStates( PRESSURE_MNTR_TASK, DRIVER_ON );
   \   000001AA   0x2101             MOVS     R1,#+1
   \   000001AC   0x2003             MOVS     R0,#+3
   \   000001AE   0x.... 0x....      BL       Set_DriverStates
   \   000001B2   0xE007             B.N      ??main_14
    285              }
    286              else
    287              {
    288                RdBrd_ErrCdLogErrCd( ERROR_PRESSURE_INIT, MODULE_main );
   \                     ??main_13: (+1)
   \   000001B4   0x2101             MOVS     R1,#+1
   \   000001B6   0x2005             MOVS     R0,#+5
   \   000001B8   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    289                Set_DriverStates( PRESSURE_MNTR_TASK, DRIVER_OFF );
   \   000001BC   0x2100             MOVS     R1,#+0
   \   000001BE   0x2003             MOVS     R0,#+3
   \   000001C0   0x.... 0x....      BL       Set_DriverStates
    290              }
    291          
    292              // Initialize Humidity Sensor Hardware
    293              Status = RoadBrd_HumidityInit();
   \                     ??main_14: (+1)
   \   000001C4   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   000001C8   0x0005             MOVS     R5,R0
    294              if (Status == HAL_OK)
   \   000001CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001CC   0x2D00             CMP      R5,#+0
   \   000001CE   0xD104             BNE.N    ??main_15
    295              {
    296                Set_DriverStates( HUMIDITY_MNTR_TASK, DRIVER_ON );
   \   000001D0   0x2101             MOVS     R1,#+1
   \   000001D2   0x2004             MOVS     R0,#+4
   \   000001D4   0x.... 0x....      BL       Set_DriverStates
   \   000001D8   0xE007             B.N      ??main_16
    297              }
    298              else
    299              {
    300                RdBrd_ErrCdLogErrCd( ERROR_HUMIDITY_INIT, MODULE_main );
   \                     ??main_15: (+1)
   \   000001DA   0x2101             MOVS     R1,#+1
   \   000001DC   0x2007             MOVS     R0,#+7
   \   000001DE   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    301                Set_DriverStates( HUMIDITY_MNTR_TASK, DRIVER_OFF );
   \   000001E2   0x2100             MOVS     R1,#+0
   \   000001E4   0x2004             MOVS     R0,#+4
   \   000001E6   0x.... 0x....      BL       Set_DriverStates
    302              }
    303            
    304              // Test Temperature Sensor Hardware
    305              Status = RoadBrd_ReadTemp( &Temp );
   \                     ??main_16: (+1)
   \   000001EA   0xA814             ADD      R0,SP,#+80
   \   000001EC   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   000001F0   0x0005             MOVS     R5,R0
    306              if (Status == HAL_OK)
   \   000001F2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F4   0x2D00             CMP      R5,#+0
   \   000001F6   0xD104             BNE.N    ??main_17
    307              {
    308                Set_DriverStates( TEMPERATURE_MNTR_TASK, DRIVER_ON );
   \   000001F8   0x2101             MOVS     R1,#+1
   \   000001FA   0x2001             MOVS     R0,#+1
   \   000001FC   0x.... 0x....      BL       Set_DriverStates
   \   00000200   0xE007             B.N      ??main_5
    309              }
    310              else
    311              {
    312                RdBrd_ErrCdLogErrCd( ERROR_TEMP_INIT, MODULE_main );
   \                     ??main_17: (+1)
   \   00000202   0x2101             MOVS     R1,#+1
   \   00000204   0x2009             MOVS     R0,#+9
   \   00000206   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    313                Set_DriverStates( TEMPERATURE_MNTR_TASK, DRIVER_OFF );
   \   0000020A   0x2100             MOVS     R1,#+0
   \   0000020C   0x2001             MOVS     R0,#+1
   \   0000020E   0x.... 0x....      BL       Set_DriverStates
    314              }
    315            } //EndIf ( Get_DriverStates( I2C_STATE )
    316            
    317            // Initialize key app vars.
    318            InitSensors();
   \                     ??main_5: (+1)
   \   00000212   0x.... 0x....      BL       InitSensors
    319            RoadBrd_ParserInit();                         // This initializes the Parse Tasking Structure.
   \   00000216   0x.... 0x....      BL       RoadBrd_ParserInit
    320            RoadBrd_WWDG_InitializeDateString();          // Initialize Date Tag From Server as NULL.
   \   0000021A   0x.... 0x....      BL       RoadBrd_WWDG_InitializeDateString
    321            RoadBrd_WWDG_InitializeTickString();          // Initialize Tick Tag From as NULL.
   \   0000021E   0x.... 0x....      BL       RoadBrd_WWDG_InitializeTickString
    322            //**
    323            //**
    324            //** Initialize all Flash Structures.
    325            //**
    326            //**
    327            //*******1. Initializ WWDG Flash Structure
    328            // 1a. Is WWDG Flash Frame Initialized?
    329            if (RoadBrd_WWDG_VerifyFrame())
   \   00000222   0x.... 0x....      BL       RoadBrd_WWDG_VerifyFrame
   \   00000226   0x2800             CMP      R0,#+0
   \   00000228   0xD004             BEQ.N    ??main_18
    330            {
    331              //Yes....Set FRAME_TASK Bit in Driver State Variable.
    332              Set_DriverStates( FRAME_TASK, DRIVER_ON );
   \   0000022A   0x2101             MOVS     R1,#+1
   \   0000022C   0x2008             MOVS     R0,#+8
   \   0000022E   0x.... 0x....      BL       Set_DriverStates
   \   00000232   0xE010             B.N      ??main_19
    333            } // EndIf (RoadBrd_WWDG_VerifyFrame())
    334            else
    335            {
    336              //No....1b. Attempt to Initialize WWDG Flash Frame.
    337              if (RoadBrd_WWDG_InitializeFrmFlash() != HAL_OK)
   \                     ??main_18: (+1)
   \   00000234   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   \   00000238   0x2800             CMP      R0,#+0
   \   0000023A   0xD008             BEQ.N    ??main_20
    338              {
    339                //FAILED....Indicate Error Code and Fail Driver State.
    340                RdBrd_ErrCdLogErrCd( ERROR_FRAME_INIT, MODULE_main );
   \   0000023C   0x2101             MOVS     R1,#+1
   \   0000023E   0x2010             MOVS     R0,#+16
   \   00000240   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    341                Set_DriverStates( FRAME_TASK, DRIVER_OFF );
   \   00000244   0x2100             MOVS     R1,#+0
   \   00000246   0x2008             MOVS     R0,#+8
   \   00000248   0x.... 0x....      BL       Set_DriverStates
   \   0000024C   0xE003             B.N      ??main_19
    342              }
    343              else
    344              {
    345                //SUCCESS....Set FRAME_TASK Bit in Driver State Variable.
    346                Set_DriverStates( FRAME_TASK, DRIVER_ON );
   \                     ??main_20: (+1)
   \   0000024E   0x2101             MOVS     R1,#+1
   \   00000250   0x2008             MOVS     R0,#+8
   \   00000252   0x.... 0x....      BL       Set_DriverStates
    347              }
    348            } // EndElse (RoadBrd_WWDG_VerifyFrame())
    349            
    350            //*******2. Initializ Calibration Flash Structure
    351            // 2a. Is Calibration Flash Frame Initialized?
    352            if (RoadBrd_CAL_VerifyFrame())
   \                     ??main_19: (+1)
   \   00000256   0x.... 0x....      BL       RoadBrd_CAL_VerifyFrame
   \   0000025A   0x2800             CMP      R0,#+0
   \   0000025C   0xD004             BEQ.N    ??main_21
    353            {
    354              //Yes....Set CAL_TASK Bit in Driver State Variable.
    355              Set_DriverStates( CAL_TASK, DRIVER_ON );
   \   0000025E   0x2101             MOVS     R1,#+1
   \   00000260   0x2009             MOVS     R0,#+9
   \   00000262   0x.... 0x....      BL       Set_DriverStates
   \   00000266   0xE010             B.N      ??main_22
    356            } // EndIf (RoadBrd_WWDG_VerifyFrame())
    357            else
    358            {
    359              //No....2b. Attempt to Initialize Structure Flash Structure.
    360              if (RoadBrd_CAL_InitializeFrmFlash() != HAL_OK)
   \                     ??main_21: (+1)
   \   00000268   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   0000026C   0x2800             CMP      R0,#+0
   \   0000026E   0xD008             BEQ.N    ??main_23
    361              {
    362                //FAILED....Indicate Error Code and Fail Driver State.
    363                RdBrd_ErrCdLogErrCd( ERROR_CAL_INIT, MODULE_main );
   \   00000270   0x2101             MOVS     R1,#+1
   \   00000272   0x2013             MOVS     R0,#+19
   \   00000274   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    364                Set_DriverStates( CAL_TASK, DRIVER_OFF );
   \   00000278   0x2100             MOVS     R1,#+0
   \   0000027A   0x2009             MOVS     R0,#+9
   \   0000027C   0x.... 0x....      BL       Set_DriverStates
   \   00000280   0xE003             B.N      ??main_22
    365              }
    366              else
    367              {
    368                //SUCCESS....Set FRAME_TASK Bit in Driver State Variable.
    369                Set_DriverStates( CAL_TASK, DRIVER_ON );
   \                     ??main_23: (+1)
   \   00000282   0x2101             MOVS     R1,#+1
   \   00000284   0x2009             MOVS     R0,#+9
   \   00000286   0x.... 0x....      BL       Set_DriverStates
    370              }
    371            } // EndElse (RoadBrd_WWDG_VerifyFrame())
    372            
    373            
    374          // Initialize Key Vars once Flash has been validated.
    375            // Initialize Key Timer Sampling Vars.
    376            Set_TickCounts( RoadBrd_Get_RdSndTickCnt(), RoadBrd_Get_SnsrTickCnt() );
   \                     ??main_22: (+1)
   \   0000028A   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   0000028E   0x0007             MOVS     R7,R0
   \   00000290   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00000294   0x0039             MOVS     R1,R7
   \   00000296   0x.... 0x....      BL       Set_TickCounts
    377              
    378            // Time to start WWDG..
    379            HAL_NVIC_EnableIRQ(WWDG_IRQn);
   \   0000029A   0x2000             MOVS     R0,#+0
   \   0000029C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    380            MX_WWDG_Init();
   \   000002A0   0x.... 0x....      BL       MX_WWDG_Init
    381            RoadBrd_WWDG_Start();
   \   000002A4   0x.... 0x....      BL       RoadBrd_WWDG_Start
    382          
    383          #endif
    384          
    385          #ifdef TASKING
    386            /* USER CODE END 2 */
    387          
    388            /* Call init function for freertos objects (in freertos.c) */
    389            MX_FREERTOS_Init();
    390          
    391            /* Start scheduler */
    392            osKernelStart();
    393            
    394            /* We should never get here as control is now taken by the scheduler */
    395          
    396            /* Infinite loop */
    397            /* USER CODE BEGIN WHILE */
    398          #else
    399            
    400            #ifdef TEST
    401                // Turn On Bluetooth Interface for Debug.
    402                RoadBrd_gpio_On( gRESET_BGM111 );
    403            #else
    404          //    #ifndef TEST2
    405                #ifdef ASCII
    406                  // Send Opening Banner for Monitor Code.
    407                  #ifdef NUCLEO
    408          //        strcpy( (char *)tempBffr2, "*********************  WEATHERCLOUD *********************\r\n\r\n");
    409                    strcpy( (char *)tempBffr2, "\r\n\r\n");
    410                    // Send string to UART..
    411          #ifdef REV_L
    412                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    413                    // Wait for msg to be completed.
    414                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    415                    {
    416                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    417                    }
    418                    // Clear State for Next Transfer.
    419                    clrUsartState( NUCLEO_USART );
    420          #else
    421                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    422                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    423          #endif
    424                    if (Status != HAL_OK)
    425                      Error_Handler();
    426                    sprintf( (char *)tempBffr2, "     Road Board Monitor %s Hardware Version %s \r\n", VERSION_NUM, BRD_REV);
    427                    //strcpy( (char *)tempBffr2, "     Road Board Monitor Rev K Hardware Version 1.0 \r\n");
    428                    // Send string to UART..
    429          #ifdef REV_L
    430                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    431                    // Wait for msg to be completed.
    432                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    433                    {
    434                    }
    435                    // Clear State for Next Transfer.
    436                    clrUsartState( NUCLEO_USART );
    437          #else
    438                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    439          #endif
    440                    if (Status != HAL_OK)
    441                      Error_Handler();
    442                    sprintf( (char *)tempBffr2, "                  Copyright %s. \r\n\r\n", REL_DATE);
    443                    //strcpy( (char *)tempBffr2, "                  Copyright August 9, 2016. \r\n\r\n\r\n> ");
    444                    // Send string to UART..
    445                    // *******Time to Build Extra Information...
    446          #ifdef REV_L
    447                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    448                    // Wait for msg to be completed.
    449                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    450                    {
    451                    }
    452                    // Clear State for Next Transfer.
    453                    clrUsartState( NUCLEO_USART );
    454          #else
    455                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    456          #endif
    457                    if (Status != HAL_OK)
    458                      Error_Handler();
    459                    sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
    460          #ifdef REV_L
    461                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    462                    // Wait for msg to be completed.
    463                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    464                    {
    465                    }
    466                    // Clear State for Next Transfer.
    467                    clrUsartState( NUCLEO_USART );
    468          #else
    469                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    470          #endif
    471                    if (Status != HAL_OK)
    472                      Error_Handler();
    473                    sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
    474          #ifdef REV_L
    475                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    476                    // Wait for msg to be completed.
    477                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    478                    {
    479                    }
    480                    // Clear State for Next Transfer.
    481                    clrUsartState( NUCLEO_USART );
    482          #else
    483                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    484          #endif
    485                    if (Status != HAL_OK)
    486                      Error_Handler();
    487                  #else
    488                    strcpy( (char *)tempBffr2, "*********************  WEATHERCLOUD *********************\r\n\r\n");
   \   000002A8   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   000002AC   0x4668             MOV      R0,SP
   \   000002AE   0x.... 0x....      BL       strcpy
    489                    // Send string to UART..
    490          #ifdef REV_L
    491                    Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   000002B2   0x4669             MOV      R1,SP
   \   000002B4   0x2000             MOVS     R0,#+0
   \   000002B6   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   000002BA   0x0005             MOVS     R5,R0
    492                    // Wait for msg to be completed.
    493                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_24: (+1)
   \   000002BC   0x2000             MOVS     R0,#+0
   \   000002BE   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000002C2   0x2801             CMP      R0,#+1
   \   000002C4   0xD002             BEQ.N    ??main_25
    494                    {
    495                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   000002C6   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   \   000002CA   0xE7F7             B.N      ??main_24
    496                    }
    497                    // Clear State for Next Transfer.
    498                    clrUsartState( MONITOR_UART );
   \                     ??main_25: (+1)
   \   000002CC   0x2000             MOVS     R0,#+0
   \   000002CE   0x.... 0x....      BL       clrUsartState
    499          #else
    500                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    501                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    502          #endif
    503                    if (Status != HAL_OK)
   \   000002D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002D4   0x2D00             CMP      R5,#+0
   \   000002D6   0xD001             BEQ.N    ??main_26
    504                      Error_Handler();
   \   000002D8   0x.... 0x....      BL       Error_Handler
    505                    sprintf( (char *)tempBffr2, "     Road Board Monitor %s Hardware Version %s \r\n", VERSION_NUM, BRD_REV);
   \                     ??main_26: (+1)
   \   000002DC   0x.... 0x....      LDR.W    R3,??DataTable1_2
   \   000002E0   0x.... 0x....      LDR.W    R2,??DataTable1_3
   \   000002E4   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   000002E8   0x4668             MOV      R0,SP
   \   000002EA   0x.... 0x....      BL       sprintf
    506                    //strcpy( (char *)tempBffr2, "     Road Board Monitor Rev K Hardware Version 1.0 \r\n");
    507                    // Send string to UART..
    508          #ifdef REV_L
    509                    Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   000002EE   0x4669             MOV      R1,SP
   \   000002F0   0x2000             MOVS     R0,#+0
   \   000002F2   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   000002F6   0x0005             MOVS     R5,R0
    510                    // Wait for msg to be completed.
    511                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_27: (+1)
   \   000002F8   0x2000             MOVS     R0,#+0
   \   000002FA   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000002FE   0x2801             CMP      R0,#+1
   \   00000300   0xD002             BEQ.N    ??main_28
    512                    {
    513                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   00000302   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   \   00000306   0xE7F7             B.N      ??main_27
    514                    }
    515                    // Clear State for Next Transfer.
    516                    clrUsartState( MONITOR_UART );
   \                     ??main_28: (+1)
   \   00000308   0x2000             MOVS     R0,#+0
   \   0000030A   0x.... 0x....      BL       clrUsartState
    517          #else
    518                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    519                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    520          #endif
    521                    if (Status != HAL_OK)
   \   0000030E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000310   0x2D00             CMP      R5,#+0
   \   00000312   0xD001             BEQ.N    ??main_29
    522                      Error_Handler();
   \   00000314   0x.... 0x....      BL       Error_Handler
    523                    sprintf( (char *)tempBffr2, "                  Copyright %s. \r\n\r\n", REL_DATE);
   \                     ??main_29: (+1)
   \   00000318   0x.... 0x....      LDR.W    R2,??DataTable1_5
   \   0000031C   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \   00000320   0x4668             MOV      R0,SP
   \   00000322   0x.... 0x....      BL       sprintf
    524                    //strcpy( (char *)tempBffr2, "                  Copyright August 9, 2016. \r\n\r\n\r\n> ");
    525                    // Send string to UART..
    526          #ifdef REV_L
    527                    Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   00000326   0x4669             MOV      R1,SP
   \   00000328   0x2000             MOVS     R0,#+0
   \   0000032A   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   0000032E   0x0005             MOVS     R5,R0
    528                    // Wait for msg to be completed.
    529                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_30: (+1)
   \   00000330   0x2000             MOVS     R0,#+0
   \   00000332   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000336   0x2801             CMP      R0,#+1
   \   00000338   0xD002             BEQ.N    ??main_31
    530                    {
    531                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   0000033A   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   \   0000033E   0xE7F7             B.N      ??main_30
    532                    }
    533                    // Clear State for Next Transfer.
    534                    clrUsartState( MONITOR_UART );
   \                     ??main_31: (+1)
   \   00000340   0x2000             MOVS     R0,#+0
   \   00000342   0x.... 0x....      BL       clrUsartState
    535          #else
    536                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    537                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    538          #endif
    539                    if (Status != HAL_OK)
   \   00000346   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000348   0x2D00             CMP      R5,#+0
   \   0000034A   0xD001             BEQ.N    ??main_32
    540                      Error_Handler();
   \   0000034C   0x.... 0x....      BL       Error_Handler
    541                    // *******Time to Build Extra Information...
    542                    sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??main_32: (+1)
   \   00000350   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00000354   0x.... 0x....      BL       __aeabi_ui2f
   \   00000358   0x.... 0x....      LDR.W    R1,??DataTable1_7  ;; 0x41200000
   \   0000035C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000360   0x.... 0x....      BL       __aeabi_f2d
   \   00000364   0x0002             MOVS     R2,R0
   \   00000366   0x000B             MOVS     R3,R1
   \   00000368   0x.... 0x....      LDR.W    R1,??DataTable1_8
   \   0000036C   0x4668             MOV      R0,SP
   \   0000036E   0x.... 0x....      BL       sprintf
    543          #ifdef REV_L
    544                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   00000372   0x4669             MOV      R1,SP
   \   00000374   0x2000             MOVS     R0,#+0
   \   00000376   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   0000037A   0x0005             MOVS     R5,R0
    545                    // Wait for msg to be completed.
    546                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_33: (+1)
   \   0000037C   0x2000             MOVS     R0,#+0
   \   0000037E   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000382   0x2801             CMP      R0,#+1
   \   00000384   0xD1FA             BNE.N    ??main_33
    547                    {
    548                    }
    549                    // Clear State for Next Transfer.
    550                    clrUsartState( NUCLEO_USART );
   \   00000386   0x2000             MOVS     R0,#+0
   \   00000388   0x.... 0x....      BL       clrUsartState
    551          #else
    552                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    553          #endif
    554                    if (Status != HAL_OK)
   \   0000038C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000038E   0x2D00             CMP      R5,#+0
   \   00000390   0xD001             BEQ.N    ??main_34
    555                      Error_Handler();
   \   00000392   0x.... 0x....      BL       Error_Handler
    556                    sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??main_34: (+1)
   \   00000396   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   0000039A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000039E   0x....             LDR.N    R1,??DataTable1_7  ;; 0x41200000
   \   000003A0   0x.... 0x....      BL       __aeabi_fdiv
   \   000003A4   0x.... 0x....      BL       __aeabi_f2d
   \   000003A8   0x0002             MOVS     R2,R0
   \   000003AA   0x000B             MOVS     R3,R1
   \   000003AC   0x....             LDR.N    R1,??DataTable1_9
   \   000003AE   0x4668             MOV      R0,SP
   \   000003B0   0x.... 0x....      BL       sprintf
    557          #ifdef REV_L
    558                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   000003B4   0x4669             MOV      R1,SP
   \   000003B6   0x2000             MOVS     R0,#+0
   \   000003B8   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   000003BC   0x0005             MOVS     R5,R0
    559                    // Wait for msg to be completed.
    560                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_35: (+1)
   \   000003BE   0x2000             MOVS     R0,#+0
   \   000003C0   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000003C4   0x2801             CMP      R0,#+1
   \   000003C6   0xD1FA             BNE.N    ??main_35
    561                    {
    562                    }
    563                    // Clear State for Next Transfer.
    564                    clrUsartState( NUCLEO_USART );
   \   000003C8   0x2000             MOVS     R0,#+0
   \   000003CA   0x.... 0x....      BL       clrUsartState
    565          #else
    566                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    567          #endif
    568                    if (Status != HAL_OK)
   \   000003CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003D0   0x2D00             CMP      R5,#+0
   \   000003D2   0xD001             BEQ.N    ??main_36
    569                      Error_Handler();
   \   000003D4   0x.... 0x....      BL       Error_Handler
    570                    // Clear Buffer
    571                    for (x=0; x<TEMP_BUFF2_SZ; x++)
   \                     ??main_36: (+1)
   \   000003D8   0x2000             MOVS     R0,#+0
   \   000003DA   0x0004             MOVS     R4,R0
   \                     ??main_37: (+1)
   \   000003DC   0x2C50             CMP      R4,#+80
   \   000003DE   0xDA04             BGE.N    ??main_38
    572                      tempBffr2[x] = 0x00;
   \   000003E0   0x2000             MOVS     R0,#+0
   \   000003E2   0x4669             MOV      R1,SP
   \   000003E4   0x5508             STRB     R0,[R1, R4]
   \   000003E6   0x1C64             ADDS     R4,R4,#+1
   \   000003E8   0xE7F8             B.N      ??main_37
    573                    sprintf( (char *)tempBffr2, "TACK Limit: %d.\r\n", RoadBrd_Get_TackLimit() );
   \                     ??main_38: (+1)
   \   000003EA   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   000003EE   0x0002             MOVS     R2,R0
   \   000003F0   0x....             LDR.N    R1,??DataTable1_10
   \   000003F2   0x4668             MOV      R0,SP
   \   000003F4   0x.... 0x....      BL       sprintf
    574          #ifdef REV_L
    575                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   000003F8   0x4669             MOV      R1,SP
   \   000003FA   0x2000             MOVS     R0,#+0
   \   000003FC   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   00000400   0x0005             MOVS     R5,R0
    576                    // Wait for msg to be completed.
    577                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_39: (+1)
   \   00000402   0x2000             MOVS     R0,#+0
   \   00000404   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000408   0x2801             CMP      R0,#+1
   \   0000040A   0xD1FA             BNE.N    ??main_39
    578                    {
    579                    }
    580                    // Clear State for Next Transfer.
    581                    clrUsartState( NUCLEO_USART );
   \   0000040C   0x2000             MOVS     R0,#+0
   \   0000040E   0x.... 0x....      BL       clrUsartState
    582          #else
    583                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    584          #endif
    585                    if (Status != HAL_OK)
   \   00000412   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000414   0x2D00             CMP      R5,#+0
   \   00000416   0xD001             BEQ.N    ??main_40
    586                      Error_Handler();
   \   00000418   0x.... 0x....      BL       Error_Handler
    587                    sprintf( (char *)tempBffr2, "Boot Delay: %d Seconds.\r\n", RoadBrd_Get_BootDelay() );
   \                     ??main_40: (+1)
   \   0000041C   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   00000420   0x0002             MOVS     R2,R0
   \   00000422   0x....             LDR.N    R1,??DataTable1_11
   \   00000424   0x4668             MOV      R0,SP
   \   00000426   0x.... 0x....      BL       sprintf
    588          #ifdef REV_L
    589                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   0000042A   0x4669             MOV      R1,SP
   \   0000042C   0x2000             MOVS     R0,#+0
   \   0000042E   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   00000432   0x0005             MOVS     R5,R0
    590                    // Wait for msg to be completed.
    591                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_41: (+1)
   \   00000434   0x2000             MOVS     R0,#+0
   \   00000436   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   0000043A   0x2801             CMP      R0,#+1
   \   0000043C   0xD1FA             BNE.N    ??main_41
    592                    {
    593                    }
    594                    // Clear State for Next Transfer.
    595                    clrUsartState( NUCLEO_USART );
   \   0000043E   0x2000             MOVS     R0,#+0
   \   00000440   0x.... 0x....      BL       clrUsartState
    596          #else
    597                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    598          #endif
    599                    if (Status != HAL_OK)
   \   00000444   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000446   0x2D00             CMP      R5,#+0
   \   00000448   0xD001             BEQ.N    ??main_42
    600                      Error_Handler();
   \   0000044A   0x.... 0x....      BL       Error_Handler
    601                    // Now Display the Units Enabled State.
    602                    if (RoadBrd_Get_UnitsFlag())
   \                     ??main_42: (+1)
   \   0000044E   0x.... 0x....      BL       RoadBrd_Get_UnitsFlag
   \   00000452   0x2800             CMP      R0,#+0
   \   00000454   0xD004             BEQ.N    ??main_43
    603                    {
    604                      sprintf( (char *)tempBffr2, "Units XML State: ENABLED\r\n\r\n> ");
   \   00000456   0x....             LDR.N    R1,??DataTable1_12
   \   00000458   0x4668             MOV      R0,SP
   \   0000045A   0x.... 0x....      BL       sprintf
   \   0000045E   0xE003             B.N      ??main_44
    605                    }
    606                    else
    607                    {
    608                      sprintf( (char *)tempBffr2, "Units XML State: DISABLED\r\n\r\n> ");
   \                     ??main_43: (+1)
   \   00000460   0x....             LDR.N    R1,??DataTable1_13
   \   00000462   0x4668             MOV      R0,SP
   \   00000464   0x.... 0x....      BL       sprintf
    609                    }
    610          #ifdef REV_L
    611                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \                     ??main_44: (+1)
   \   00000468   0x4669             MOV      R1,SP
   \   0000046A   0x2000             MOVS     R0,#+0
   \   0000046C   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   00000470   0x0005             MOVS     R5,R0
    612                    // Wait for msg to be completed.
    613                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_45: (+1)
   \   00000472   0x2000             MOVS     R0,#+0
   \   00000474   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000478   0x2801             CMP      R0,#+1
   \   0000047A   0xD1FA             BNE.N    ??main_45
    614                    {
    615                    }
    616                    // Clear State for Next Transfer.
    617                    clrUsartState( NUCLEO_USART );
   \   0000047C   0x2000             MOVS     R0,#+0
   \   0000047E   0x.... 0x....      BL       clrUsartState
    618          #else
    619                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    620          #endif
    621                    if (Status != HAL_OK)
   \   00000482   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000484   0x2D00             CMP      R5,#+0
   \   00000486   0xD001             BEQ.N    ??main_46
    622                      Error_Handler();
   \   00000488   0x.... 0x....      BL       Error_Handler
    623          #ifdef BUG_ENABLE
    624                    SCB->CCR |= 0x10;
    625                    int a = 10;
    626                    int b = 0;
    627                    int c;
    628                    c = a/b;
    629                    sprintf( (char *)tempBffr2, "Bug Value Dump: %d\r\n\r\n> ",c);
    630            #ifdef REV_L
    631                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    632                    // Wait for msg to be completed.
    633                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    634                    {
    635                    }
    636                    // Clear State for Next Transfer.
    637                    clrUsartState( NUCLEO_USART );
    638            #else
    639                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    640            #endif
    641          #endif          
    642                 #endif
    643          //      #endif
    644              #endif
    645            #endif
    646            while (1)
    647            {
    648            /* USER CODE END WHILE */
    649          
    650            /* USER CODE BEGIN 3 */
    651            /****************************************************************************
    652              * TEST CODE....Blinks LEDs for both Road Board and Nucleo Board.
    653              **************************************************************************/
    654            #ifdef TEST
    655              #ifdef NUCLEO
    656                // Turn On NUCLEO_LED_GREEN LED.
    657                RoadBrd_gpio_On( NUCLEO_LED_GREEN );
    658                // Wait 500msec.
    659                RoadBrd_Delay( 500 );
    660                // Turn Off NUCLEO_LED_GREEN LED.
    661                RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    662              #else
    663                // Turn On Blue LED and turn off Yellow LED.
    664                RoadBrd_gpio_On( BLUE_LED );
    665                RoadBrd_gpio_Off( YELLOW_LED );
    666                // Wait 500msec.
    667                RoadBrd_Delay( 500 );
    668                // Turn On Green LED and turn off Blue LED.
    669                RoadBrd_gpio_On( GREEN_LED );
    670                RoadBrd_gpio_Off( BLUE_LED );
    671                // Wait 500msec.
    672                RoadBrd_Delay( 500 );
    673                // Turn On Yellow LED and turn off Green LED.
    674                RoadBrd_gpio_On( YELLOW_LED );
    675                RoadBrd_gpio_Off( GREEN_LED );
    676              #endif
    677              // Wait 500msec.
    678              RoadBrd_Delay( 500 );
    679            //******************Endif TEST
    680            #else
    681            //******************Else TEST
    682          
    683            /****************************************************************************
    684             * TEST2 CODE....Reads COM port and translates back to sender. Simple COMM test.
    685             **************************************************************************/
    686              #ifdef TEST2
    687                #ifdef NUCLEO
    688                  // Turn Off NUCLEO_LED_GREEN LED.
    689                  RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    690                  // Wait on a character from Nucleo COM Port.
    691          #ifdef REV_L
    692                  Status = RoadBrd_UART_Receive_IT(NUCLEO_USART, tempBffr, 1);
    693                  // Wait for msg to be completed.
    694                  while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    695                  {
    696                  }
    697                  // Clear State for Next Transfer.
    698                  clrUsartState( NUCLEO_USART );
    699          #else
    700                  Status = RoadBrd_UART_Receive(NUCLEO_USART, tempBffr, 1);
    701          #endif
    702                  // Turn On NUCLEO_LED_GREEN LED.
    703                  RoadBrd_gpio_On( NUCLEO_LED_GREEN );
    704                  switch(  Status)
    705                  {
    706                    case HAL_OK:
    707                      // We have a good character. Time to build a response string.
    708                      tempBffr2[0] = '(';
    709                      tempBffr2[1] = tempBffr[0];
    710                      tempBffr2[2] = ')';
    711                      tempBffr2[3] = 0x00;
    712                      // Send string to UART..
    713          #ifdef REV_L
    714                      Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    715                      // Wait for msg to be completed.
    716                      while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    717                      {
    718                      }
    719                      // Clear State for Next Transfer.
    720                      clrUsartState( NUCLEO_USART );
    721          #else
    722                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    723          #endif
    724                      if (Status != HAL_OK)
    725                        Error_Handler();
    726                      /*Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    727                      if (Status != HAL_OK)
    728                        Error_Handler();
    729                      // Now wait for completion of Transmit
    730                      PStatus = RESET;
    731                      while (PStatus == RESET)
    732                      {
    733                        PStatus = RoadBrd_Uart_Status(NUCLEO_USART);
    734                      } */
    735                      break;
    736                    case HAL_ERROR:
    737                      // ERROR. We are done.
    738                      Error_Handler();
    739                      break;
    740                    case HAL_BUSY:
    741                      // ERROR. We are done.
    742                      Error_Handler();
    743                      break;
    744                    case HAL_TIMEOUT:
    745                      // Nothing to do. Try again.
    746                      break;
    747                    default:
    748                      // ERROR. We are done.
    749                      Error_Handler();
    750                      break;
    751                    
    752                  }
    753                // Wait 500msec.
    754                RoadBrd_Delay( 50 );
    755                #else
    756                  // Turn Off BGM_LED LED.
    757                  RoadBrd_gpio_Off( BGM_LED );
    758                  // Wait on a character from Nucleo COM Port.
    759           #ifdef REV_L
    760                  Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tempBffr, 1);
    761                  // Wait for msg to be completed.
    762                  while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    763                  {
    764                  }
    765                  // Clear State for Next Transfer.
    766                  clrUsartState( MONITOR_UART );
    767          #else
    768                  Status = RoadBrd_UART_Receive(MONITOR_UART, tempBffr, 1);
    769          #endif
    770                  // Turn On BGM_LED LED.
    771                  RoadBrd_gpio_On( BGM_LED );
    772                  switch(  Status)
    773                  {
    774                    case HAL_OK:
    775                      // We have a good character. Time to build a response string.
    776                      tempBffr2[0] = '(';
    777                      tempBffr2[1] = tempBffr[0];
    778                      tempBffr2[2] = ')';
    779                      tempBffr2[3] = 0x00;
    780                      // Send string to UART..
    781          #ifdef REV_L
    782                      Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
    783                      // Wait for msg to be completed.
    784                      while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    785                      {
    786                      }
    787                      // Clear State for Next Transfer.
    788                      clrUsartState( MONITOR_UART );
    789          #else
    790                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    791          #endif
    792                      if (Status != HAL_OK)
    793                        Error_Handler();
    794                      /*Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    795                      if (Status != HAL_OK)
    796                        Error_Handler();
    797                      // Now wait for completion of Transmit
    798                      PStatus = RESET;
    799                      while (PStatus == RESET)
    800                      {
    801                        PStatus = RoadBrd_Uart_Status(NUCLEO_USART);
    802                      } */
    803                      break;
    804                    case HAL_ERROR:
    805                      // ERROR. We are done.
    806                      Error_Handler();
    807                      break;
    808                    case HAL_BUSY:
    809                      // ERROR. We are done.
    810                      Error_Handler();
    811                      break;
    812                    case HAL_TIMEOUT:
    813                      // Nothing to do. Try again.
    814                      break;
    815                    default:
    816                      // ERROR. We are done.
    817                      Error_Handler();
    818                      break;
    819                    
    820                  }
    821                // Wait 500msec.
    822                RoadBrd_Delay( 50 );
    823                #endif
    824              //******************Endif TEST2
    825              #else
    826              //******************Else TEST2
    827            /*****************************************************************************
    828             *    NORMAL FLOW HERE
    829             ****************************************************************************/
    830          //         RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    831          //         Status = RoadBrd_UART_Receive(NUCLEO_USART, tempBffr, 1);
    832                #ifdef NUCLEO
    833                
    834                //************************* NUCLEO VERSION *************************************   
    835                   // Turn Off NUCLEO_LED_GREEN LED.
    836                  RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    837                  // Wait on a character from Nucleo COM Port.
    838          #ifdef REV_L
    839                  tmpSize = Size;
    840                  pData = tempBffr;
    841                  while ( tmpSize>0 )
    842                  {
    843                    Status = RoadBrd_UART_Receive_IT(NUCLEO_USART, tempBffr, RECEIVE_SZ);
    844                    // Wait for msg to be completed.
    845                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    846                    {
    847                    }
    848                    // Clear State for Next Transfer.
    849                    clrUsartState( NUCLEO_USART );
    850                    if(Status == HAL_OK)
    851                    {
    852                      // Watch for termination characters.
    853                      if((tmpData[0]==0x0a) || (tmpData[0]==0x0d))
    854                      {
    855                        *pData = 0x00;
    856                        // Yes..We are done.
    857                        return Status;
    858                      }
    859                      else
    860                      {
    861                        // Move new character into passed buffer.
    862                        *pData = tmpData[0];
    863                        tmpSize--;                          // Decrement Count
    864                        pData++;                            // Move pointer to next buffer location.
    865                      }
    866                    }
    867                    else
    868                      Error_Handler();
    869                  } // EndWhile ( tmpSize>0 )
    870          #else
    871                  Status = RoadBrd_UART_Receive(NUCLEO_USART, tempBffr, RECEIVE_SZ);
    872          #endif
    873                  // Turn On NUCLEO_LED_GREEN LED.
    874          #ifndef LED_OFF
    875                  RoadBrd_gpio_On( NUCLEO_LED_GREEN );
    876          #endif
    877          #ifdef ASCII
    878                  // Send <CR><LF> to UART..
    879                  strcpy( (char *)tempBffr2, "\r\n");
    880          #ifdef REV_L
    881                      Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    882                      // Wait for msg to be completed.
    883                      while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    884                      {
    885                      }
    886                      // Clear State for Next Transfer.
    887                      clrUsartState( NUCLEO_USART );
    888          #else
    889                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    890          #endif
    891                  if (Status != HAL_OK)
    892                    Error_Handler();
    893          #endif
    894                  switch(  Status )
    895                  {
    896                    case HAL_OK:
    897                      Status = RoadBrd_ParseString((char *)tempBffr);
    898                      // We have a good Tasking String. Time to determine action.
    899                      if (Status != HAL_OK)
    900                        Error_Handler();
    901                      
    902                      break;
    903                    case HAL_ERROR:
    904                      // ERROR. We are done.
    905                      Error_Handler();
    906                      break;
    907                    case HAL_BUSY:
    908                      // ERROR. We are done.
    909                      Error_Handler();
    910                      break;
    911                    case HAL_TIMEOUT:
    912                      // Nothing to do. Try again.
    913                      break;
    914                    default:
    915                      // ERROR. We are done.
    916                      Error_Handler();
    917                      break;
    918                  }
    919                // Wait 500msec.
    920                RoadBrd_Delay( 50 );
    921                //************************* END NUCLEO VERSION *************************************   
    922                
    923                #else
    924          
    925                //************************* ROAD BRD VERSION *************************************   
    926                  // Wait on a character from Nucleo COM Port.
    927          //********************PATCH_UART ACTIVE*******************************************
    928          #ifdef PATCH_UART
    929          #ifdef REV_L
    930                  // Turn Off MICRO_LED LED.
    931                  RoadBrd_gpio_Off( MICRO_LED );
    932                  tmpSize = RECEIVE_SZ;
    933                  pData = tempBffr;
    934                  while ( tmpSize>0 )
    935                  {
    936                    Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tempBffr, RECEIVE_SZ);
    937                    // Wait for msg to be completed.
    938                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    939                    {
    940                     }
    941                    // Clear State for Next Transfer.
    942                    clrUsartState( MONITOR_UART );
    943                    if(Status == HAL_OK)
    944                    {
    945                      // Watch for termination characters.
    946                      if((tmpData[0]==0x0a) || (tmpData[0]==0x0d))
    947                      {
    948                        *pData = 0x00;
    949                        // Yes..We are done.
    950                        break;
    951                      }
    952                      else
    953                      {
    954                        // Move new character into passed buffer.
    955                        *pData = tmpData[0];
    956                        tmpSize--;                          // Decrement Count
    957                        pData++;                            // Move pointer to next buffer location.
    958                      }
    959                    }
    960                    else
    961                      Error_Handler();
    962                  } // EndWhile ( tmpSize>0 )
    963          #ifndef LED_OFF
    964                  RoadBrd_gpio_On( MICRO_LED );
    965          #endif
    966                  // Send <CR><LF> to UART..
    967                  strcpy( (char *)tempBffr2, "\r\n");
    968                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    969                  if (Status != HAL_OK)
    970                    Error_Handler();
    971                  switch(  Status )
    972                  {
    973                    case HAL_OK:
    974                      // We have a good Tasking String. Time to determine action.
    975                      Status = RoadBrd_ParseString((char *)tempBffr);
    976                      // We have a good Tasking String. Time to determine action.
    977                      if (Status != HAL_OK)
    978                        Error_Handler();
    979                      break;
    980                    case HAL_ERROR:
    981                      // ERROR. We are done.
    982                      Error_Handler();
    983                      break;
    984                    case HAL_BUSY:
    985                      // ERROR. We are done.
    986                      Error_Handler();
    987                      break;
    988                    case HAL_TIMEOUT:
    989                      // Nothing to do. Try again.
    990                      break;
    991                    default:
    992                      // ERROR. We are done.
    993                      Error_Handler();
    994                      break;
    995                    
    996                  } // EndSwitch (  Status )
    997          #else
    998                  // Turn Off BGM_LED LED.
    999                  RoadBrd_gpio_Off( MICRO_LED );
   1000                  Status = RoadBrd_UART_Receive(MONITOR_UART, tempBffr, RECEIVE_SZ);
   1001                  // Process Buffer Now.
   1002                  // Turn On BGM_LED LED.
   1003          #ifndef LED_OFF
   1004                  RoadBrd_gpio_On( MICRO_LED );
   1005          #endif
   1006                  // Send <CR><LF> to UART..
   1007                  strcpy( (char *)tempBffr2, "\r\n");
   1008          #ifdef REV_L
   1009                      Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   1010                      // Wait for msg to be completed.
   1011                      while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   1012                      {
   1013                      }
   1014                      // Clear State for Next Transfer.
   1015                      clrUsartState( MONITOR_UART );
   1016          #else
   1017                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
   1018          #endif
   1019                  if (Status != HAL_OK)
   1020                    Error_Handler();
   1021                  switch(  Status )
   1022                  {
   1023                    case HAL_OK:
   1024                      // We have a good Tasking String. Time to determine action.
   1025                      Status = RoadBrd_ParseString((char *)tempBffr, false);
   1026                      // We have a good Tasking String. Time to determine action.
   1027                      if (Status != HAL_OK)
   1028                        Error_Handler();
   1029                      break;
   1030                    case HAL_ERROR:
   1031                      // ERROR. We are done.
   1032                      Error_Handler();
   1033                      break;
   1034                    case HAL_BUSY:
   1035                      // ERROR. We are done.
   1036                      Error_Handler();
   1037                      break;
   1038                    case HAL_TIMEOUT:
   1039                      // Nothing to do. Try again.
   1040                      break;
   1041                    default:
   1042                      // ERROR. We are done.
   1043                      Error_Handler();
   1044                      break;
   1045                    
   1046                  } // EndSwitch (  Status )
   1047          #endif
   1048          //********************END PATCH_UART ACTIVE*******************************************
   1049          #else
   1050          //********************PATCH_UART NOT ACTIVE*******************************************
   1051          #ifdef REV_L
   1052                    /* Process BLE input */
   1053                    BGM111_ProcessInput();
   \                     ??main_46: (+1)
   \   0000048C   0x.... 0x....      BL       BGM111_ProcessInput
   1054                  
   1055                    // Process Timer Stimulus for Timer 2.
   1056                    Status = Proc_Timer2();
   \   00000490   0x.... 0x....      BL       Proc_Timer2
   \   00000494   0x0005             MOVS     R5,R0
   1057                    if(Status != HAL_OK)
   \   00000496   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000498   0x2D00             CMP      R5,#+0
   \   0000049A   0xD00D             BEQ.N    ??main_47
   1058                    {
   1059                      strcpy( (char *)tempBffr2, "BGM111_ProcessInput ERROR: Sensors reported Background error.\r\n");
   \   0000049C   0x....             LDR.N    R1,??DataTable1_14
   \   0000049E   0x4668             MOV      R0,SP
   \   000004A0   0x.... 0x....      BL       strcpy
   1060          #ifdef NUCLEO
   1061                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   1062          #else
   1063                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000004A4   0x4669             MOV      R1,SP
   \   000004A6   0x2000             MOVS     R0,#+0
   \   000004A8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004AC   0x0005             MOVS     R5,R0
   1064          #endif
   1065                      if (Status != HAL_OK)
   \   000004AE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004B0   0x2D00             CMP      R5,#+0
   \   000004B2   0xD001             BEQ.N    ??main_47
   1066                        Error_Handler();
   \   000004B4   0x.... 0x....      BL       Error_Handler
   1067                    }
   1068                    // Process any Outstanding Parse Tasks.
   1069                    RoadBrd_ProcessParserTsk();
   \                     ??main_47: (+1)
   \   000004B8   0x.... 0x....      BL       RoadBrd_ProcessParserTsk
   1070                    
   1071                    // Test to process CMD mode.
   1072                    Process_CmdMode();
   \   000004BC   0x.... 0x....      BL       Process_CmdMode
   1073                    
   1074                    /* Process the sensor state machine if the BLE module is ready */
   1075                      if ((BGM111_Ready()) &&
   1076                          (BGM111_Connected()) &&
   1077                          (BGM111_DataConnected()) &&
   1078                          (BGM111_SyncModeTest()) )
   \   000004C0   0x.... 0x....      BL       BGM111_Ready
   \   000004C4   0x2800             CMP      R0,#+0
   \   000004C6   0xD00F             BEQ.N    ??main_48
   \   000004C8   0x.... 0x....      BL       BGM111_Connected
   \   000004CC   0x2800             CMP      R0,#+0
   \   000004CE   0xD00B             BEQ.N    ??main_48
   \   000004D0   0x.... 0x....      BL       BGM111_DataConnected
   \   000004D4   0x2800             CMP      R0,#+0
   \   000004D6   0xD007             BEQ.N    ??main_48
   \   000004D8   0x.... 0x....      BL       BGM111_SyncModeTest
   \   000004DC   0x2800             CMP      R0,#+0
   \   000004DE   0xD003             BEQ.N    ??main_48
   1079                    {
   1080                      ProcessSensorState();
   \   000004E0   0x.... 0x....      BL       ProcessSensorState
   1081                      Process_RdSound();
   \   000004E4   0x.... 0x....      BL       Process_RdSound
   1082                    }
   1083                    /* Sleep when we have nothing to process */
   1084                    //PWR_EnterSleepMode(PWR_Regulator_ON, PWR_SLEEPEntry_WFI);
   1085                    // Only Process the first Time
   1086                    if (firstTime)
   \                     ??main_48: (+1)
   \   000004E8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004EA   0x2E00             CMP      R6,#+0
   \   000004EC   0xD00E             BEQ.N    ??main_49
   1087                    {
   1088                      firstTime = false;
   \   000004EE   0x2000             MOVS     R0,#+0
   \   000004F0   0x0006             MOVS     R6,R0
   1089                      Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tempBffr, RECEIVE_SZ);
   \   000004F2   0x227D             MOVS     R2,#+125
   \   000004F4   0xA91A             ADD      R1,SP,#+104
   \   000004F6   0x2000             MOVS     R0,#+0
   \   000004F8   0x.... 0x....      BL       RoadBrd_UART_Receive_IT
   \   000004FC   0x0005             MOVS     R5,R0
   1090                      // Enable BGM Serial Traffic.
   1091                      HAL_UART_EnableBGM_RX();
   \   000004FE   0x.... 0x....      BL       HAL_UART_EnableBGM_RX
   1092                      RoadBrd_SetBffrFlg();
   \   00000502   0x.... 0x....      BL       RoadBrd_SetBffrFlg
   1093                      // Clear bffrFlag..Only Processing one character.
   1094          //            bffrFlag = false;
   1095                      // Turn Off BGM_LED and MICRO_LED.
   1096                      RoadBrd_gpio_Off( MICRO_LED );
   \   00000506   0x2002             MOVS     R0,#+2
   \   00000508   0x.... 0x....      BL       RoadBrd_gpio_Off
   1097                    }
   1098                    // Service Watchdog
   1099                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \                     ??main_49: (+1)
   \   0000050C   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   1100                    // Wait for msg to be completed.
   1101                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_50: (+1)
   \   00000510   0x2000             MOVS     R0,#+0
   \   00000512   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000516   0x2801             CMP      R0,#+1
   \   00000518   0xD02E             BEQ.N    ??main_51
   1102                    {
   1103                      // Process Timer Stimulus for Timer 2.
   1104                      Status = Proc_Timer2();
   \   0000051A   0x.... 0x....      BL       Proc_Timer2
   \   0000051E   0x0005             MOVS     R5,R0
   1105                      if(Status != HAL_OK)
   \   00000520   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000522   0x2D00             CMP      R5,#+0
   \   00000524   0xD00D             BEQ.N    ??main_52
   1106                      {
   1107                        strcpy( (char *)tempBffr2, "BGM111_ProcessInput ERROR: Sensors reported Background error.\r\n");
   \   00000526   0x....             LDR.N    R1,??DataTable1_14
   \   00000528   0x4668             MOV      R0,SP
   \   0000052A   0x.... 0x....      BL       strcpy
   1108          #ifdef NUCLEO
   1109                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   1110          #else
   1111                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000052E   0x4669             MOV      R1,SP
   \   00000530   0x2000             MOVS     R0,#+0
   \   00000532   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000536   0x0005             MOVS     R5,R0
   1112          #endif
   1113                        if (Status != HAL_OK)
   \   00000538   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000053A   0x2D00             CMP      R5,#+0
   \   0000053C   0xD001             BEQ.N    ??main_52
   1114                          Error_Handler();
   \   0000053E   0x.... 0x....      BL       Error_Handler
   1115                      }
   1116                      // Process any Outstanding Parse Tasks.
   1117                      RoadBrd_ProcessParserTsk();
   \                     ??main_52: (+1)
   \   00000542   0x.... 0x....      BL       RoadBrd_ProcessParserTsk
   1118                      
   1119                      // Test to process CMD mode.
   1120                      Process_CmdMode();
   \   00000546   0x.... 0x....      BL       Process_CmdMode
   1121                      
   1122                      /* Process the sensor state machine if the BLE module is ready */
   1123                      if ((BGM111_Ready()) &&
   1124                          (BGM111_Connected()) &&
   1125                          (BGM111_DataConnected()) &&
   1126                          (BGM111_SyncModeTest()) )
   \   0000054A   0x.... 0x....      BL       BGM111_Ready
   \   0000054E   0x2800             CMP      R0,#+0
   \   00000550   0xD0DE             BEQ.N    ??main_50
   \   00000552   0x.... 0x....      BL       BGM111_Connected
   \   00000556   0x2800             CMP      R0,#+0
   \   00000558   0xD0DA             BEQ.N    ??main_50
   \   0000055A   0x.... 0x....      BL       BGM111_DataConnected
   \   0000055E   0x2800             CMP      R0,#+0
   \   00000560   0xD0D6             BEQ.N    ??main_50
   \   00000562   0x.... 0x....      BL       BGM111_SyncModeTest
   \   00000566   0x2800             CMP      R0,#+0
   \   00000568   0xD0D2             BEQ.N    ??main_50
   1127                      {
   1128                        // Service Watchdog
   1129                        RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   0000056A   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   1130                        ProcessSensorState();
   \   0000056E   0x.... 0x....      BL       ProcessSensorState
   1131                        Process_RdSound();
   \   00000572   0x.... 0x....      BL       Process_RdSound
   \   00000576   0xE7CB             B.N      ??main_50
   1132                      }
   1133                      // Test to see if we have any BGM Traffic to process.
   1134                      //BGM111_ProcessInput();
   1135                    }
   1136                    // Test if BGM or Monitor Character received.
   1137                    if (RoadBrd_Uart_Status(MONITOR_UART) == SET)
   \                     ??main_51: (+1)
   \   00000578   0x2000             MOVS     R0,#+0
   \   0000057A   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   0000057E   0x2801             CMP      R0,#+1
   \   00000580   0xD15E             BNE.N    ??main_53
   1138                    {
   1139                      // Clear State for Next Transfer.
   1140                      clrUsartState( MONITOR_UART );
   \   00000582   0x2000             MOVS     R0,#+0
   \   00000584   0x.... 0x....      BL       clrUsartState
   1141                      if(Status == HAL_OK)
   \   00000588   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000058A   0x2D00             CMP      R5,#+0
   \   0000058C   0xD14D             BNE.N    ??main_54
   1142                      {
   1143          //***** START HERE
   1144                        // Test Boot Monitor Flag...If Set, we ae in special Boot monitor mode.
   1145                        if (Tst_Boot_Bypass())
   \   0000058E   0x.... 0x....      BL       Tst_Boot_Bypass
   \   00000592   0x2800             CMP      R0,#+0
   \   00000594   0xD00D             BEQ.N    ??main_55
   1146                        {
   1147                          // We have a good Tasking String. Time to determine action.
   1148                          // Turn On BGM_LED LED.
   1149            #ifndef LED_OFF
   1150                          RoadBrd_gpio_On( GREEN_LED );
   \   00000596   0x2002             MOVS     R0,#+2
   \   00000598   0x.... 0x....      BL       RoadBrd_gpio_On
   1151            #endif
   1152                          Status = Parse_BootString((char *)tempBffr, false);
   \   0000059C   0x2100             MOVS     R1,#+0
   \   0000059E   0xA81A             ADD      R0,SP,#+104
   \   000005A0   0x.... 0x....      BL       Parse_BootString
   \   000005A4   0x0005             MOVS     R5,R0
   1153                          // We have a good Tasking String. Time to determine action.
   1154                          if (Status != HAL_OK)
   \   000005A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005A8   0x2D00             CMP      R5,#+0
   \   000005AA   0xD040             BEQ.N    ??main_56
   1155                            Error_Handler();
   \   000005AC   0x.... 0x....      BL       Error_Handler
   \   000005B0   0xE03D             B.N      ??main_56
   1156                        } // EndIf (Tst_Bypass())
   1157                        // Test Bypass Flag...If Set, we ae in special monitor mode.
   1158                        else if (Tst_Bypass())
   \                     ??main_55: (+1)
   \   000005B2   0x.... 0x....      BL       Tst_Bypass
   \   000005B6   0x2800             CMP      R0,#+0
   \   000005B8   0xD00D             BEQ.N    ??main_57
   1159                        {
   1160                          // We have a good Tasking String. Time to determine action.
   1161                          // Turn On BGM_LED LED.
   1162            #ifndef LED_OFF
   1163                          RoadBrd_gpio_On( GREEN_LED );
   \   000005BA   0x2002             MOVS     R0,#+2
   \   000005BC   0x.... 0x....      BL       RoadBrd_gpio_On
   1164            #endif
   1165                          Status = RoadBrd_ParseString((char *)tempBffr, false);
   \   000005C0   0x2100             MOVS     R1,#+0
   \   000005C2   0xA81A             ADD      R0,SP,#+104
   \   000005C4   0x.... 0x....      BL       RoadBrd_ParseString
   \   000005C8   0x0005             MOVS     R5,R0
   1166                          // We have a good Tasking String. Time to determine action.
   1167                          if (Status != HAL_OK)
   \   000005CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005CC   0x2D00             CMP      R5,#+0
   \   000005CE   0xD02E             BEQ.N    ??main_56
   1168                            Error_Handler();
   \   000005D0   0x.... 0x....      BL       Error_Handler
   \   000005D4   0xE02B             B.N      ??main_56
   1169                        } // EndIf (Tst_Bypass())
   1170                        else {
   1171                          // Yes..We are done.
   1172                          // Process Buffer NOW.
   1173                          // Send <CR><LF> to UART..
   1174                          strcpy( (char *)tempBffr2, "\r\n");
   \                     ??main_57: (+1)
   \   000005D6   0x....             ADR.N    R1,??DataTable1  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000005D8   0x4668             MOV      R0,SP
   \   000005DA   0x.... 0x....      BL       strcpy
   1175                          Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   000005DE   0x4669             MOV      R1,SP
   \   000005E0   0x2000             MOVS     R0,#+0
   \   000005E2   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   000005E6   0x0005             MOVS     R5,R0
   1176                          // Wait for msg to be completed.
   1177                          while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_58: (+1)
   \   000005E8   0x2000             MOVS     R0,#+0
   \   000005EA   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000005EE   0x2801             CMP      R0,#+1
   \   000005F0   0xD1FA             BNE.N    ??main_58
   1178                          {
   1179                          }
   1180                          // Clear State for Next Transfer.
   1181                          clrUsartState( MONITOR_UART );
   \   000005F2   0x2000             MOVS     R0,#+0
   \   000005F4   0x.... 0x....      BL       clrUsartState
   1182                          if (Status != HAL_OK)
   \   000005F8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005FA   0x2D00             CMP      R5,#+0
   \   000005FC   0xD001             BEQ.N    ??main_59
   1183                            Error_Handler();
   \   000005FE   0x.... 0x....      BL       Error_Handler
   1184                          if(Status == HAL_OK)
   \                     ??main_59: (+1)
   \   00000602   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000604   0x2D00             CMP      R5,#+0
   \   00000606   0xD10D             BNE.N    ??main_60
   1185                          {
   1186                            // We have a good Tasking String. Time to determine action.
   1187                            // Turn On BGM_LED LED.
   1188            #ifndef LED_OFF
   1189                            RoadBrd_gpio_On( GREEN_LED );
   \   00000608   0x2002             MOVS     R0,#+2
   \   0000060A   0x.... 0x....      BL       RoadBrd_gpio_On
   1190            #endif
   1191                            Status = RoadBrd_ParseString((char *)tempBffr, false);
   \   0000060E   0x2100             MOVS     R1,#+0
   \   00000610   0xA81A             ADD      R0,SP,#+104
   \   00000612   0x.... 0x....      BL       RoadBrd_ParseString
   \   00000616   0x0005             MOVS     R5,R0
   1192                            // We have a good Tasking String. Time to determine action.
   1193                            if (Status != HAL_OK)
   \   00000618   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000061A   0x2D00             CMP      R5,#+0
   \   0000061C   0xD007             BEQ.N    ??main_56
   1194                              Error_Handler();
   \   0000061E   0x.... 0x....      BL       Error_Handler
   \   00000622   0xE004             B.N      ??main_56
   1195                          }
   1196                          else
   1197                            Error_Handler();
   \                     ??main_60: (+1)
   \   00000624   0x.... 0x....      BL       Error_Handler
   \   00000628   0xE001             B.N      ??main_56
   1198                        } // EndElse (Tst_Bypass())
   1199                      }
   1200          //***** END HERE
   1201                      else
   1202                        Error_Handler();
   \                     ??main_54: (+1)
   \   0000062A   0x.... 0x....      BL       Error_Handler
   1203                    Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tempBffr, RECEIVE_SZ);
   \                     ??main_56: (+1)
   \   0000062E   0x227D             MOVS     R2,#+125
   \   00000630   0xA91A             ADD      R1,SP,#+104
   \   00000632   0x2000             MOVS     R0,#+0
   \   00000634   0x.... 0x....      BL       RoadBrd_UART_Receive_IT
   \   00000638   0x0005             MOVS     R5,R0
   1204                    // Turn Off MICRO_LED.
   1205                    RoadBrd_gpio_Off( MICRO_LED );
   \   0000063A   0x2002             MOVS     R0,#+2
   \   0000063C   0x.... 0x....      BL       RoadBrd_gpio_Off
   1206                  } // EndIf (RoadBrd_Uart_Status(MONITOR_UART) == SET)
   1207          
   1208          #else
   1209                  // Turn Off BGM_LED LED.
   1210                  RoadBrd_gpio_Off( MICRO_LED );
   1211                  Status = RoadBrd_UART_Receive(MONITOR_UART, tempBffr, RECEIVE_SZ);
   1212                  // Turn On BGM_LED LED.
   1213          #ifndef LED_OFF
   1214                  RoadBrd_gpio_On( MICRO_LED );
   1215          #endif
   1216                  // Send <CR><LF> to UART..
   1217                  strcpy( (char *)tempBffr2, "\r\n");
   1218                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
   1219                  if (Status != HAL_OK)
   1220                    Error_Handler();
   1221                  switch(  Status )
   1222                  {
   1223                    case HAL_OK:
   1224                      // We have a good Tasking String. Time to determine action.
   1225                      Status = RoadBrd_ParseString((char *)tempBffr, false);
   1226                      // We have a good Tasking String. Time to determine action.
   1227                      if (Status != HAL_OK)
   1228                        Error_Handler();
   1229                      break;
   1230                    case HAL_ERROR:
   1231                      // ERROR. We are done.
   1232                      Error_Handler();
   1233                      break;
   1234                    case HAL_BUSY:
   1235                      // ERROR. We are done.
   1236                      Error_Handler();
   1237                      break;
   1238                    case HAL_TIMEOUT:
   1239                      // Nothing to do. Try again.
   1240                      break;
   1241                    default:
   1242                      // ERROR. We are done.
   1243                      Error_Handler();
   1244                      break;
   1245                    
   1246                  } // EndSwitch (  Status )
   1247          #endif
   1248          //********************END PATCH_UART NOT ACTIVE*******************************************
   1249          #endif
   1250                // Wait 50msec.
   1251                RoadBrd_Delay( 50 );
   \                     ??main_53: (+1)
   \   00000640   0x2032             MOVS     R0,#+50
   \   00000642   0x.... 0x....      BL       RoadBrd_Delay
   \   00000646   0xE721             B.N      ??main_46
   1252                //************************* END Road BRD VERSION *************************************   
   1253                #endif
   1254            /*****************************************************************************
   1255             *    END NORMAL FLOW HERE
   1256             ****************************************************************************/
   1257              //******************EndElse TEST2
   1258              #endif
   1259          
   1260            //******************EndElse TEST
   1261            #endif
   1262            } // EndWhile (1)
   1263          //********************ENDIF TASKING
   1264          #endif
   1265            /* USER CODE END 3 */
   1266          
   1267          }
   1268          
   1269          /** System Clock Configuration
   1270          */

   \                                 In section .text, align 2, keep-with-next
   1271          void SystemClock_Config(void)
   1272          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
   1273          
   1274            RCC_OscInitTypeDef RCC_OscInitStruct;
   1275            RCC_ClkInitTypeDef RCC_ClkInitStruct;
   1276          
   1277            __HAL_RCC_PWR_CLK_ENABLE();
   \   00000004   0x....             LDR.N    R0,??DataTable1_15  ;; 0x40023824
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000000C   0x....             LDR.N    R1,??DataTable1_15  ;; 0x40023824
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0x....             LDR.N    R0,??DataTable1_15  ;; 0x40023824
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF010 0x5080      ANDS     R0,R0,#0x10000000
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   1278          
   1279            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
   \   0000001C   0x....             LDR.N    R0,??DataTable1_16  ;; 0x40007000
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF430 0x50C0      BICS     R0,R0,#0x1800
   \   00000024   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000028   0x....             LDR.N    R1,??DataTable1_16  ;; 0x40007000
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   1280          
   1281            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0x9006             STR      R0,[SP, #+24]
   1282            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x9007             STR      R0,[SP, #+28]
   1283            RCC_OscInitStruct.HSIState = RCC_HSI_ON;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x9009             STR      R0,[SP, #+36]
   1284            RCC_OscInitStruct.HSICalibrationValue = 16;
   \   00000038   0x2010             MOVS     R0,#+16
   \   0000003A   0x900A             STR      R0,[SP, #+40]
   1285            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x900F             STR      R0,[SP, #+60]
   1286            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
   \   00000040   0xF45F 0x3080      MOVS     R0,#+65536
   \   00000044   0x9010             STR      R0,[SP, #+64]
   1287            RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
   \   00000046   0xF45F 0x1080      MOVS     R0,#+1048576
   \   0000004A   0x9011             STR      R0,[SP, #+68]
   1288            RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
   \   0000004C   0xF45F 0x0000      MOVS     R0,#+8388608
   \   00000050   0x9012             STR      R0,[SP, #+72]
   1289            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \   00000052   0xA806             ADD      R0,SP,#+24
   \   00000054   0x.... 0x....      BL       HAL_RCC_OscConfig
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD001             BEQ.N    ??SystemClock_Config_0
   1290            {
   1291              Error_Handler();
   \   0000005C   0x.... 0x....      BL       Error_Handler
   1292            }
   1293          
   1294            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
   1295                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   \                     ??SystemClock_Config_0: (+1)
   \   00000060   0x200F             MOVS     R0,#+15
   \   00000062   0x9001             STR      R0,[SP, #+4]
   1296            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x9002             STR      R0,[SP, #+8]
   1297            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9003             STR      R0,[SP, #+12]
   1298            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   1299            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x9005             STR      R0,[SP, #+20]
   1300            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
   \   00000074   0x2101             MOVS     R1,#+1
   \   00000076   0xA801             ADD      R0,SP,#+4
   \   00000078   0x.... 0x....      BL       HAL_RCC_ClockConfig
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD001             BEQ.N    ??SystemClock_Config_1
   1301            {
   1302              Error_Handler();
   \   00000080   0x.... 0x....      BL       Error_Handler
   1303            }
   1304          
   1305            HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
   \                     ??SystemClock_Config_1: (+1)
   \   00000084   0x.... 0x....      BL       HAL_RCC_GetHCLKFreq
   \   00000088   0xF44F 0x717A      MOV      R1,#+1000
   \   0000008C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000090   0x.... 0x....      BL       HAL_SYSTICK_Config
   1306          
   1307            HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
   \   00000094   0x2004             MOVS     R0,#+4
   \   00000096   0x.... 0x....      BL       HAL_SYSTICK_CLKSourceConfig
   1308          
   1309            /* SysTick_IRQn interrupt configuration */
   1310            HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
   \   0000009A   0x2200             MOVS     R2,#+0
   \   0000009C   0x210F             MOVS     R1,#+15
   \   0000009E   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000A2   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1311          }
   \   000000A6   0xB013             ADD      SP,SP,#+76
   \   000000A8   0xBD00             POP      {PC}             ;; return
   1312          
   1313          /* USER CODE BEGIN 4 */
   1314          
   1315          /* USER CODE END 4 */
   1316          
   1317          /**
   1318            * @brief  This function is executed in case of error occurrence.
   1319            * @param  None
   1320            * @retval None
   1321            */

   \                                 In section .text, align 2, keep-with-next
   1322          void Error_Handler(void)
   1323          {
   \                     Error_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1324            /* USER CODE BEGIN Error_Handler */
   1325            /* User can add his own implementation to report the HAL error return state */
   1326            // Turn LED2 on
   1327          #ifdef NUCLEO
   1328            BSP_LED_On(LED2);
   1329          #else
   1330            RoadBrd_LED_On(BLUE_LED);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       RoadBrd_LED_On
   1331            RoadBrd_LED_On(GREEN_LED);
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x.... 0x....      BL       RoadBrd_LED_On
   1332            RoadBrd_LED_On(YELLOW_LED);
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x.... 0x....      BL       RoadBrd_LED_On
   1333          #endif
   1334            while(1) 
   1335            {
   1336              // Error if LED2 is slowly blinking (1 sec. period)
   1337          #ifdef NUCLEO
   1338              BSP_LED_Toggle(LED2); 
   1339          #else
   1340              RoadBrd_LED_Toggle(BLUE_LED); 
   \                     ??Error_Handler_0: (+1)
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       RoadBrd_LED_Toggle
   1341              RoadBrd_LED_Toggle(GREEN_LED); 
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x.... 0x....      BL       RoadBrd_LED_Toggle
   1342              RoadBrd_LED_Toggle(YELLOW_LED); 
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x.... 0x....      BL       RoadBrd_LED_Toggle
   1343          #endif
   1344              HAL_Delay(50); 
   \   00000026   0x2032             MOVS     R0,#+50
   \   00000028   0x.... 0x....      BL       HAL_Delay
   \   0000002C   0xE7F2             B.N      ??Error_Handler_0
   1345            }
   1346            /* USER CODE END Error_Handler */ 
   1347          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x40023824         DC32     0x40023824

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x40007000         DC32     0x40007000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000008   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000010   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 20H, 20H, 57H
   \              0x2A 0x2A    
   \              0x2A 0x20    
   \              0x20 0x57    
   \   00000018   0x45 0x41          DC8 45H, 41H, 54H, 48H, 45H, 52H, 43H, 4CH
   \              0x54 0x48    
   \              0x45 0x52    
   \              0x43 0x4C    
   \   00000020   0x4F 0x55          DC8 4FH, 55H, 44H, 20H, 2AH, 2AH, 2AH, 2AH
   \              0x44 0x20    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000028   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000030   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000038   0x2A 0x0D          DC8 2AH, 0DH, 0AH, 0DH, 0AH, 0
   \              0x0A 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x20 0x20          DC8 "     Road Board Monitor %s Hardware Version %s \015\012"
   \              0x20 0x20    
   \              0x20 0x52    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x42 0x6F    
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x25 0x73    
   \              0x20 0x48    
   \              0x61 0x72    
   \              0x64 0x77    
   \              0x61 0x72    
   \              0x65 0x20    
   \              0x56 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x4E 0x2E          DC8 "N.9.2"
   \              0x39 0x2E    
   \              0x32 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x65          DC8 "Rev M"
   \              0x76 0x20    
   \              0x4D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x20 0x20          DC8 "                  Copyright %s. \015\012\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x43 0x6F    
   \              0x70 0x79    
   \              0x72 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x25 0x73    
   \              0x2E 0x20    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x46 0x65          DC8 "Feb 1, 2018"
   \              0x62 0x20    
   \              0x31 0x2C    
   \              0x20 0x32    
   \              0x30 0x31    
   \              0x38 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012"
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d.\015\012"
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x42 0x6F          DC8 "Boot Delay: %d Seconds.\015\012"
   \              0x6F 0x74    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x55 0x6E          DC8 "Units XML State: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x55 0x6E          DC8 "Units XML State: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x42 0x47          DC8 42H, 47H, 4DH, 31H, 31H, 31H, 5FH, 50H
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x5F 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 49H, 6EH
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x49 0x6E    
   \   00000010   0x70 0x75          DC8 70H, 75H, 74H, 20H, 45H, 52H, 52H, 4FH
   \              0x74 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \   00000018   0x52 0x3A          DC8 52H, 3AH, 20H, 53H, 65H, 6EH, 73H, 6FH
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \   00000020   0x72 0x73          DC8 72H, 73H, 20H, 72H, 65H, 70H, 6FH, 72H
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \   00000028   0x74 0x65          DC8 74H, 65H, 64H, 20H, 42H, 61H, 63H, 6BH
   \              0x64 0x20    
   \              0x42 0x61    
   \              0x63 0x6B    
   \   00000030   0x67 0x72          DC8 67H, 72H, 6FH, 75H, 6EH, 64H, 20H, 65H
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x65    
   \   00000038   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 0DH, 0AH, 0
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0
   1348          
   1349          #ifdef USE_FULL_ASSERT
   1350          
   1351          /**
   1352             * @brief Reports the name of the source file and the source line number
   1353             * where the assert_param error has occurred.
   1354             * @param file: pointer to the source file name
   1355             * @param line: assert_param error line source number
   1356             * @retval None
   1357             */
   1358          void assert_failed(uint8_t* file, uint32_t line)
   1359          {
   1360            /* USER CODE BEGIN 6 */
   1361            /* User can add his own implementation to report the file name and line number,
   1362              ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1363            /* USER CODE END 6 */
   1364          
   1365          }
   1366          #endif
   1367          
   1368          /**
   1369            * @}
   1370            */ 
   1371          
   1372          /**
   1373            * @}
   1374          */ 
   1375          
   1376          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Error_Handler
         8   -> HAL_Delay
         8   -> RoadBrd_LED_On
         8   -> RoadBrd_LED_Toggle
      80   SystemClock_Config
        80   -> Error_Handler
        80   -> HAL_NVIC_SetPriority
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_GetHCLKFreq
        80   -> HAL_RCC_OscConfig
        80   -> HAL_SYSTICK_CLKSourceConfig
        80   -> HAL_SYSTICK_Config
     256   main
       256   -> ADC_Config
       256   -> BGM111_Connected
       256   -> BGM111_DataConnected
       256   -> BGM111_Init
       256   -> BGM111_ProcessInput
       256   -> BGM111_Ready
       256   -> BGM111_SyncModeTest
       256   -> Error_Handler
       256   -> Get_DriverStates
       256   -> HAL_Init
       256   -> HAL_NVIC_EnableIRQ
       256   -> HAL_TIM_StartTimer2
       256   -> HAL_TIM_StartTimer3
       256   -> HAL_UART_EnableBGM_RX
       256   -> I2C_WaitBusyFlag
       256   -> InitSensors
       256   -> MX_ADC_Init
       256   -> MX_DMA_Init
       256   -> MX_GPIO_Init
       256   -> MX_I2C1_Init
       256   -> MX_TIM2_Init
       256   -> MX_TIM3_Init
       256   -> MX_USART2_UART_Init
       256   -> MX_USART3_UART_Init
       256   -> MX_WWDG_Init
       256   -> Parse_BootString
       256   -> Proc_Timer2
       256   -> ProcessSensorState
       256   -> Process_CmdMode
       256   -> Process_RdSound
       256   -> RdBrd_ErrCdLogErrCd
       256   -> Reset_DriverStates
       256   -> RoadBrd_CAL_InitializeFrmFlash
       256   -> RoadBrd_CAL_VerifyFrame
       256   -> RoadBrd_CoolEyeInit
       256   -> RoadBrd_Delay
       256   -> RoadBrd_Get_BootDelay
       256   -> RoadBrd_Get_RdSndTickCnt
       256   -> RoadBrd_Get_SnsrTickCnt
       256   -> RoadBrd_Get_TackLimit
       256   -> RoadBrd_Get_UnitsFlag
       256   -> RoadBrd_GridEyeInit
       256   -> RoadBrd_HumidityInit
       256   -> RoadBrd_I2CRepair
       256   -> RoadBrd_Init_Barometer
       256   -> RoadBrd_Init_VMonitor
       256   -> RoadBrd_ParseString
       256   -> RoadBrd_ParserInit
       256   -> RoadBrd_ProcessParserTsk
       256   -> RoadBrd_RGBInit
       256   -> RoadBrd_ReadTemp
       256   -> RoadBrd_SetBffrFlg
       256   -> RoadBrd_TestI2C
       256   -> RoadBrd_UART_Receive_IT
       256   -> RoadBrd_UART_Transmit
       256   -> RoadBrd_UART_Transmit_IT
       256   -> RoadBrd_Uart_Status
       256   -> RoadBrd_WWDG_InitializeDateString
       256   -> RoadBrd_WWDG_InitializeFrmFlash
       256   -> RoadBrd_WWDG_InitializeTickString
       256   -> RoadBrd_WWDG_Refresh
       256   -> RoadBrd_WWDG_Start
       256   -> RoadBrd_WWDG_VerifyFrame
       256   -> RoadBrd_gpio_Off
       256   -> RoadBrd_gpio_On
       256   -> Set_DriverStates
       256   -> Set_TickCounts
       256   -> SystemClock_Config
       256   -> Tst_Boot_Bypass
       256   -> Tst_Bypass
       256   -> __aeabi_f2d
       256   -> __aeabi_fdiv
       256   -> __aeabi_ui2f
       256   -> clrUsartState
       256   -> sprintf
       256   -> strcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      64  ?_0
      52  ?_1
      32  ?_10
      32  ?_11
      64  ?_12
       4  ?_13
       8  ?_2
       8  ?_3
      40  ?_4
      12  ?_5
      40  ?_6
      40  ?_7
      20  ?_8
      28  ?_9
      46  Error_Handler
     170  SystemClock_Config
    1608  main

 
   444 bytes in section .rodata
 1 892 bytes in section .text
 
 1 892 bytes of CODE  memory
   444 bytes of CONST memory

Errors: none
Warnings: none
