###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       07/Dec/2017  20:12:30
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\usbd_desc.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\usbd_desc.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\usbd_desc.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\usbd_desc.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\usbd_desc.c
      1          /**
      2            ******************************************************************************
      3            * @file           : usbd_desc.c
      4            * @version        : v1.0_Cube
      5            * @brief          : This file implements the USB Device descriptors
      6            ******************************************************************************
      7            *
      8            * COPYRIGHT(c) 2016 STMicroelectronics
      9            *
     10            * Redistribution and use in source and binary forms, with or without modification,
     11            * are permitted provided that the following conditions are met:
     12            * 1. Redistributions of source code must retain the above copyright notice,
     13            * this list of conditions and the following disclaimer.
     14            * 2. Redistributions in binary form must reproduce the above copyright notice,
     15            * this list of conditions and the following disclaimer in the documentation
     16            * and/or other materials provided with the distribution.
     17            * 3. Neither the name of STMicroelectronics nor the names of its contributors
     18            * may be used to endorse or promote products derived from this software
     19            * without specific prior written permission.
     20            *
     21            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     22            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     25            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     27            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     28            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     29            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     30            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31            *
     32            ******************************************************************************
     33          */
     34          
     35          /* Includes ------------------------------------------------------------------*/
     36          #include "usbd_core.h"
     37          #include "usbd_desc.h"
     38          #include "usbd_conf.h"
     39          
     40          /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
     41            * @{
     42            */
     43          
     44          /** @defgroup USBD_DESC 
     45            * @brief USBD descriptors module
     46            * @{
     47            */ 
     48          
     49          /** @defgroup USBD_DESC_Private_TypesDefinitions
     50            * @{
     51            */ 
     52          /**
     53            * @}
     54            */ 
     55          
     56          /** @defgroup USBD_DESC_Private_Defines
     57            * @{
     58            */ 
     59          #define USBD_VID     1155
     60          #define USBD_LANGID_STRING     1033
     61          #define USBD_MANUFACTURER_STRING     "STMicroelectronics"
     62          #define USBD_PID_FS     22336
     63          #define USBD_PRODUCT_STRING_FS     "STM32 Virtual ComPort"
     64          #define USBD_SERIALNUMBER_STRING_FS     "00000000001A"
     65          #define USBD_CONFIGURATION_STRING_FS     "CDC Config"
     66          #define USBD_INTERFACE_STRING_FS     "CDC Interface"
     67          
     68          /* USER CODE BEGIN 0 */
     69          
     70          /* USER CODE END 0*/
     71          /**
     72            * @}
     73            */ 
     74          
     75          /** @defgroup USBD_DESC_Private_Macros
     76            * @{
     77            */ 
     78          /**
     79            * @}
     80            */ 
     81          
     82          /** @defgroup USBD_DESC_Private_Variables
     83            * @{
     84            */ 
     85          uint8_t *     USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
     86          uint8_t *     USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
     87          uint8_t *     USBD_FS_ManufacturerStrDescriptor ( USBD_SpeedTypeDef speed , uint16_t *length);
     88          uint8_t *     USBD_FS_ProductStrDescriptor ( USBD_SpeedTypeDef speed , uint16_t *length);
     89          uint8_t *     USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
     90          uint8_t *     USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
     91          uint8_t *     USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length);
     92          
     93          #ifdef USB_SUPPORT_USER_STRING_DESC
     94          uint8_t *     USBD_FS_USRStringDesc (USBD_SpeedTypeDef speed, uint8_t idx , uint16_t *length);  
     95          #endif /* USB_SUPPORT_USER_STRING_DESC */  
     96          

   \                                 In section .data, align 4
     97          USBD_DescriptorsTypeDef FS_Desc =
   \                     FS_Desc:
   \   00000000   0x........         DC32 USBD_FS_DeviceDescriptor, USBD_FS_LangIDStrDescriptor
   \              0x........   
   \   00000008   0x........         DC32 USBD_FS_ManufacturerStrDescriptor, USBD_FS_ProductStrDescriptor
   \              0x........   
   \   00000010   0x........         DC32 USBD_FS_SerialStrDescriptor, USBD_FS_ConfigStrDescriptor
   \              0x........   
   \   00000018   0x........         DC32 USBD_FS_InterfaceStrDescriptor
     98          {
     99            USBD_FS_DeviceDescriptor,
    100            USBD_FS_LangIDStrDescriptor, 
    101            USBD_FS_ManufacturerStrDescriptor,
    102            USBD_FS_ProductStrDescriptor,
    103            USBD_FS_SerialStrDescriptor,
    104            USBD_FS_ConfigStrDescriptor,
    105            USBD_FS_InterfaceStrDescriptor,
    106          };
    107          
    108          #if defined ( __ICCARM__ ) /*!< IAR Compiler */
    109            #pragma data_alignment=4   
    110          #endif
    111          /* USB Standard Device Descriptor */

   \                                 In section .data, align 4
    112          __ALIGN_BEGIN uint8_t USBD_FS_DeviceDesc[USB_LEN_DEV_DESC] __ALIGN_END =
   \                     USBD_FS_DeviceDesc:
   \   00000000   0x12 0x01          DC8 18, 1, 0, 2, 2, 2, 0, 64, 131, 4, 64, 87, 0, 2, 1, 2, 3, 1, 0, 0
   \              0x00 0x02    
   \              0x02 0x02    
   \              0x00 0x40    
   \              0x83 0x04    
   \              0x40 0x57    
   \              0x00 0x02    
   \              0x01 0x02    
   \              0x03 0x01    
   \              0x00 0x00    
    113            {
    114              0x12,                       /*bLength */
    115              USB_DESC_TYPE_DEVICE,       /*bDescriptorType*/
    116              0x00,                       /* bcdUSB */  
    117              0x02,
    118              0x02,                        /*bDeviceClass*/
    119              0x02,                       /*bDeviceSubClass*/
    120              0x00,                       /*bDeviceProtocol*/
    121              USB_MAX_EP0_SIZE,          /*bMaxPacketSize*/
    122              LOBYTE(USBD_VID),           /*idVendor*/
    123              HIBYTE(USBD_VID),           /*idVendor*/
    124              LOBYTE(USBD_PID_FS),           /*idVendor*/
    125              HIBYTE(USBD_PID_FS),           /*idVendor*/
    126              0x00,                       /*bcdDevice rel. 2.00*/
    127              0x02,
    128              USBD_IDX_MFC_STR,           /*Index of manufacturer  string*/
    129              USBD_IDX_PRODUCT_STR,       /*Index of product string*/
    130              USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
    131              USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
    132            } ; 
    133          /* USB_DeviceDescriptor */
    134          
    135          #if defined ( __ICCARM__ ) /*!< IAR Compiler */
    136            #pragma data_alignment=4   
    137          #endif
    138          
    139          /* USB Standard Device Descriptor */

   \                                 In section .data, align 4
    140          __ALIGN_BEGIN uint8_t USBD_LangIDDesc[USB_LEN_LANGID_STR_DESC] __ALIGN_END =
   \                     USBD_LangIDDesc:
   \   00000000   0x04 0x03          DC8 4, 3, 9, 4
   \              0x09 0x04    
    141          {
    142               USB_LEN_LANGID_STR_DESC,         
    143               USB_DESC_TYPE_STRING,       
    144               LOBYTE(USBD_LANGID_STRING),
    145               HIBYTE(USBD_LANGID_STRING), 
    146          };
    147          
    148          #if defined ( __ICCARM__ ) /*!< IAR Compiler */
    149            #pragma data_alignment=4   
    150          #endif

   \                                 In section .bss, align 4
    151          __ALIGN_BEGIN uint8_t USBD_StrDesc[USBD_MAX_STR_DESC_SIZ] __ALIGN_END;
   \                     USBD_StrDesc:
   \   00000000                      DS8 512
    152          /**
    153            * @}
    154            */ 
    155          
    156          /** @defgroup USBD_DESC_Private_FunctionPrototypes
    157            * @{
    158            */ 
    159          /**
    160            * @}
    161            */ 
    162          
    163          /** @defgroup USBD_DESC_Private_Functions
    164            * @{
    165            */ 
    166          
    167          /**
    168          * @brief  USBD_FS_DeviceDescriptor 
    169          *         return the device descriptor
    170          * @param  speed : current device speed
    171          * @param  length : pointer to data length variable
    172          * @retval pointer to descriptor buffer
    173          */

   \                                 In section .text, align 2, keep-with-next
    174          uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
    175          {
   \                     USBD_FS_DeviceDescriptor: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    176            *length = sizeof(USBD_FS_DeviceDesc);
   \   00000002   0x2012             MOVS     R0,#+18
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    177            return USBD_FS_DeviceDesc;
   \   00000006   0x....             LDR.N    R0,??DataTable6
   \   00000008   0x4770             BX       LR               ;; return
    178          }
    179          
    180          /**
    181          * @brief  USBD_FS_LangIDStrDescriptor 
    182          *         return the LangID string descriptor
    183          * @param  speed : current device speed
    184          * @param  length : pointer to data length variable
    185          * @retval pointer to descriptor buffer
    186          */

   \                                 In section .text, align 2, keep-with-next
    187          uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
    188          {
   \                     USBD_FS_LangIDStrDescriptor: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    189            *length =  sizeof(USBD_LangIDDesc);  
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    190            return USBD_LangIDDesc;
   \   00000006   0x....             LDR.N    R0,??DataTable6_1
   \   00000008   0x4770             BX       LR               ;; return
    191          }
    192          
    193          /**
    194          * @brief  USBD_FS_ProductStrDescriptor 
    195          *         return the product string descriptor
    196          * @param  speed : current device speed
    197          * @param  length : pointer to data length variable
    198          * @retval pointer to descriptor buffer
    199          */

   \                                 In section .text, align 2, keep-with-next
    200          uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
    201          {
   \                     USBD_FS_ProductStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    202            if(speed == 0)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_FS_ProductStrDescriptor_0
    203            {   
    204              USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable6_2
   \   00000010   0x....             LDR.N    R0,??DataTable6_3
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_FS_ProductStrDescriptor_1
    205            }
    206            else
    207            {
    208              USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
   \                     ??USBD_FS_ProductStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable6_2
   \   0000001C   0x....             LDR.N    R0,??DataTable6_3
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    209            }
    210            return USBD_StrDesc;
   \                     ??USBD_FS_ProductStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable6_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    211          }
    212          
    213          /**
    214          * @brief  USBD_FS_ManufacturerStrDescriptor 
    215          *         return the manufacturer string descriptor
    216          * @param  speed : current device speed
    217          * @param  length : pointer to data length variable
    218          * @retval pointer to descriptor buffer
    219          */

   \                                 In section .text, align 2, keep-with-next
    220          uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
    221          {
   \                     USBD_FS_ManufacturerStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    222            USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
   \   00000006   0x002A             MOVS     R2,R5
   \   00000008   0x....             LDR.N    R1,??DataTable6_2
   \   0000000A   0x....             LDR.N    R0,??DataTable6_4
   \   0000000C   0x.... 0x....      BL       USBD_GetString
    223            return USBD_StrDesc;
   \   00000010   0x....             LDR.N    R0,??DataTable6_2
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    224          }
    225          
    226          /**
    227          * @brief  USBD_FS_SerialStrDescriptor 
    228          *         return the serial number string descriptor
    229          * @param  speed : current device speed
    230          * @param  length : pointer to data length variable
    231          * @retval pointer to descriptor buffer
    232          */

   \                                 In section .text, align 2, keep-with-next
    233          uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
    234          {
   \                     USBD_FS_SerialStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    235            if(speed  == USBD_SPEED_HIGH)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_FS_SerialStrDescriptor_0
    236            {    
    237              USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable6_2
   \   00000010   0x....             LDR.N    R0,??DataTable6_5
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_FS_SerialStrDescriptor_1
    238            }
    239            else
    240            {
    241              USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
   \                     ??USBD_FS_SerialStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable6_2
   \   0000001C   0x....             LDR.N    R0,??DataTable6_5
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    242            }
    243            return USBD_StrDesc;
   \                     ??USBD_FS_SerialStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable6_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    244          }
    245          
    246          /**
    247          * @brief  USBD_FS_ConfigStrDescriptor 
    248          *         return the configuration string descriptor
    249          * @param  speed : current device speed
    250          * @param  length : pointer to data length variable
    251          * @retval pointer to descriptor buffer
    252          */

   \                                 In section .text, align 2, keep-with-next
    253          uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
    254          {
   \                     USBD_FS_ConfigStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    255            if(speed  == USBD_SPEED_HIGH)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_FS_ConfigStrDescriptor_0
    256            {  
    257              USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable6_2
   \   00000010   0x....             LDR.N    R0,??DataTable6_6
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_FS_ConfigStrDescriptor_1
    258            }
    259            else
    260            {
    261              USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
   \                     ??USBD_FS_ConfigStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable6_2
   \   0000001C   0x....             LDR.N    R0,??DataTable6_6
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    262            }
    263            return USBD_StrDesc;  
   \                     ??USBD_FS_ConfigStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable6_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    264          }
    265          
    266          /**
    267          * @brief  USBD_HS_InterfaceStrDescriptor 
    268          *         return the interface string descriptor
    269          * @param  speed : current device speed
    270          * @param  length : pointer to data length variable
    271          * @retval pointer to descriptor buffer
    272          */

   \                                 In section .text, align 2, keep-with-next
    273          uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
    274          {
   \                     USBD_FS_InterfaceStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    275            if(speed == 0)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_FS_InterfaceStrDescriptor_0
    276            {
    277              USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable6_2
   \   00000010   0x....             LDR.N    R0,??DataTable6_7
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_FS_InterfaceStrDescriptor_1
    278            }
    279            else
    280            {
    281              USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
   \                     ??USBD_FS_InterfaceStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable6_2
   \   0000001C   0x....             LDR.N    R0,??DataTable6_7
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    282            }
    283            return USBD_StrDesc;  
   \                     ??USBD_FS_InterfaceStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable6_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    284          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     USBD_FS_DeviceDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     USBD_LangIDDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     USBD_StrDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x54          DC8 "STM32 Virtual ComPort"
   \              0x4D 0x33    
   \              0x32 0x20    
   \              0x56 0x69    
   \              0x72 0x74    
   \              0x75 0x61    
   \              0x6C 0x20    
   \              0x43 0x6F    
   \              0x6D 0x50    
   \              0x6F 0x72    
   \              0x74 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x53 0x54          DC8 "STMicroelectronics"
   \              0x4D 0x69    
   \              0x63 0x72    
   \              0x6F 0x65    
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x72 0x6F    
   \              0x6E 0x69    
   \              0x63 0x73    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x30 0x30          DC8 "00000000001A"
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x31 0x41    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x43 0x44          DC8 "CDC Config"
   \              0x43 0x20    
   \              0x43 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x43 0x44          DC8 "CDC Interface"
   \              0x43 0x20    
   \              0x49 0x6E    
   \              0x74 0x65    
   \              0x72 0x66    
   \              0x61 0x63    
   \              0x65 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0
    285          /**
    286            * @}
    287            */ 
    288          
    289          /**
    290            * @}
    291            */ 
    292          
    293          /**
    294            * @}
    295            */ 
    296          
    297          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   USBD_FS_ConfigStrDescriptor
        16   -> USBD_GetString
       0   USBD_FS_DeviceDescriptor
      16   USBD_FS_InterfaceStrDescriptor
        16   -> USBD_GetString
       0   USBD_FS_LangIDStrDescriptor
      16   USBD_FS_ManufacturerStrDescriptor
        16   -> USBD_GetString
      16   USBD_FS_ProductStrDescriptor
        16   -> USBD_GetString
      16   USBD_FS_SerialStrDescriptor
        16   -> USBD_GetString


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
      24  ?_0
      20  ?_1
      16  ?_2
      12  ?_3
      16  ?_4
      28  FS_Desc
      38  USBD_FS_ConfigStrDescriptor
      20  USBD_FS_DeviceDesc
      10  USBD_FS_DeviceDescriptor
      38  USBD_FS_InterfaceStrDescriptor
      10  USBD_FS_LangIDStrDescriptor
      20  USBD_FS_ManufacturerStrDescriptor
      38  USBD_FS_ProductStrDescriptor
      38  USBD_FS_SerialStrDescriptor
       4  USBD_LangIDDesc
     512  USBD_StrDesc

 
 512 bytes in section .bss
  52 bytes in section .data
  88 bytes in section .rodata
 224 bytes in section .text
 
 224 bytes of CODE  memory
  88 bytes of CONST memory
 564 bytes of DATA  memory

Errors: none
Warnings: none
